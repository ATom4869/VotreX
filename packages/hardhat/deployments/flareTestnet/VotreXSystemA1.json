{
  "address": "0xE4D9b841A2Cd0db17461a8F8c3fEE640cD283f48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TXInterfaceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CheckTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CheckTokenETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VotreXOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "addCandidateDetail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "adminOrgCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg1",
          "type": "bytes10"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg2",
          "type": "bytes10"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nextOrgCreationBlock",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "adminName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_YourName",
          "type": "string"
        }
      ],
      "name": "buyContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_candidateCount",
          "type": "uint8"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "electionInfo",
      "outputs": [
        {
          "internalType": "enum VotreXSystemA1.ElectionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "candidateList",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "electionResults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPruned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "digitalSignature",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "registeredOrganization",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "electionWinner",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signedBy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        }
      ],
      "name": "finishElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionID",
          "type": "string"
        }
      ],
      "name": "getCandidateResult",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "candidateID",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateName",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candidateVoteCount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "name": "getElectionListInOrg",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum VotreXSystemA1.ElectionStatus[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "getOrgIDHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistrationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "registeredOrgList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "voterIDList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "participatedElectionEvents",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getelectionInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalCandidates",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "candidateIDs",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "enum VotreXSystemA1.ElectionStatus",
          "name": "statusElection",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVotreXActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "organizationData",
      "outputs": [
        {
          "internalType": "enum VotreXSystemA1.OrganizationType",
          "name": "orgType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddresses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "onPreparationElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "archivedElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMembers",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orgName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adminName",
          "type": "string"
        },
        {
          "internalType": "enum VotreXSystemA1.OrganizationType",
          "name": "_orgType",
          "type": "uint8"
        }
      ],
      "name": "registerOrganization",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "uniqueVoterID",
          "type": "bytes32"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_PriceinEther",
          "type": "uint256"
        }
      ],
      "name": "setOrgPriceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "VotesAmount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "VoterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg1",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg2",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "VoterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6b0b98be6ca28fc5b8b2ef31c91bb38e11959d9c66ada07e87aa9c7bbb1de83",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0xE4D9b841A2Cd0db17461a8F8c3fEE640cD283f48",
    "transactionIndex": 1,
    "gasUsed": "4815008",
    "logsBloom": "0x
    "blockHash": "0x96f4bbffbfc07bc7e048eec37a678c8da67cf719ea2d51d880ca073d15f02bb8",
    "transactionHash": "0xa6b0b98be6ca28fc5b8b2ef31c91bb38e11959d9c66ada07e87aa9c7bbb1de83",
    "logs": [],
    "blockNumber": 10637653,
    "cumulativeGasUsed": "5015181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5A676999715177E69Ce8CEdE05686C3e98f3E9c8"
  ],
  "numDeployments": 1,
  "solcInputHash": "32d5f4fbe2a94e9ce3f1eae98c922726",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TXInterfaceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CheckTokenETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotreXOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"addCandidateDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"adminOrgCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg1\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg2\",\"type\":\"bytes10\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextOrgCreationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"adminName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_YourName\",\"type\":\"string\"}],\"name\":\"buyContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_electionName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_candidateCount\",\"type\":\"uint8\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"electionInfo\",\"outputs\":[{\"internalType\":\"enum VotreXSystemA1.ElectionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"candidateList\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPruned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"digitalSignature\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"registeredOrganization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionWinner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signedBy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"finishElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_electionID\",\"type\":\"string\"}],\"name\":\"getCandidateResult\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"candidateID\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateName\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candidateVoteCount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"name\":\"getElectionListInOrg\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum VotreXSystemA1.ElectionStatus[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"getOrgIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"registeredOrgList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"voterIDList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"participatedElectionEvents\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getelectionInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"electionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalCandidates\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"candidateIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"enum VotreXSystemA1.ElectionStatus\",\"name\":\"statusElection\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotreXActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"organizationData\",\"outputs\":[{\"internalType\":\"enum VotreXSystemA1.OrganizationType\",\"name\":\"orgType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"onPreparationElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"archivedElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMembers\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orgName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adminName\",\"type\":\"string\"},{\"internalType\":\"enum VotreXSystemA1.OrganizationType\",\"name\":\"_orgType\",\"type\":\"uint8\"}],\"name\":\"registerOrganization\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_voterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueVoterID\",\"type\":\"bytes32\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PriceinEther\",\"type\":\"uint256\"}],\"name\":\"setOrgPriceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"VotesAmount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"VoterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg1\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg2\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"VoterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ultimate_VotreXSystemRC2.sol\":\"VotreXSystemA1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Ultimate_VotreXSystemRC2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma abicoder v2;\\npragma solidity ^0.8.24;\\n\\nimport \\\"./UtilityLibrary.sol\\\";\\nimport \\\"./VotreXTxInterface.sol\\\";\\n\\ncontract VotreXSystemA1{\\n\\n    using UtilityLibrary for *;\\n\\n    constructor(address _TXInterfaceAddress){\\n        VotreXOwnerAddress = msg.sender;\\n        VotreXActivated = false;\\n        TxInterface = VotreXTXInterface(_TXInterfaceAddress);\\n    }\\n\\n    VotreXTXInterface internal immutable TxInterface;\\n    bool private VotreXActivated;\\n    address private previousVotreXOwnerAddress;\\n    address private VotreXOwnerAddress;\\n    bytes32 public VotreXOwnerName = keccak256(abi.encodePacked(\\\"ATom\\\"));\\n    uint256 private organizationsCounter;\\n    uint256 private VotreXUserCounter;\\n    uint256 private OrganizationPriceFee = 20 ether;\\n    \\n    mapping(string  => Organization) public organizationData;\\n    mapping(address => ElectionAdmins) public admin;\\n    mapping(address => Voter) public voters;\\n    mapping(bytes32 => ElectionDetail) public electionInfo;\\n    mapping(string  => ElectionResult) public electionResults;\\n    mapping(bytes32 => bool) private electionExistanceChecks;\\n    mapping(bytes16 => bool) private votersIDExists;\\n    mapping(address => bool) private registeredAdmin;\\n\\n    enum ElectionStatus {\\n        Preparation,\\n        Scheduled,\\n        Started,\\n        Finished\\n    }\\n\\n    enum OrganizationType {\\n        Organization,\\n        Corporate\\n    }\\n\\n    struct Organization {\\n        OrganizationType orgType;\\n        address electionAdminAddresses;\\n        uint256 onPreparationElectionCounter;\\n        uint256 activeElectionCounter;\\n        uint256 archivedElectionCounter;\\n        uint256 totalMembers;\\n        bytes32 orgName;\\n        string orgID;\\n        bytes32[] electionIDs;\\n        bytes32[] ElectionName;\\n        ElectionStatus[] electionStatus;\\n    }\\n\\n    struct ElectionAdmins {\\n        bool isRegistered;\\n        uint8 adminOrgCount;\\n        bytes10 AdminVoterIDOrg1;\\n        bytes10 AdminVoterIDOrg2;\\n        address electionAdminAddress;\\n        uint256 nextOrgCreationBlock;\\n        bytes32 adminName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n    }\\n\\n    struct ElectionResult {\\n        bool isPruned;\\n        address adminAddress;\\n        uint startTime;\\n        uint endTime;\\n        uint totalVoter;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        bytes32 digitalSignature;\\n        string registeredOrganization;\\n        string electionWinner;\\n        string signedBy;\\n        CandidateDetail[] candidates;\\n    }\\n    \\n    struct Voter{\\n        bool isRegistered;\\n        address VoterAddress;\\n        bytes16 VoterIDOrg1;\\n        bytes16 VoterIDOrg2;\\n        string VoterName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n        string[] participatedElectionEvents;\\n    }\\n\\n    struct ElectionDetail{\\n        ElectionStatus status;\\n        uint8 candidateList;\\n        bool isFinished;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        uint startTime;\\n        uint endTime;\\n        string orgID;\\n        uint256 totalParticipants;\\n        CandidateDetail[] candidates;\\n    }\\n\\n    struct CandidateDetail{\\n        uint8 candidateID;\\n        uint256 candidateVoteCount;\\n        string candidateName;\\n    }\\n\\n    modifier onlyOrgAdmin(string memory _IDParameters) {\\n        bool isAdminRegisteredForOrg = false;\\n        if (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n            ||\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n        ) {\\n            isAdminRegisteredForOrg = true;\\n        } else if (\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n            ||\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n        ) {\\n            string memory orgID = UtilityLibrary.extractOrgId(_IDParameters);\\n            isAdminRegisteredForOrg = true;\\n\\n        }\\n\\n        require(\\n            isAdminRegisteredForOrg,\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedMember(string memory _userElectionID) {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        bool isAdminRegisteredForOrg = (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        bool isVoterRegisteredForOrg = (\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        require(\\n            isAdminRegisteredForOrg || isVoterRegisteredForOrg,\\n            // error 31a = Incorrect access control\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canCreateOrg() {\\n        require(\\n            block.number >= admin[msg.sender].nextOrgCreationBlock,\\n            // error 32 = error Block await for 2nd Admin Org Registration\\n            \\\"error:32\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVotreXOwner() {\\n        require(\\n            msg.sender == VotreXOwnerAddress,\\n            // error 31b = errror Owner access\\n            \\\"error:31b\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhenActivated() {\\n        require(\\n            VotreXActivated == true,\\n            // error 33 = error system still disabled\\n            \\\"error:33\\\"\\n        );\\n        _;\\n    }\\n\\n    function buyContract(string memory _YourName) public payable {\\n        require(VotreXActivated == false);\\n        // error 34 = error wrong ether value being sent\\n        require(msg.value == 12 ether, \\\"error:34\\\");\\n\\n        previousVotreXOwnerAddress = VotreXOwnerAddress;\\n        VotreXOwnerAddress = address(0);\\n        VotreXOwnerName = keccak256(abi.encodePacked(_YourName));\\n\\n        payable(previousVotreXOwnerAddress).transfer(msg.value);\\n\\n        previousVotreXOwnerAddress = address(0);\\n        VotreXOwnerAddress = msg.sender;\\n    }\\n\\n    function CheckTokenBalance () external view onlyVotreXOwner returns (uint256) {\\n        return TxInterface.checkBalance(address(this));\\n    }\\n\\n    function CheckTokenETHBalance () external view onlyVotreXOwner returns (uint256) {\\n        return (address(this).balance);\\n    }\\n\\n    function changeSystemState() external onlyVotreXOwner{\\n        if (VotreXActivated == false) {\\n            VotreXActivated = true;\\n        } else if (VotreXActivated == true) {\\n            VotreXActivated = false;\\n        }\\n    }\\n\\n    function setOrgPriceFee(uint256 _PriceinEther) external onlyVotreXOwner {\\n        OrganizationPriceFee = _PriceinEther * 1 ether;\\n    }\\n\\n    receive() external payable {\\n\\n    }\\n\\n    function registerOrganization(\\n        string memory _orgName,\\n        string memory _orgID,\\n        string memory _adminName,\\n        OrganizationType _orgType\\n    )\\n        external\\n        payable\\n        canCreateOrg\\n        onlyWhenActivated\\n    {\\n        uint8 VXTAmount = 5;\\n        ElectionAdmins storage AdminInfo = admin[msg.sender];\\n\\n        require(\\n            msg.value == OrganizationPriceFee,\\n            // error 34 = error wrong ether value being sent\\n            \\\"error:34\\\"\\n        );\\n\\n        require(\\n            organizationsCounter < 32000,\\n            // error 35 = error limit reached\\n            \\\"error:35\\\"\\n        );\\n\\n        require(\\n            bytes32(organizationData[_orgID].orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].electionAdminAddresses == address(0),\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            UtilityLibrary.onlyAlphanumericCharacters(_orgID),\\n            // error36b = Only Alpha Numeric character allowed\\n            \\\"error:36b\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length < 32,\\n            // error 36c = error character length limit\\n\\n            \\\"error:36c\\\"\\n        );\\n\\n        require(\\n            bytes(_adminName).length > 1\\n        );\\n\\n        require(\\n            bytes(_orgID).length == 3 || bytes(_orgID).length == 4,\\n            \\\"Org ID should 3 or 4 characters\\\"\\n        );\\n\\n        require(\\n            !UtilityLibrary.containsWhitespaceCheck(_orgID),\\n            \\\"spaces in Org ID not allowed\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID)),\\n            \\\"Admin is registered\\\"\\n        );\\n\\n        Organization storage newOrg = organizationData[_orgID];\\n        newOrg.orgID = _orgID;\\n        newOrg.orgName = bytes32(abi.encodePacked(_orgName));\\n        newOrg.orgType = _orgType;\\n        newOrg.electionAdminAddresses = msg.sender;\\n        newOrg.activeElectionCounter = 0;\\n        newOrg.totalMembers = 1;\\n\\n        bytes10 UniqueAdminvoterID = bytes10(abi.encodePacked(_orgID, \\\"-\\\", \\\"Admin\\\"));\\n\\n        if (bytes(admin[msg.sender].RegisteredOrgID1).length == 0) {\\n            admin[msg.sender].RegisteredOrgID1 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg1 = UniqueAdminvoterID;\\n        } else if (bytes(admin[msg.sender].RegisteredOrgID2).length == 0) {\\n            admin[msg.sender].RegisteredOrgID2 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg2 = UniqueAdminvoterID;\\n        }\\n\\n        AdminInfo.electionAdminAddress = msg.sender;\\n        AdminInfo.adminName = bytes32(abi.encodePacked(_adminName));\\n        AdminInfo.isRegistered = true;\\n        ++AdminInfo.adminOrgCount;\\n\\n        registeredAdmin[msg.sender] = true;\\n        votersIDExists[UniqueAdminvoterID] = true;\\n\\n        AdminInfo.nextOrgCreationBlock = 50 + block.number;\\n\\n        ++organizationsCounter;\\n        ++VotreXUserCounter;\\n\\n        TxInterface.VotreXTx(msg.sender, VXTAmount);\\n    }\\n\\n    \\n\\n    function registerVoter(\\n        string memory _voterName,\\n        string memory _orgID,\\n        bytes32 uniqueVoterID\\n    )\\n        external\\n        payable\\n        onlyWhenActivated\\n    {\\n        require(\\n            msg.value == (OrganizationPriceFee/2)\\n        );\\n\\n        Voter storage voter = voters[msg.sender];\\n        uint8 VXTAmount = 5;\\n        // string memory uniqueVoterID = generateUniqueVoterID(_orgID);\\n        bytes16 VoterID16 = bytes16(abi.encodePacked(uniqueVoterID));\\n        // bytes32 orgIDs = keccak256(abi.encodePacked(_orgID));\\n\\n        require(\\n            organizationData[_orgID].totalMembers < 5000,\\n            \\\"Maximum member limit reached\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length > 1,\\n            \\\"Please fill Voter Name\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length < 24,\\n            \\\"Voter name limit is 24 characters\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            !registeredAdmin[msg.sender],\\n            \\\"Voter is registered in Org\\\"\\n        );\\n\\n        require(\\n            ElectionActiveCheck(_orgID) < 1,\\n            \\\"Election in progress!\\\"\\n        );\\n\\n        require(\\n            bytes16(uniqueVoterID).length > 0\\n        );\\n\\n        require(\\n            bytes(organizationData[_orgID].orgID).length != 0,\\n            \\\"Organization does not exist\\\"\\n        );\\n\\n        if (bytes(voter.RegisteredOrgID1).length == 0) {\\n            voter.RegisteredOrgID1 = _orgID;\\n            voter.VoterIDOrg1 = VoterID16;\\n        } else if (bytes(voter.RegisteredOrgID2).length == 0) {\\n            voter.RegisteredOrgID2 = _orgID;\\n            voter.VoterIDOrg2 = VoterID16;\\n        }\\n\\n        voter.VoterAddress = msg.sender;\\n        voter.VoterName = _voterName;\\n        voter.participatedElectionEvents = new string[](0);\\n        voter.isRegistered = true;\\n        votersIDExists[VoterID16] = true;\\n        ++VotreXUserCounter;\\n        ++organizationData[_orgID].totalMembers;\\n\\n        TxInterface.VotreXTx(msg.sender, VXTAmount);\\n    }\\n\\n    function createElection(\\n        string memory _orgID,\\n        string memory _userElectionID,\\n        string memory _electionName,\\n        uint8 _candidateCount\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyOrgAdmin(_orgID)\\n    {\\n        require(\\n            bytes(organizationData[_orgID].orgID).length > 0\\n        );\\n\\n        require(\\n            bytes(_userElectionID).length > 1,\\n            // error 36a = error incorrect null value\\n            \\\"error 36a\\\"\\n        \\n        );\\n\\n        require(\\n            bytes(_userElectionID).length < 5,\\n            \\\"ID should < 5 characters\\\"\\n        );\\n\\n        require(\\n            bytes(_electionName).length > 1\\n        );\\n\\n        require(\\n            bytes(_electionName).length < 25,\\n            \\\"Election name should < 25\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].activeElectionCounter < 10,\\n            \\\"Maximum events reached\\\"\\n        );\\n\\n        require(_candidateCount > 1, \\\"Minimum 2 candidates!\\\");\\n\\n        bytes32 generatedElectionID = bytes32(abi.encodePacked(_orgID, \\\"-\\\", _userElectionID));\\n        ElectionDetail storage newElection = electionInfo[generatedElectionID];\\n\\n        require(\\n            !electionExistanceChecks[generatedElectionID],\\n            \\\"Election ID exists\\\"\\n        );\\n\\n        newElection.orgID = _orgID;\\n        newElection.electionID = generatedElectionID;\\n        newElection.electionName = bytes32(abi.encodePacked(_electionName));\\n        newElection.candidateList = _candidateCount;\\n        newElection.status = ElectionStatus.Preparation;\\n        electionExistanceChecks[generatedElectionID] = true;\\n        organizationData[_orgID].electionIDs.push(generatedElectionID);\\n        organizationData[_orgID].ElectionName.push(bytes32(abi.encodePacked(_electionName)));\\n        organizationData[_orgID].electionStatus.push(ElectionStatus.Preparation);\\n        ++organizationData[_orgID].onPreparationElectionCounter;\\n    }\\n\\n    function startElection(string memory _userElectionID) external onlyOrgAdmin(_userElectionID){\\n        // error 36a = error incorrect null value\\n        require(bytes(_userElectionID).length > 0, \\\"error:36a\\\");\\n\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(bytes16(election.electionID).length > 0, \\\"Invalid election ID\\\");\\n        require(election.status == ElectionStatus.Preparation, \\\"Election is not in preparation\\\");\\n        require(election.candidateList == election.candidates.length, \\\"Candidate Not full\\\");\\n\\n        election.startTime = 5 + block.timestamp;\\n        election.status = ElectionStatus.Started;\\n        ++organizationData[orgIDs].activeElectionCounter;\\n        --organizationData[orgIDs].onPreparationElectionCounter;\\n        uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, userElectionID);\\n        require(index < organizationData[orgIDs].electionIDs.length, \\\"Election not found\\\");\\n        organizationData[orgIDs].electionStatus[index] = ElectionStatus.Started;\\n    }\\n\\n    function findElectionIndex(bytes32[] storage array, bytes32 electionID) internal view returns (uint256) {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == electionID) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Election ID not found\\\");\\n    }\\n\\n    function finishElection(string memory _userElectionID, bytes32 _dataHash)\\n        external\\n        onlyOrgAdmin(_userElectionID)\\n    {\\n        bytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage elections = electionInfo[packedElectionID];\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n        string memory adminName = getAdminName(msg.sender);\\n        string memory electionWinner = determineWinner(_userElectionID);\\n\\n        require(\\n            bytes(_userElectionID).length > 0,\\n            \\\"Invalid election ID\\\"\\n        );\\n\\n        require(\\n            bytes(_userElectionID).length > 0,\\n            \\\"Election ID can't be empty\\\"\\n        );\\n\\n        require(\\n            bytes32(electionInfo[packedElectionID].electionID).length > 0,\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            _dataHash.length > 0,\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(!elections.isFinished, \\\"Election finished\\\");\\n\\n        require(\\n            elections.status == ElectionStatus.Started,\\n            \\\"Election is not started\\\"\\n        );\\n\\n        require(\\n            elections.totalParticipants > calculateValidElection(_userElectionID),\\n            \\\"need 50% total member to finish\\\"\\n        );\\n\\n        elections.endTime = 5 + block.timestamp;\\n        elections.status = ElectionStatus.Finished;\\n        elections.isFinished = true;\\n\\n        ElectionResult storage newelectionResult = electionResults[_userElectionID];\\n        newelectionResult.isPruned = true;\\n        newelectionResult.totalVoter = elections.totalParticipants;\\n        newelectionResult.adminAddress = msg.sender;\\n        newelectionResult.startTime = elections.startTime;\\n        newelectionResult.endTime = elections.endTime;\\n        newelectionResult.digitalSignature = _dataHash;\\n        newelectionResult.registeredOrganization = elections.orgID;\\n        newelectionResult.electionID = packedElectionID;\\n        newelectionResult.electionName = elections.electionName;\\n        newelectionResult.electionWinner = electionWinner;\\n        newelectionResult.signedBy = adminName;\\n\\n        for (uint i = 0; i < elections.candidates.length; i++) {\\n            CandidateDetail memory candidate = elections.candidates[i];\\n            newelectionResult.candidates.push(\\n                CandidateDetail({\\n                    candidateID: candidate.candidateID,\\n                    candidateName: candidate.candidateName,\\n                    candidateVoteCount: candidate.candidateVoteCount\\n                })\\n            );\\n        }\\n\\n        delete electionInfo[packedElectionID];\\n        uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, packedElectionID);\\n        organizationData[orgIDs].electionStatus[index] = ElectionStatus.Finished;\\n        ++organizationData[orgIDs].archivedElectionCounter;\\n        --organizationData[orgIDs].activeElectionCounter;\\n    }\\n\\n\\n    function calculateValidElection(string memory _userElectionID)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n        Organization storage OrgData = organizationData[orgID];\\n        uint256 MIN_VOTES_PERCENTAGE = 1 + (OrgData.totalMembers / 2);\\n\\n        return MIN_VOTES_PERCENTAGE;\\n    }\\n\\n    function getOwnerAddress() external view returns (address) {\\n        return VotreXOwnerAddress;\\n    }\\n\\n    function getOwnerName() external view returns (bytes32) {\\n        return VotreXOwnerName;\\n    }\\n\\n    function getTotalUser() external view returns (uint256) {\\n        return VotreXUserCounter;\\n    }\\n\\n    function getElectionListInOrg(string memory orgID)\\n        public\\n        view\\n        returns (bytes32[] memory, bytes32[] memory, ElectionStatus[] memory)\\n    {\\n        Organization storage org = organizationData[orgID];\\n        return (org.electionIDs, org.ElectionName, org.electionStatus);\\n    }\\n\\n    function getAdminName(address adminAddress) private view returns (string memory) {\\n        return string(abi.encodePacked(admin[adminAddress].adminName));\\n    }\\n\\n    function addCandidateDetail(\\n        string memory _userElectionID,\\n        string memory _candidateName\\n    )\\n        external\\n        onlyOrgAdmin(_userElectionID)\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n\\n        require(bytes(_userElectionID).length > 0);\\n\\n        require(\\n            bytes32(electionInfo[userElectionID].electionID).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            election.candidates.length < election.candidateList,\\n            \\\"Candidate limit reached\\\"\\n        );\\n\\n        require(bytes(_candidateName).length > 0);\\n\\n        require(\\n            bytes(_candidateName).length <= 24,\\n            \\\"name limits 24 characters\\\"\\n        );\\n\\n        require(\\n            UtilityLibrary.onlyAlphanumericCharacters(_candidateName),\\n            \\\"Candidate name can only contain alphabetical\\\"\\n        );\\n\\n        uint8 candidateID = uint8(election.candidates.length);\\n\\n        election.candidates.push(\\n            CandidateDetail({\\n                candidateID: candidateID,\\n                candidateName: _candidateName,\\n                candidateVoteCount: 0\\n            })\\n        );\\n    }\\n\\n    function vote(\\n        string memory _userElectionID,\\n        uint8 candidateID,\\n        uint256 VotesAmount\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyAuthorizedMember(_userElectionID)\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        Voter storage voter = voters[msg.sender];\\n        bytes32 electionName = election.electionName;\\n        require(VotesAmount <= 5);\\n        require(bytes(_userElectionID).length > 0, \\\"Election ID can't be empty\\\");\\n        require(candidateID < election.candidates.length, \\\"Invalid candidate ID\\\");\\n        require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\n        require(!hasParticipatedInElection(msg.sender, electionName), \\\"You already voted in this election\\\");\\n\\n        election.candidates[candidateID].candidateVoteCount += VotesAmount;\\n        voter.participatedElectionEvents = UtilityLibrary.appendToStringArray(\\n            voter.participatedElectionEvents,\\n            string(abi.encodePacked(election.electionName))\\n        );\\n        ++election.totalParticipants;\\n        TxInterface.VoteTx(msg.sender, VotesAmount);\\n    }\\n\\n\\n    function withdrawFees() external onlyVotreXOwner{\\n        require(address(this).balance > 0, \\\"No FLR Balance in Contract\\\");\\n        payable(VotreXOwnerAddress).transfer(address(this).balance);\\n    }\\n\\n    function isVotreXActivated() external onlyVotreXOwner view returns (bool) {\\n        return VotreXActivated;\\n    }\\n\\n    function getRegistrationFee() external view returns (uint256){\\n        return OrganizationPriceFee;\\n    }\\n\\n    function getTotalOrganization() external virtual view returns (uint256) {\\n        return organizationsCounter;\\n    }\\n\\n    // function getCandidateDetail(\\n    //     string memory _userElectionID,\\n    //     string memory _candidateName\\n    // )\\n    //     external\\n    //     view\\n    //     returns(\\n    //         string memory candidateName,\\n    //         uint8 candidateID,\\n    //         uint256 voteCount\\n    //     )\\n    // {\\n    //     require(\\n    //         bytes(_userElectionID).length > 0,\\n    //         \\\"Election ID can't be empty\\\"\\n    //     );\\n\\n    //     bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n    //     ElectionDetail storage election = electionInfo[userElectionID];\\n\\n    //     for (uint32 i = 0; i < election.candidates.length; ++i) {\\n    //         if (\\n    //             keccak256(abi.encodePacked(election.candidates[i].candidateName))\\n    //             ==\\n    //             keccak256(abi.encodePacked(_candidateName))\\n    //         ) {\\n    //             return (\\n    //                 election.candidates[i].candidateName,\\n    //                 election.candidates[i].candidateID,\\n    //                 election.candidates[i].candidateVoteCount\\n    //             );\\n    //         }\\n    //     }\\n\\n    //     return ('', 0, 0);\\n\\n    // }\\n\\n    function getelectionInfo(string memory _userElectionID)\\n        external\\n        view\\n        returns(\\n            bytes32 electionID,\\n            string memory electionName,\\n            uint256 totalCandidates,\\n            uint8[] memory candidateIDs, // Added\\n            string[] memory candidateNames,\\n            uint256[] memory voteCounts,\\n            uint256 totalParticipants,\\n            ElectionStatus statusElection\\n        )\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(\\n            bytes32(election.electionID).length > 0\\n        );\\n\\n        electionID = election.electionID;\\n        electionName = string(abi.encodePacked(election.electionName));\\n        totalCandidates = election.candidates.length;\\n        candidateIDs = new uint8[](totalCandidates); // Initialized\\n        candidateNames = new string[](totalCandidates);\\n        voteCounts = new uint256[](totalCandidates);\\n        statusElection = electionInfo[userElectionID].status;\\n        totalParticipants = election.totalParticipants;\\n\\n        for (uint256 i = 0; i < totalCandidates; ++i) {\\n            candidateIDs[i] = election.candidates[i].candidateID; // Added\\n            candidateNames[i] = election.candidates[i].candidateName;\\n            voteCounts[i] = election.candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            electionID,\\n            electionName,\\n            totalCandidates,\\n            candidateIDs,\\n            candidateNames,\\n            voteCounts,\\n            totalParticipants,\\n            statusElection\\n        );\\n    }\\n\\n    function getCandidateResult(string memory _electionID) \\n        public \\n        view \\n        returns (\\n            uint8[] memory candidateID,\\n            string[] memory candidateName,\\n            uint256[] memory candidateVoteCount\\n        ) \\n    {\\n\\n        uint totalCandidates = electionResults[_electionID].candidates.length;\\n\\n        uint8[] memory candidateIDs = new uint8[](totalCandidates);\\n        string[] memory candidateNames = new string[](totalCandidates);\\n        uint256[] memory candidateVoteCounts = new uint256[](totalCandidates);\\n\\n        for (uint i = 0; i < totalCandidates; i++) {\\n            candidateIDs[i] = electionResults[_electionID].candidates[i].candidateID;\\n            candidateNames[i] = electionResults[_electionID].candidates[i].candidateName;\\n            candidateVoteCounts[i] = electionResults[_electionID].candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            candidateIDs,\\n            candidateNames,\\n            candidateVoteCounts\\n        );\\n    }\\n\\n    function getUserInfo() external view returns (\\n        bool isRegistered,\\n        bool isAdmin,\\n        address userAddress,\\n        string memory userName,\\n        string[] memory registeredOrgList,\\n        string[] memory voterIDList,\\n        string[] memory participatedElectionEvents\\n    ) {\\n        userAddress = msg.sender;\\n\\n        if (admin[userAddress].isRegistered) {\\n            ElectionAdmins storage adminInfo = admin[userAddress];\\n            \\n            string[] memory VoterRegisteredOrgList = new string[](2);\\n            VoterRegisteredOrgList[0] = adminInfo.RegisteredOrgID1;\\n            VoterRegisteredOrgList[1] = adminInfo.RegisteredOrgID2;\\n\\n            string[] memory VoterIDList = new string[](2);\\n            VoterIDList[0] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg1));\\n            VoterIDList[1] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg2));\\n\\n            return (\\n                true,\\n                true,\\n                userAddress,\\n                string(abi.encodePacked(adminInfo.adminName)),\\n                VoterRegisteredOrgList,\\n                VoterIDList,\\n                new string[](0)\\n            );\\n\\n        } else if (voters[userAddress].isRegistered) {\\n            Voter storage voter = voters[userAddress];\\n\\n            string[] memory RegisteredOrgIDList = new string[](2);\\n            RegisteredOrgIDList[0] = voter.RegisteredOrgID1;\\n            RegisteredOrgIDList[1] = voter.RegisteredOrgID2;\\n\\n            string[] memory RegisteredVoterIDList = new string[](2);\\n            RegisteredVoterIDList[0] = string(abi.encodePacked(voter.VoterIDOrg1));\\n            RegisteredVoterIDList[1] = string(abi.encodePacked(voter.VoterIDOrg2));\\n            return (\\n                true,\\n                false,\\n                userAddress,\\n                voter.VoterName,\\n                RegisteredOrgIDList,\\n                RegisteredVoterIDList,\\n                voter.participatedElectionEvents\\n            );\\n        } else {\\n            return (\\n                false,\\n                false,\\n                userAddress,\\n                \\\"\\\",\\n                new string[](0),\\n                new string[](0),\\n                new string[](0)\\n            );\\n        }\\n    }\\n\\n    function ElectionActiveCheck(string memory _orgID) private view returns (uint256) {\\n\\n        return organizationData[_orgID].activeElectionCounter;\\n    \\n    }\\n\\n    function hasParticipatedInElection(\\n        address voterAddress,\\n        bytes32 electionName\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        Voter storage voter = voters[voterAddress];\\n        for (uint i = 0; i < voter.participatedElectionEvents.length; ++i) {\\n            if (\\n                keccak256(abi.encodePacked(voter.participatedElectionEvents[i]))\\n                ==\\n                keccak256(abi.encodePacked(electionName))\\n            ) {\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n\\n    function determineWinner(string memory _userElectionID) private view returns (string memory) {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        string memory winner = \\\"\\\";\\n        uint256 maxVotes = 0;\\n        for (uint8 i = 0; i < election.candidates.length; ++i) {\\n            if (election.candidates[i].candidateVoteCount > maxVotes) {\\n                maxVotes = election.candidates[i].candidateVoteCount;\\n                winner = election.candidates[i].candidateName;\\n            }\\n        }\\n\\n        return winner;\\n    }\\n    \\n    // function generateUniqueVoterID(string memory _orgID) public view returns (string memory) {\\n    //     uint256 CurrentID = organizationData[_orgID].totalMembers;\\n    //     uint256 nextID = ++CurrentID;\\n\\n    //     return string(abi.encodePacked(_orgID, \\\"-\\\", UtilityLibrary.uint2str(nextID)));\\n    // }\\n\\n    function getOrgIDHash(string memory _orgID) external pure returns (bytes32) {\\n        bytes32 orgIDHash = keccak256(abi.encodePacked(_orgID));\\n\\n        return (orgIDHash);\\n    }\\n}\\n\",\"keccak256\":\"0x98a6e3b3b9044ef4ce78cd057577768721cda84ea3ca710ce511969d34b76c29\",\"license\":\"MIT\"},\"contracts/UtilityLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.7.0;\\n\\nlibrary UtilityLibrary{\\n\\n    function extractOrgId(string memory _userElectionID) internal pure returns (string memory) {\\n        string[] memory parts = UtilityLibrary.splitString(_userElectionID, \\\"-\\\");\\n        require(parts.length > 0, \\\"Invalid custom election ID format\\\");\\n\\n        return parts[0];\\n    }\\n\\n    function decodeBytes10(bytes10 data) internal pure returns (string memory) {\\n        string memory decodedString = new string(10);\\n        \\n        assembly {\\n            mstore(add(decodedString, 32), data)\\n        }\\n\\n        return decodedString;\\n    }\\n    \\n    function arrayContains(string[] storage array, string memory element) internal view returns (bool) {\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            if (keccak256(abi.encodePacked(array[i])) == keccak256(abi.encodePacked(element))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    function onlyAlphanumericCharacters(string memory _input) internal pure returns (bool) {\\n        bytes memory b = bytes(_input);\\n        for (uint i = 0; i < b.length; ++i) {\\n            if (!((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\n                (uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\n                (uint8(b[i]) >= 97 && uint8(b[i]) <= 122))) { // a-z\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function appendToStringArray(string[] memory array, string memory newValue) internal pure returns (string[] memory) {\\n        string[] memory newArray = new string[](array.length + 1);\\n        \\n        for (uint32 i = 0; i < array.length; ++i) {\\n            newArray[i] = array[i];\\n        }\\n        \\n        newArray[array.length] = newValue;\\n        \\n        return newArray;\\n    }\\n\\n    function containsWhitespaceCheck(string memory _str) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(_str);\\n\\n        for (uint256 i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == \\\" \\\") {\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n\\n\\n    function uintToString(uint48 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint48 temp = value;\\n        uint48 length;\\n        while (temp != 0) {\\n            length++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(length);\\n        uint48 i = length - 1;\\n        while (value != 0) {\\n            buffer[i] = bytes1(uint8(48 + value % 10));\\n            value /= 10;\\n            i--;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\\n    }\\n\\n    function splitString(string memory str, string memory delimiter) internal pure returns (string[] memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory delimiterBytes = bytes(delimiter);\\n\\n        uint delimiterCount = 1;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                ++delimiterCount;\\n            }\\n        }\\n\\n        string[] memory parts = new string[](delimiterCount);\\n\\n        uint partStart = 0;\\n        uint partIndex = 0;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                parts[partIndex] = substring(str, partStart, i);\\n                partStart = i + 1;\\n                partIndex++;\\n            }\\n        }\\n\\n        // Add the last part\\n        parts[partIndex] = substring(str, partStart, strBytes.length);\\n\\n        return parts;\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        require(startIndex <= endIndex && endIndex <= strBytes.length, \\\"Invalid substring indices\\\");\\n\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; ++i) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n\\n        return string(result);\\n    }\\n\\n    function extractOrgIdFromElectionId(string memory _userElectionID) internal pure returns (string memory) {\\n        bytes memory orgIdBytes = bytes(_userElectionID);\\n\\n        // Split the input string at the hyphen ('-')\\n        uint8 i = 0;\\n        while (i < orgIdBytes.length && orgIdBytes[i] != '-'){  // ASCII code for hyphen '-'\\n            ++i;\\n        }\\n\\n        // If a hyphen is found, extract the organization ID\\n        if (i < orgIdBytes.length) {\\n            bytes memory extractedBytes = new bytes(i);\\n            for (uint8 j = 0; j < i; ++j) {\\n                extractedBytes[j] = orgIdBytes[j];\\n            }\\n            return string(extractedBytes);\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(bytes(_a), bytes(_b)));\\n    }\\n\\n\\n}\",\"keccak256\":\"0x321c4cbf8c342d303da34dc0dbe052786dcabd832cc4ba1c5319d9e112785b07\",\"license\":\"MIT\"},\"contracts/VotreXToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\ncontract VotreXTokenT2 is ERC20, ERC20Burnable, ERC20Pausable, ERC20Permit {\\n\\tconstructor(\\n\\t\\tuint256 _initialMintedToken,\\n\\t\\tuint256 _MaxSupplies\\n\\t)\\n\\tERC20(\\\"VotreXTokenT2\\\", \\\"VOXT2\\\") ERC20Permit(\\\"VotreXToken\\\") {\\n\\t\\tOwner = msg.sender;\\n\\t\\tMAXSupply = _MaxSupplies * 10 ** decimals();\\n\\t\\t_mint(address(this), _initialMintedToken * 10 ** decimals());\\n\\t\\tactiveSystem = true;\\n\\t\\tcurrentMintAmount =\\n\\t\\t\\t(_MaxSupplies - _initialMintedToken) *\\n\\t\\t\\t10 ** decimals();\\n\\t}\\n\\n\\taddress private Owner;\\n\\tbool private activeSystem;\\n\\tuint256 public immutable MAXSupply;\\n\\tuint256 private currentMintAmount;\\n\\n\\tmapping(address Owner => IContract) public ContractStorage;\\n\\n\\tstruct IContract {\\n\\t\\taddress Authorized;\\n\\t\\taddress stakingContract;\\n\\t\\taddress dexContract;\\n\\t\\taddress VotreXContract;\\n\\t\\taddress interfaceContract;\\n\\t}\\n\\n\\tmodifier onlyInterface() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == ContractStorage[Owner].interfaceContract,\\n\\t\\t\\t\\\"Caller is not an interface\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyExecutor() {\\n\\t\\trequire(msg.sender == ContractStorage[Owner].Authorized);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuthorized() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == ContractStorage[Owner].interfaceContract ||\\n\\t\\t\\t\\tmsg.sender == Owner,\\n\\t\\t\\t\\\"Token - Caller is not an Authorized\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == Owner, \\\"Token - Caller is not an Authorized\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyPaused() {\\n\\t\\trequire(activeSystem == false, \\\"System still active\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction customApprove(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) external onlyInterface {\\n\\t\\t_approve(owner, spender, amount);\\n\\t}\\n\\n\\tfunction pause() public onlyOwner {\\n\\t\\trequire(activeSystem == true, \\\"System is Paused\\\");\\n\\t\\t_pause();\\n\\t\\tactiveSystem = false;\\n\\t}\\n\\n\\tfunction Activate() public onlyOwner {\\n\\t\\trequire(activeSystem == false, \\\"System is Activated\\\");\\n\\t\\t_unpause();\\n\\t\\tactiveSystem = true;\\n\\t}\\n\\n\\tfunction setAutomationExecutor(\\n\\t\\taddress _executorAddress\\n\\t) external onlyOwner onlyPaused {\\n\\t\\trequire(_executorAddress != address(0), \\\"Invalid contract address\\\");\\n\\t\\trequire(\\n\\t\\t\\t_executorAddress != ContractStorage[msg.sender].Authorized,\\n\\t\\t\\t\\\"Already Registered Executor\\\"\\n\\t\\t);\\n\\t\\tContractStorage[msg.sender].Authorized = _executorAddress;\\n\\t}\\n\\n\\tfunction setStakingContract(\\n\\t\\taddress _stakingContractAddress\\n\\t) external onlyOwner onlyPaused {\\n\\t\\trequire(\\n\\t\\t\\t_stakingContractAddress != address(0),\\n\\t\\t\\t\\\"Invalid contract address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_stakingContractAddress !=\\n\\t\\t\\t\\tContractStorage[msg.sender].stakingContract,\\n\\t\\t\\t\\\"Already Registered Staking\\\"\\n\\t\\t);\\n\\t\\tContractStorage[msg.sender].stakingContract = _stakingContractAddress;\\n\\t}\\n\\n\\tfunction setDexContract(\\n\\t\\taddress _DEXContractAddress\\n\\t) external onlyOwner onlyPaused {\\n\\t\\trequire(_DEXContractAddress != address(0), \\\"Invalid contract address\\\");\\n\\t\\trequire(\\n\\t\\t\\t_DEXContractAddress != ContractStorage[msg.sender].dexContract,\\n\\t\\t\\t\\\"Already Registered DEX\\\"\\n\\t\\t);\\n\\t\\tContractStorage[msg.sender].dexContract = _DEXContractAddress;\\n\\t}\\n\\n\\tfunction setInterface(\\n\\t\\taddress _InterfaceContractAddress\\n\\t) external onlyOwner onlyPaused {\\n\\t\\trequire(\\n\\t\\t\\t_InterfaceContractAddress != address(0),\\n\\t\\t\\t\\\"Invalid contract address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_InterfaceContractAddress !=\\n\\t\\t\\t\\tContractStorage[msg.sender].interfaceContract,\\n\\t\\t\\t\\\"Already Registered Interface\\\"\\n\\t\\t);\\n\\t\\tContractStorage[msg.sender]\\n\\t\\t\\t.interfaceContract = _InterfaceContractAddress;\\n\\t}\\n\\n\\tfunction setVotreXContract(\\n\\t\\taddress _VotreXContractAddress\\n\\t) external onlyOwner onlyPaused {\\n\\t\\trequire(\\n\\t\\t\\t_VotreXContractAddress != address(0),\\n\\t\\t\\t\\\"Invalid contract address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_VotreXContractAddress !=\\n\\t\\t\\t\\tContractStorage[msg.sender].VotreXContract,\\n\\t\\t\\t\\\"Already Registered VotreX\\\"\\n\\t\\t);\\n\\t\\tContractStorage[msg.sender].VotreXContract = _VotreXContractAddress;\\n\\t}\\n\\n\\tfunction checkBlockTime() public view returns (uint256) {\\n\\t\\treturn block.timestamp;\\n\\t}\\n\\n\\tfunction calculateHalving() public view returns (uint256) {\\n\\t\\tuint256 nextMint = currentMintAmount / 2;\\n\\n\\t\\treturn nextMint;\\n\\t}\\n\\n\\tfunction autoMinting() public onlyExecutor {\\n\\t\\trequire(totalSupply() < MAXSupply, \\\"Max Supply Reached\\\");\\n\\n\\t\\tif (currentMintAmount == 0) {\\n\\t\\t\\tuint256 finalMintingValue = MAXSupply - totalSupply();\\n\\t\\t\\t_mint(address(this), finalMintingValue);\\n\\t\\t} else {\\n\\t\\t\\tuint256 mintingValue = calculateHalving();\\n\\t\\t\\t_mint(address(this), mintingValue);\\n\\t\\t\\tcurrentMintAmount = mintingValue;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction mint(address to, uint256 amount) public onlyAuthorized {\\n\\t\\tif (msg.sender == ContractStorage[Owner].interfaceContract) {\\n\\t\\t\\trequire(totalSupply() < MAXSupply);\\n\\t\\t\\t_mint(to, amount);\\n\\t\\t} else if (msg.sender == Owner) {\\n\\t\\t\\tuint256 mintingValue = amount * 10 ** decimals();\\n\\t\\t\\trequire(totalSupply() < MAXSupply);\\n\\t\\t\\trequire(amount < 4000000);\\n\\t\\t\\t_mint(to, mintingValue);\\n\\t\\t\\tcurrentMintAmount = currentMintAmount / 2;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction burn(uint256 value) public override onlyOwner {\\n\\t\\tuint256 burnedValue = value * 10 ** decimals();\\n\\t\\t_burn(address(this), burnedValue);\\n\\t}\\n\\n\\tfunction getCurrentMintAmount() external view returns (uint256) {\\n\\t\\treturn currentMintAmount;\\n\\t}\\n\\n\\tfunction getOwnerAddress() external view onlyOwner returns (address) {\\n\\t\\treturn (Owner);\\n\\t}\\n\\n\\tfunction _update(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) internal override(ERC20, ERC20Pausable) {\\n\\t\\tsuper._update(from, to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdfb07a326f8962993a1e2bb90fa7d6996d2460a2acd98a8b29f96ddb1456bc5f\",\"license\":\"MIT\"},\"contracts/VotreXTxInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"./VotreXToken.sol\\\";\\n\\ncontract VotreXTXInterface {\\n\\n    constructor(address _tokenAddress) {\\n        InterfaceMaster = msg.sender;\\n        interfaceActivated = false;\\n        vxtToken = VotreXTokenT2(_tokenAddress);\\n        ContractStorage[msg.sender].tokenContract = _tokenAddress;\\n    }\\n\\n    // gas: 646200;\\n\\n    VotreXTokenT2 internal immutable vxtToken;\\n    bool private interfaceActivated;\\n    address private VotreXContract;\\n    address private dexContract;\\n    address private airdropContract;\\n    address private stakingContract;\\n    address private immutable InterfaceMaster;\\n    uint256 internal immutable MaxAllowances = 15000000 * 10 ** 18;\\n\\n    mapping(address InterfaceMaster => IContract) public ContractStorage;\\n    // mapping(address => uint256) public allowances;\\n\\n    struct IContract{\\n        address Authorized;\\n        address tokenContract;\\n        address stakingContract;\\n        address dexContract;\\n        address VotreXContract;\\n        address airdropContract;\\n    }\\n\\n    modifier onlyActivated() {\\n        require(interfaceActivated == true, \\\"Interface not Active\\\");\\n        _;\\n    }\\n\\n    modifier onlyPaused() {\\n        require(interfaceActivated == false, \\\"Interface still Active\\\");\\n        _;\\n    }\\n\\n    modifier onlyStaking() {\\n        require(\\n            msg.sender == stakingContract,\\n            \\\"Interface - Caller is not a Stake Contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == InterfaceMaster, \\\"Interface - Caller is not Owner!\\\");\\n        _;\\n    }\\n\\n    modifier onlyDeX() {\\n        require(msg.sender == dexContract, \\\"Interface - Caller is not DexApps!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            msg.sender == InterfaceMaster ||\\n            msg.sender == dexContract ||\\n            msg.sender == stakingContract ||\\n            msg.sender == VotreXContract ||\\n            msg.sender == airdropContract,\\n            \\\"Interface - Caller is not an Authorized!\\\"\\n        );\\n        _;\\n    }\\n\\n    event BuyVXTEvent(address Buyer, uint256 VXTTransfered);\\n    event TransferedVXTEvent(address Receiver, uint256 VXTTransfered);\\n    event withdrawnToken(address from, address Receiver, uint256 VXTTransfered);\\n    event VotedEvent(address Voter, uint256 VotedPower);\\n    event TokenDropped(address Recipient, uint256 DroppedValue);\\n\\n    function changeSystemState() external onlyOwner{\\n\\n        if (interfaceActivated == false) {\\n            interfaceActivated = true;\\n        } else if (interfaceActivated == true) {\\n            interfaceActivated = false;\\n        }\\n\\n    }\\n\\n    function isActivatedInterfaceCheck() public view returns (bool isActivatedInterface) {\\n\\n        return interfaceActivated;\\n    }\\n\\n    function getTokenContract() external view onlyOwner returns(address){\\n        return ContractStorage[msg.sender].tokenContract;\\n    }\\n\\n    function setVotreXSys (address _VotreXContract) external onlyOwner onlyPaused{\\n        require(\\n            _VotreXContract != ContractStorage[msg.sender].VotreXContract,\\n            \\\"Interface - Registered VotreX\\\"\\n        );\\n\\n        require(\\n            _VotreXContract != address(0),\\n            \\\"Interface - Invalid contract address\\\"\\n        );\\n\\n        VotreXContract = _VotreXContract;\\n        ContractStorage[msg.sender].VotreXContract = _VotreXContract;\\n    }\\n\\n    function setStakingContract (address _stakingAddress) external onlyOwner onlyPaused{\\n        require(\\n            _stakingAddress != ContractStorage[msg.sender].stakingContract,\\n            \\\"Interface - Registered VotreX Staking\\\"\\n        );\\n\\n        require(\\n            _stakingAddress != address(0),\\n            \\\"Interface - Invalid contract address\\\"\\n        );\\n\\n        stakingContract = _stakingAddress;\\n        ContractStorage[msg.sender].stakingContract = _stakingAddress;\\n    }\\n\\n    function setDeX (address _dexContract) external onlyOwner onlyPaused{\\n        require(\\n            _dexContract != ContractStorage[msg.sender].dexContract,\\n            \\\"Interface - Registered VotreX DeX\\\"\\n        );\\n\\n        require(\\n            _dexContract != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n\\n        dexContract = _dexContract;\\n        ContractStorage[msg.sender].dexContract = _dexContract;\\n    }\\n\\n    function setAirdrop (address _AirdropContract) external onlyOwner onlyPaused{\\n        require(\\n            _AirdropContract != ContractStorage[msg.sender].airdropContract,\\n            \\\"Interface - Registered VotreX Airdrop\\\"\\n        );\\n\\n        require(\\n            _AirdropContract != address(0),\\n            \\\"Invalid contract address\\\"\\n        );\\n\\n        airdropContract = _AirdropContract;\\n        ContractStorage[msg.sender].airdropContract = _AirdropContract;\\n    }\\n\\n    function approveTxInterface(uint32 amount) external onlyOwner {\\n        uint256 TokenConversion = uint256(amount) * 10 ** vxtToken.decimals();\\n\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\n\\n        vxtToken.customApprove(address(vxtToken), address(this), TokenConversion);\\n    }\\n\\n    function approveVotreX(uint256 amount) external onlyAuthorized onlyActivated{\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\n\\n        require(ContractStorage[msg.sender].VotreXContract != address(0), \\\"Interface - VotreX Address not set\\\");\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\n\\n        vxtToken.customApprove(VotreXContract, address(this), TokenConversion);\\n    }\\n\\n    function approveAirdrop(uint256 amount) external onlyAuthorized onlyActivated{\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\n\\n        require(address(this) != address(0), \\\"Interface - Invalid address\\\");\\n        require(TokenConversion < MaxAllowances, \\\"Can not approve more than limit\\\");\\n\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\n    }\\n\\n    function approveStaking(uint256 amount) external onlyAuthorized onlyActivated{\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\n\\n        require(msg.sender != address(0), \\\"Interface - Staking Address not set\\\");\\n        require(amount < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\n\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\n    }\\n\\n    function approveDeX(uint256 amount) external virtual onlyAuthorized onlyActivated{\\n        uint256 TokenConversion = amount * 10 ** vxtToken.decimals();\\n\\n        require(msg.sender != address(0), \\\"Interface - DeX Address not set\\\");\\n        require(TokenConversion < MaxAllowances, \\\"Interface - Can not approve more than limit\\\");\\n\\n        vxtToken.customApprove(msg.sender, address(this), TokenConversion);\\n    }\\n\\n    function checkApprovalLimit(address _ContractAddress) external view returns (uint256){\\n        if(_ContractAddress == ContractStorage[msg.sender].VotreXContract){\\n            return (\\n                vxtToken.allowance(\\n                    ContractStorage[msg.sender].VotreXContract, address(this)\\n                )\\n            );\\n        }\\n        else if(_ContractAddress == ContractStorage[msg.sender].dexContract){\\n            return (\\n                vxtToken.allowance(\\n                    ContractStorage[msg.sender].dexContract, address(this)\\n                )\\n            );\\n        }\\n        else if(_ContractAddress == ContractStorage[msg.sender].stakingContract){\\n            return (\\n                vxtToken.allowance(\\n                    ContractStorage[msg.sender].stakingContract, address(this)\\n                )\\n            );\\n        }\\n        else if(_ContractAddress == ContractStorage[msg.sender].airdropContract){\\n            return (\\n                vxtToken.allowance(\\n                    ContractStorage[msg.sender].airdropContract, address(this)\\n                )\\n            );\\n        }\\n        else {\\n            return (404);\\n        }\\n    }\\n\\n    function checkBalance(address account) external view virtual onlyActivated returns (uint256) {\\n        return vxtToken.balanceOf(account);\\n    }\\n\\n    function balanceTx(address _Recipient, uint256 _value) external onlyOwner{\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\n\\n        if (\\n            _Recipient == ContractStorage[msg.sender].VotreXContract\\n        ) {\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\n            )\\n            {\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\n            } else {\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\n\\n                vxtToken.transferFrom(address(vxtToken), VotreXContract, vxtNominalTransfer);\\n            }\\n        } else if (\\n            _Recipient == ContractStorage[msg.sender].dexContract\\n        ) {\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\n            )\\n            {\\n                vxtToken.transferFrom(address(vxtToken),dexContract, vxtNominalTransfer);\\n            }\\n            else {\\n                vxtToken.customApprove(msg.sender, _Recipient, vxtNominalTransfer);\\n                vxtToken.customApprove(msg.sender, address(this), vxtNominalTransfer);\\n\\n                vxtToken.transferFrom(address(vxtToken), dexContract, vxtNominalTransfer);\\n            }\\n        } else if (_Recipient == InterfaceMaster) {\\n            require(_value < 4000000, \\\"Interface - Transfer limit Reached\\\");\\n            require(msg.sender == InterfaceMaster, \\\"Interface - Not Authorized\\\");\\n\\n            // Case for Interface Master\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n            ){\\n                vxtToken.transferFrom(address(vxtToken), address(InterfaceMaster), vxtNominalTransfer);\\n            } else {\\n                vxtToken.customApprove(address(vxtToken), address(this), vxtNominalTransfer);\\n                vxtToken.customApprove(address(vxtToken), InterfaceMaster, vxtNominalTransfer);\\n\\n                vxtToken.transferFrom(address(vxtToken), msg.sender, vxtNominalTransfer);\\n\\n                emit TransferedVXTEvent(msg.sender, vxtNominalTransfer);\\n            }\\n        }else if (\\n            _Recipient != InterfaceMaster||\\n            _Recipient != ContractStorage[msg.sender].dexContract ||\\n            _Recipient != ContractStorage[msg.sender].VotreXContract\\n        ){\\n            revert();\\n        }\\n    }\\n\\n    function TokenWithdraw(uint256 _value)external onlyOwner{\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\n        if (\\n                vxtToken.allowance(VotreXContract, address(this)) >= MaxAllowances\\n                &&\\n                vxtToken.allowance(VotreXContract, address(this)) >= vxtNominalTransfer\\n            )\\n            {\\n                vxtToken.transferFrom(VotreXContract, msg.sender, vxtNominalTransfer);\\n            } else {\\n                vxtToken.customApprove(VotreXContract, address(this), vxtNominalTransfer);\\n\\n                vxtToken.transferFrom(VotreXContract,msg.sender, vxtNominalTransfer);\\n        }\\n    }\\n\\n    function VotreXTx(\\n        address _Recipient,\\n        uint256 _value\\n    )\\n        external\\n        onlyAuthorized\\n        onlyActivated\\n    {\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\n\\n        if (msg.sender == VotreXContract) {\\n            // Case for VotreX\\n            if (\\n                vxtToken.allowance(VotreXContract, address(this)) >= vxtNominalTransfer\\n                &&\\n                vxtToken.allowance(VotreXContract, address(this)) >= MaxAllowances\\n            )\\n            {\\n                vxtToken.transferFrom(VotreXContract, _Recipient, vxtNominalTransfer);\\n            } else if (\\n                vxtToken.allowance(VotreXContract, address(this)) <= vxtNominalTransfer\\n                &&\\n                vxtToken.allowance(VotreXContract, address(this)) <= MaxAllowances\\n            ){\\n                vxtToken.customApprove(VotreXContract, _Recipient, vxtNominalTransfer);\\n                vxtToken.customApprove(VotreXContract, address(this), vxtNominalTransfer);\\n                vxtToken.customApprove(_Recipient, address(this), vxtNominalTransfer);\\n\\n                vxtToken.transferFrom(VotreXContract, _Recipient, vxtNominalTransfer);\\n\\n                emit TransferedVXTEvent(VotreXContract, vxtNominalTransfer);\\n            }\\n        } else if (msg.sender == dexContract) {\\n            // Case for DeX\\n            if (\\n                vxtToken.allowance(address(dexContract), address(this)) >= _value\\n                &&\\n                vxtToken.allowance(address(dexContract), address(this)) >= MaxAllowances\\n            )\\n            {\\n                vxtToken.transferFrom(address(dexContract), _Recipient, _value);\\n            }\\n            else {\\n                vxtToken.customApprove(address(dexContract), _Recipient, _value);\\n                vxtToken.customApprove(address(dexContract), address(this), _value);\\n\\n                vxtToken.transferFrom(address(dexContract), _Recipient, _value);\\n\\n                emit BuyVXTEvent(address(dexContract), _value);\\n            }\\n        } else if (msg.sender == stakingContract) {\\n            // Case for Staking Contract\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n            ){\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value); \\n            }\\n            else {\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\n\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\n\\n                emit withdrawnToken(msg.sender, _Recipient, _value);\\n            }\\n        } else if (msg.sender == airdropContract) {\\n            // Case for Airdrop\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\n            ){\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\n            }\\n            else {\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\n\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\n\\n                emit TokenDropped(_Recipient, _value);\\n            }\\n        }\\n    }\\n\\n    function VoteTx(address _Sender, uint256 _value) external onlyAuthorized onlyActivated{\\n        require (msg.sender == VotreXContract, \\\"Interface - Not VotreX\\\");\\n\\n        uint256 vxtNominalTransfer = _value * 10 ** vxtToken.decimals();\\n\\n        if (\\n            vxtToken.allowance(msg.sender, address(this)) >= vxtNominalTransfer\\n            &&\\n            vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n        ) {\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\n        } else {\\n            vxtToken.customApprove(_Sender, address(this), vxtNominalTransfer);\\n\\n            vxtToken.transferFrom(_Sender, msg.sender, vxtNominalTransfer);\\n\\n            emit VotedEvent(msg.sender, vxtNominalTransfer);\\n        }\\n    }\\n\\n    function printVXT(address _recipient, uint256 _rewardValue) external onlyAuthorized onlyActivated{\\n        vxtToken.mint(_recipient, _rewardValue);\\n    }\\n\\n    function totalSupplies() external view returns(uint256) {\\n        return vxtToken.totalSupply();\\n    }\\n\\n    function Stake(\\n        bool isStaking,\\n        address _Recipient,\\n        uint256 _value\\n    )\\n        external\\n        onlyAuthorized\\n        onlyActivated\\n    {\\n        if (\\n            msg.sender == stakingContract\\n            &&\\n            isStaking == true\\n        ) {\\n            // Case for Staking\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\n                &&\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n                &&\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\n                )\\n            {\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\n            } else {\\n                // Case 4: Approve and transfer\\n                vxtToken.customApprove(_Recipient, address(this), _value);\\n                vxtToken.customApprove(msg.sender, address(this), _value);\\n                vxtToken.customApprove(_Recipient, msg.sender, _value);\\n\\n                vxtToken.transferFrom(_Recipient, msg.sender, _value);\\n            }\\n        } else if (\\n            msg.sender == stakingContract\\n            &&\\n            isStaking == false\\n        ) {\\n            // Case for unStaking & Reward Distribution\\n            if (\\n                vxtToken.allowance(msg.sender, address(this)) >= _value\\n                &&\\n                vxtToken.allowance(msg.sender, _Recipient) >= _value\\n                &&\\n                vxtToken.allowance(msg.sender, address(this)) >= MaxAllowances\\n                &&\\n                vxtToken.allowance(msg.sender, _Recipient) >= MaxAllowances\\n            )\\n            {\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\n            }\\n            else {\\n                vxtToken.customApprove(msg.sender, _Recipient, _value);\\n\\n                vxtToken.transferFrom(msg.sender, _Recipient, _value);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x26ceb96d98d7dda49d11f33c481402e22383cc47c9f92a0bfa19227816489ad3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a034620000f7576001600160401b0390601f620055c238819003918201601f191683019184831184841017620000e157808492602094604052833981010312620000f757516001600160a01b03811690819003620000f75760405160208101906341546f6d60e01b825260048152604081019381851090851117620000e15760408490525190206002556801158e460913d00000600555600180546001600160a01b031916331790556000805460ff191690556080526154c59081620000fd8239608051818181611de60152818161258e0152818161300d0152613d710152f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60009060e08235811c9182630946e807146142ef575081630c4f65bd146142c6578163145ef6e9146119f4578163158058f614613fa4578163162442e214613e405781631663d3df14613de25781631a80c09a14613d2c5781631df3739a14613cfb5781632c2032c0146134a15781633d2acf8314612d0e57816342b7fa1c14612cd7578163476343ee14612c375781635398690b14612b8d5781635d8d158514612b0657816363a846f814612a3a578163695c2d24146121245781636cbe478114611b355781637217fcfd14611b1757816381929bac14611a125781638783cc8a146119f45781638ad0e26e1461131a5781639b698d1b14610ab2578163a3ec138d146109e8578163a4224e201461084b578163a43064cc146107f3578163a9c63aa0146107d5578163b2054365146106dd57508063c10a7fdb146105e9578063f544bed8146101db5763f6246dcb0361000f57346101d85760203660031901126101d857600435906001600160401b0382116101d85760206101a436600485016143c1565b6040516101cd8382816101c0818301968781519384920161443f565b8101038084520182614385565b519020604051908152f35b80fd5b50346101d857602090816003193601126101d8576004356001600160401b0381116105e55761020e9036906004016143c1565b81903383526102bb6102b5600793848752600460408720019060405191826102398a82018093614640565b039261024d601f1994858101835282614385565b519020916040519289840187519461026f8c82818c01986101c081878c61443f565b51902014801561059e575b156104d257505061028b60016146e7565b6102978451151561471f565b6102b08760405180936101c0885180928585019061443f565b6146c4565b91614fdc565b8184526009855260408420805460ff811660048110156104be57610479578482015460ff8260081c160361043f57426005018060051161042b5790600291600384015560ff191617905561038760405192600283519488818187019761032281838b61443f565b81016006815203019020016103378154614b33565b905560016040518881865161034d81838b61443f565b81016006815203019020016103628154614fcf565b9055846040518881865161037781838b61443f565b8101600681520301902001615336565b926040518681845161039a81838961443f565b8101600681520301902001548310156103f1576103da93946009926103ca9260405193849283925192839161443f565b8101600681520301902001614ed7565b81549060031b9060ff6002831b921b191617905580f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260048101889052601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260048101889052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b87526021600452602487fd5b338852868952610503600460408a20016102b08b6104f7604051938492830190614640565b03848101835282614385565b61051d6040516102b08c828b516101c0818484018c61443f565b1490811591610548575b50610536575b61028b906146e7565b5061054084614fdc565b50600161052d565b61057c9150338952878a526102b0600560408b2001918b610570604051948592830190614640565b03908101835282614385565b6105966040516102b08b828a516101c0818484018b61443f565b141538610527565b50338852868952600560408920016040516105c0816104f78d82018095614640565b5190206040518a8101906105dc8c828b516101c081878c61443f565b5190201461027a565b5080fd5b5060203660031901126101d8576004356001600160401b0381116105e5576106159036906004016143c1565b815460ff81166106d95761063267a688906bd8b000003414614df6565b60018054610100600160a81b0319928316600882901b610100600160a81b0316178086556001600160a01b0319918216909255604051845191948693849384938493602080830193610690928491906101c09082908890860161443f565b5190206002558134156106d0575b349160081c6001600160a01b031690f1156106c55782541682553390600154161760015580f35b6040513d84823e3d90fd5b506108fc61069e565b8280fd5b9050346105e55760203660031901126105e5576004356001600160401b0381116106d95760206107146107279236906004016143c1565b816040519382858094519384920161443f565b810160068152030190209182549060ff8216926001850154946002810154600382015490600483015497610762600660058601549501614575565b96604051986101009760028210156107c15750895260081c6001600160a01b0316602089015260408801526060870152608086015260a085019590955260c0840194909452928201839052909182916107bd91830190614462565b0390f35b634e487b7160e01b81526021600452602490fd5b82346101d857806003193601126101d8576020600454604051908152f35b82346101d857806003193601126101d85761081960018060a01b03600154163314614a05565b805460ff8116158015610836575050805460ff1916600117815580f35b15600114610842575080f35b60ff1916815580f35b9050346105e557602091826003193601126101d8576004356001600160401b0381116105e55761088261089d9136906004016143c1565b6102b085604051836101c0829551809285808601910161443f565b918282526009845260408220906001938560018401549560028086015460405190848201528381526108ce8161434f565b6007870192888454946108e086614923565b9460096108ec8861498a565b986108f689614923565b9a855252600660ff604081952054169b01549b5b878110610983575050505050926109596107bd9796959361096793610946610975976040519e8f9e8f9061010092839183528201520190614462565b9160408d01528b820360608d0152614408565b9089820360808b0152614487565b9087820360a08901526144e4565b9360c0860152840190614518565b8084610990879386614757565b50541661099d828a6149f1565b526109b3836109ac8387614757565b5001614575565b6109bd828c6149f1565b526109c8818b6149f1565b50816109d48286614757565b5001546109e1828d6149f1565b520161090a565b9050346105e55760203660031901126105e5576001600160a01b0391600435838116908190036105e557816040916107bd935260086020522091610aa4835493610a96600182015493610a3d60028401614575565b90610a566004610a4f60038701614575565b9501614575565b95604051998960ff8c9b1615158b5260081c1660208a015260018060801b031990818160801b1660408b0152166060890152806080890152870190614462565b9085820360a0870152614462565b9083820360c0850152614462565b82346101d85760403660031901126101d8576004356001600160401b0381116105e557610ae39036906004016143c1565b9080338252600760205260046040832001604051610b1781610b09602082018095614640565b03601f198101835282614385565b5190206040516020810190610b3760208288516101c08187858d0161443f565b5190201480156112cc575b156112115750610b5260016146e7565b610b6f6040516102b060208286516101c081848401858b0161443f565b9081815260096020526040812090610b8684614fdc565b923382526007602052600360408320015460405190602082015260208152610bad8161434f565b610bcb6040516102b06020828a516101c0818d85808601910161443f565b8352600960205260408320604051610be28161436a565b848152600790910180549085805b8360ff8216106111c0575050505086511561118557610c1187511515614e3e565b828452600960205284549660ff8860101c1661114c57600460ff8916101561113857600260ff8916036110f95760068601546004610c56610c5184614fdc565b61461a565b015460011c600101908160011161042b5711156110b45742600501600511610f84576020610ca99162010003600489019a426005018c5562ff00ff1916178855816040519382858094519384920161443f565b8101600a81520301902096600160ff1989541617885560068601546003890155610cd33389614ac5565b600386015460018901555460028801556024356006880155610cfb6005860160078901614ef7565b826004880155600285015460058801558051906001600160401b0382116110a057610d3682610d2d60088b015461453b565b60088b016147a0565b602090601f831160011461103157610d669291869183611026575b50508160011b916000199060031b1c19161790565b60088701555b8051906001600160401b03821161101257610d9782610d8e60098a015461453b565b60098a016147a0565b602090601f8311600114610fa357610dc69291859183610f985750508160011b916000199060031b1c19161790565b60098601555b815b6007840154811015610e4d5780610e47610ded60019360078801614757565b50604051610dfa8161430b565b60ff825416815260ff610e1a600287850154946020850195865201614575565b918260408201525116915160405192610e328461430b565b835260208301526040820152600a89016147e5565b01610dce565b5083818352600960205260076040842084815560006001820155600060028201556000600382015560006004820155610e8860058201614aea565b600060068201550180549084815581610f44575b846002610f2a60208787610eda610ec660405193600784519587818188019861037781838c61443f565b6009604051868186516103ca81838b61443f565b81549060031b9060ff6003831b921b1916179055600360405184818451610f0281838961443f565b8101600681520301902001610f178154614b33565b905560405193849283925192839161443f565b8101600681520301902001610f3f8154614fcf565b905580f35b81600302916003830403610f8457845260208420908101905b81811015610e9c5780856003925560006001820155610f7e60028201614aea565b01610f5d565b634e487b7160e01b85526011600452602485fd5b015190508880610d51565b9190600988018552602085209085935b601f1984168510610ff7576001945083601f19811610610fde575b505050811b016009860155610dcc565b015160001960f88460031b161c19169055878080610fce565b81810151835560209485019460019093019290910190610fb3565b634e487b7160e01b84526041600452602484fd5b015190508980610d51565b9190600889018652602086209086935b601f1984168510611085576001945083601f1981161061106c575b505050811b016008870155610d6c565b015160001960f88460031b161c1916905588808061105c565b81810151835560209485019460019093019290910190611041565b634e487b7160e01b85526041600452602485fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b6111ca8184614757565b5082600180920154116111e7575b506111e290614e2d565b610bf0565b915093506111f58483614757565b5001546111e261120a60026109ac8786614757565b94906111d8565b3382526007602052611239610b096102b0600460408620016040519283916020830190614640565b6112566040516102b060208288516101c081848401858d0161443f565b1480159061127f575b61126d575b610b52906146e7565b5061127782614fdc565b506001611264565b5033825260076020526112a8610b096102b0600560408620016040519283916020830190614640565b6112c56040516102b060208288516101c081848401858d0161443f565b141561125f565b503382526007602052600560408320016040516112f181610b09602082018095614640565b519020604051602081019061131160208288516101c08187858d0161443f565b51902014610b42565b82346101d85760803660031901126101d8576004356001600160401b0381116105e55761134b9036906004016143c1565b6024356001600160401b0381116106d95761136a9036906004016143c1565b6044356001600160401b0381116118de576113899036906004016143c1565b9060ff60643516606435036119ef576113aa600160ff865416151514614a8e565b833385526007602052610b096113d0600460408820016040519283916020830190614640565b602081519101206040516113f160208288516101c081848401858d0161443f565b6020815191012014801561199f575b156118e2575061141060016146e7565b61143a6006604051602081875161142a8183858c0161443f565b810184815203019020015461453b565b156118de576001815111156118ad5760058151101561186d5781516001811115611869576019111561182857600a6002604051602081875161147f8183858c0161443f565b81016006815203019020015410156117ea57600160ff6064351611156117ad576114ee906102b06021604051809387516114c0816020850160208c0161443f565b8201602d60f81b60208201526114df825180936020878501910161443f565b01036001810184520182614385565b80845260096020526040842090600b60205260ff6040862054166117735783516001600160401b03811161175f576115368161152d600586015461453b565b600586016147a0565b6020601f82116001146116f65790806115649288916116eb575b508160011b916000199060031b1c19161790565b60058301555b8060018301556040519183519280602086019480602083019061158d918861443f565b8101038082526020016115a09082614385565b6115a9906146c4565b6002820155805461ffff191661ff0060643560081b16179055808552600b60209081526040808720805460ff1916600117905551855190918291906115f390829084908a0161443f565b8101600681520360200190206007019061160c91614ea2565b6040518351819061162181836020890161443f565b81016006815203602001902060080191604051918291519081602084016116479261443f565b81010380825260200161165a9082614385565b611663906146c4565b61166c91614ea2565b6040518151819061168181836020870161443f565b810160068152036020019020600901805490600160401b821015611012576001926116b683602093866116d696018155614ed7565b60ff82549160031b1b19169055816040519382858094519384920161443f565b8101600681520301902001610f3f8154614b33565b905086015188611550565b906005840187526020872087925b601f1983168410611747576001935082601f1981161061172e575b5050811b01600583015561156a565b87015160001960f88460031b161c19169055878061171f565b87810151825560209384019360019092019101611704565b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b8480fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b8380fd5b338552600760205261190a610b096102b0600460408920016040519283916020830190614640565b6119286040516102b060208289516101c0818c85808601910161443f565b14801590611951575b61193f575b611410906146e7565b5061194983614fdc565b506001611936565b50338552600760205261197a610b096102b0600560408920016040519283916020830190614640565b6119986040516102b060208289516101c0818c85808601910161443f565b1415611931565b503385526007602052600560408620016040516119c481610b09602082018095614640565b51902060405160208101906119e6602082816101c08b8781519384920161443f565b51902014611400565b600080fd5b82346101d857806003193601126101d8576020600254604051908152f35b9050346105e55760203660031901126105e557600435916001600160401b0383116101d857506107bd611a50602061071460609536906004016143c1565b8101600a815203019020611b08815491611af96001820154956002830154946003840154916004850154906005860154600687015492611a9260078901614575565b95611aab6009611aa460088c01614575565b9a01614575565b9a6040519e8f9e8f906101609960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015289015280610100890152870190614462565b90858203610120870152614462565b90838203610140850152614462565b82346101d857806003193601126101d8576020600354604051908152f35b82346101d85760603660031901126101d8576004356001600160401b0381116105e557611b669036906004016143c1565b9060ff6024351680602435036119ef57611b88600160ff845416151514614a8e565b611c44611b9484614fdc565b338452600760205260046040852001604051611bb881610b09602082018095614640565b5190206040519060208201835192611bdb602082818801966101c081878a61443f565b519020149182156120d6575b338652600860205260036040872001604051611c0b81610b09602082018095614640565b5190206040516020810190611c2960208286516101c081878b61443f565b51902014918215612084575b5050811561207c575b506146e7565b611c616040516102b060208287516101c081848401858c0161443f565b82526009602052604082209033835260086020526040832090600283019485549060056044351161207857611c9890511515614e3e565b60078401918254111561203c5760ff845416600481101561202857600203611fe357611cc490336152ad565b611f9357611cd760019160243590614757565b50019081546044358101809111611f7d57600592550192549060405191602083015260208252611d068261434f565b611d0f84614b42565b805160018101809111610f8457611d259061498a565b91845b825163ffffffff821690811015611d855780611d47611d5992866149f1565b51611d5282886149f1565b52856149f1565b5063ffffffff809116908114611d7157600101611d28565b634e487b7160e01b86526011600452602486fd5b8685848a611da18a895190611d9a82876149f1565b52846149f1565b50825192600160401b84116110a0578154848355808510611f50575b506020019084526020842084915b848310611e5a578560068501611de18154614b33565b9055807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e575781809160446040518094819363289047b960e21b8352336004840152833560248401525af180156106c557611e475750f35b611e509061433c565b6101d85780f35b50fd5b80518051906001600160401b038211611f3c57611e8182611e7b865461453b565b866147a0565b602090601f8311600114611ed25792611eb8836001959460209487968d92611ec75750508160011b916000199060031b1c19161790565b85555b01920192019190611dcb565b015190508c80610d51565b848952602089209190601f1984168a5b818110611f245750936020936001969387969383889510611f0b575b505050811b018555611ebb565b015160001960f88460031b161c191690558b8080611efe565b92936020600181928786015181550195019301611ee2565b634e487b7160e01b88526041600452602488fd5b828652846020872091820191015b818110611f6b5750611dbd565b80611f77600192614aea565b01611f5e565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152602260248201527f596f7520616c726561647920766f74656420696e207468697320656c6563746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b8580fd5b905085611c3e565b9091503386526008602052600460408720016040516120ab81610b09602082018095614640565b519020916120cb602060405180936101c08383019687925192839161443f565b519020148680611c35565b91503385526007602052600560408620016040516120fc81610b09602082018095614640565b519020604051602081019061211a60208287516101c081878a61443f565b5190201491611be7565b8260803660031901126101d8576004356001600160401b0381116105e5576121509036906004016143c1565b6024356001600160401b0381116106d95761216f9036906004016143c1565b6044356001600160401b0381116118de5761218e9036906004016143c1565b600260643510156118de57338452600760205260026040852001544310612a0a576121c1600160ff865416151514614a8e565b338452600760205260408420926121db6005543414614df6565b617d0060035410156129da5760066040518451906121fd82826020890161443f565b0152612238604051845161221581836020890161443f565b600690820190815281900360200190205460081c6001600160a01b03161561471f565b61224183615191565b156129a9576122528151151561471f565b602081511015612978576001825111156118695782516003811490811561296d575b5015612928576122838361526c565b6128e3573385526007602052600460408620016040516122ab81610b09602082018095614640565b51902060405160208101906122cb60208288516101c08187858d0161443f565b519020141580612894575b156128595760405160208185516122f08183858a0161443f565b810160068152030190209083516001600160401b038111612672576123258161231c600686015461453b565b600686016147a0565b6020601f82116001146127e75760049261235b836001969461237d948c916127dc57508160011b916000199060031b1c19161790565b60068401555b6102b06020604051836101c0829551809285808601910161443f565b600582015560ff1981541660ff6064351617815561239b3382614ac5565b86600282015501556040519160208301926123ea60268284516123c281896020890161443f565b8101602d60f81b60208201526420b236b4b760d91b6021820152036006810184520182614385565b5192516001600160b01b031981169390600a82106127bc575b5050338552600760205261241d600460408720015461453b565b61268657338552600760205260046040862001908051906001600160401b0382116126725761245682612450855461453b565b856147a0565b602090601f831160011461260657918061248b926124f19695948a926110265750508160011b916000199060031b1c19161790565b90555b33855260076020526040852080546bffffffffffffffffffff0000191660a085901c6bffffffffffffffffffff0000161790555b600184013360018060a01b03198254161790556102b06020604051836101c0829551809285808601910161443f565b600383015561252861251260ff600181198654161780865560081c16614e2d565b835461ff00191660089190911b61ff0016178355565b338352600d60205260408320600160ff1982541617905560018060b01b0319168252600c60205260408220600160ff198254161790554360320190816032116125f2576002015561257a600354614b33565b600355612588600454614b33565b600455807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e5757604051630624515160e31b8152336004820152600560248201529082908290604490829084905af180156106c557611e475750f35b634e487b7160e01b83526011600452602483fd5b908388526020882091885b601f198516811061265a57509183916001936124f1979695601f19811610612641575b505050811b01905561248e565b015160001960f88460031b161c19169055888080612634565b91926020600181928685015181550194019201612611565b634e487b7160e01b87526041600452602487fd5b338552600760205261269e600560408720015461453b565b156126ae575b506124f1906124c2565b338552600760205260056040862001908051906001600160401b038211612672576126dd82612450855461453b565b602090601f8311600114612750579180612712926124f19695948a926110265750508160011b916000199060031b1c19161790565b90555b338552600760205260408520805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b16179055906126a4565b908388526020882091885b601f19851681106127a457509183916001936124f1979695601f1981161061278b575b505050811b019055612715565b015160001960f88460031b161c1916905588808061277e565b9192602060018192868501518155019401920161275b565b6001600160b01b0319600a9290920360031b82901b161692508580612403565b90508901518c611550565b6006840188526020882090885b601f198416811061284157509260018361237d93600496839896601f19811610612828575b5050811b016006840155612361565b8a015160001960f88460031b161c191690558b80612819565b9091602060018192858b0151815501930191016127f4565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b503385526007602052600560408620016040516128b981610b09602082018095614640565b51902060405160208101906128d960208288516101c08187858d0161443f565b51902014156122d6565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f72672049442073686f756c642033206f7220342063686172616374657273006044820152606490fd5b600491501486612274565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b82346101d85760203660031901126101d8576001600160a01b0390600435828116908190036105e557816040916107bd935260076020522092612af784549460018060b01b03199460018201541694600282015496600383015494612aa66005610a4f60048701614575565b95604051998a99610120958560ff88971615158d528c602060ff8360081c169101528c6040838360a01b1691015260501b1660608c015260808b015260a08a015260c0890152870152850190614462565b90838203610100850152614462565b9050346105e557816003193601126105e557612b63906107bd612b71612b7f612b2d614b97565b97949a92919360409a91969a519b8c9b15158c52151560208c015260018060a01b031660408b01528060608b0152890190614462565b908782036080890152614487565b9085820360a0870152614487565b9083820360c0850152614487565b82346101d85760203660031901126101d8576040906004358152600960205220805491612c2c60018301549260ff60028201549560038301549460048401546006612bda60058701614575565b95015496604051998a996101209686612bf68d838b9a16614518565b8c6020838360081c1691015260101c16151560408c015260608b015260808a015260a089015260c0880152860152840190614462565b906101008301520390f35b82346101d857806003193601126101d8576001546001600160a01b0316612c5f338214614a05565b4715612c925781808080934790828215612c89575bf115612c7d5780f35b604051903d90823e3d90fd5b506108fc612c74565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20464c522042616c616e636520696e20436f6e74726163740000000000006044820152606490fd5b82346101d857806003193601126101d85760ff602091612d0260018060a01b03600154163314614a05565b54166040519015158152f35b8260603660031901126101d8576004356001600160401b0381116105e557612d3a9036906004016143c1565b6024356001600160401b0381116106d957612d599036906004016143c1565b906044612d6e600160ff865416151514614a8e565b60055460011c34036118de57338452600860205260408420916040519160208301928135845260208152612da18161434f565b5192516001600160801b03198116939060108210613481575b5050611388600460405160208181612dd88b8381519384920161443f565b810160068152030190200154101561343d57600182511115613400576018825110156133b257338652600860205260036040872001604051612e2281610b09602082018095614640565b5190206040516020810190612e44602082816101c08c8781519384920161443f565b519020141580613361575b8061334a575b156133065760016002612e678761461a565b015410156132ca57612e8b60066040516020818161142a8b8381519384920161443f565b156132865750612e9e600384015461453b565b6131865783516001600160401b03811161175f57612ecc81612ec3600387015461453b565b600387016147a0565b6020601f821160011461311d579080612ef99288916116eb57508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b612f223384614ac5565b8051906001600160401b03821161175f57612f4d82612f44600287015461453b565b600287016147a0565b602090601f83116001146130ae57612f7c92918791836130a35750508160011b916000199060031b1c19161790565b60028301555b83604051612f8f8161436a565b52600582018054908581558161307e575b5050600492612ff49260209260ff199160018382541617905560018060801b0319168652600c835260016040872091825416179055612fdf8454614b33565b8455816040519382858094519384920161443f565b81016006815203019020016130098154614b33565b90557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156105e557604051630624515160e31b8152336004820152600560248201529082908290604490829084905af180156106c557613072575080f35b61307b9061433c565b80f35b855260208520908101905b81811015612fa0578061309d600192614aea565b01613089565b015190508780610d51565b9190600285018752602087209087935b601f1984168510613102576001945083601f198116106130e9575b505050811b016002830155612f82565b015160001960f88460031b161c191690558680806130d9565b818101518355602094850194600190930192909101906130be565b906003850187526020872087925b601f198316841061316e576001935082601f19811610613155575b5050811b016003840155612eff565b87015160001960f88460031b161c191690558780613146565b8781015182556020938401936001909201910161312b565b60048301546131948161453b565b156131a0575b50612f18565b8451906001600160401b03821161267257816131be6131c79261453b565b600487016147a0565b6020601f821160011461321d5790806131f49288916116eb57508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b031984161790558561319a565b906004850187526020872087925b601f198316841061326e576001935082601f19811610613255575b5050811b0160048401556131fa565b87015160001960f88460031b161c191690558780613246565b8781015182556020938401936001909201910161322b565b6064907f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006040519162461bcd60e51b835260206004840152601b6024840152820152fd5b60649074456c656374696f6e20696e2070726f67726573732160581b6040519162461bcd60e51b83526020600484015260156024840152820152fd5b6064907f566f746572206973207265676973746572656420696e204f72670000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b50338652600d60205260ff60408720541615612e55565b5033865260086020526004604087200160405161338681610b09602082018095614640565b51902060405160208101906133a8602082816101c08c8781519384920161443f565b5190201415612e4f565b6084907f566f746572206e616d65206c696d6974206973203234206368617261637465726040519162461bcd60e51b83526020600484015260216024840152820152607360f81b6064820152fd5b60649075506c656173652066696c6c20566f746572204e616d6560501b6040519162461bcd60e51b83526020600484015260166024840152820152fd5b6064907f4d6178696d756d206d656d626572206c696d69742072656163686564000000006040519162461bcd60e51b835260206004840152601c6024840152820152fd5b6001600160801b031960109290920360031b82901b161692508680612dba565b82346101d857602091826003193601126105e5576004356001600160401b0381116106d957836107146134d89236906004016143c1565b810160068152030190209260089281600986019461350460086134fd60078a01614a3d565b9801614a3d565b906040519081968792858a54918281520192839a885286882088915b83601f840110613a8857509287926136539592846136749998965493838310613a6c575b838310613a4d575b838310613a2e575b838310613a0f575b8383106139f1575b8383106139d2575b8383106139b3575b838310613994575b838310613975575b838310613956575b838310613937575b838310613918575b8383106138f9575b8383106138da575b8383106138bb575b83831061389c575b83831061387d575b83831061385e575b83831061383f575b838310613820575b838310613801575b8383106137e2575b8383106137c3575b8383106137a4575b838310613785575b838310613766575b838310613747575b838310613728575b83831061370b575b508282106136ee575b8282106136d1575b50106136bb575b506136679b9a999798509493929190940386614385565b60405198899860608a5260608a01906144e4565b90888203848a01526144e4565b92868403604088015251928381520193925b82811061369557505050500390f35b91938395509080826136ab600194839751614518565b0195019101918594939192613686565b816136c89160f81c614518565b0185908c61363c565b846136e56001939660ff8760f01c16614518565b01930184613635565b846137026001939660ff8760e81c16614518565b0193018461362d565b9461371e8160ff87600196991c16614518565b0193018438613624565b9194818161373e60019360ff8960d81c16614518565b0195019161361c565b9194818161375d60019360ff8960d01c16614518565b01950191613614565b9194818161377c60019360ff8960c81c16614518565b0195019161360c565b9194818161379b60019360ff8960c01c16614518565b01950191613604565b919481816137ba60019360ff8960b81c16614518565b019501916135fc565b919481816137d960019360ff8960b01c16614518565b019501916135f4565b919481816137f860019360ff8960a81c16614518565b019501916135ec565b9194818161381760019360ff8960a01c16614518565b019501916135e4565b9194818161383660019360ff8960981c16614518565b019501916135dc565b9194818161385560019360ff8960901c16614518565b019501916135d4565b9194818161387460019360ff8960881c16614518565b019501916135cc565b9194818161389360019360ff8960801c16614518565b019501916135c4565b919481816138b260019360ff8960781c16614518565b019501916135bc565b919481816138d160019360ff8960701c16614518565b019501916135b4565b919481816138f060019360ff8960681c16614518565b019501916135ac565b9194818161390f60019360ff8960601c16614518565b019501916135a4565b9194818161392e60019360ff8960581c16614518565b0195019161359c565b9194818161394d60019360ff8960501c16614518565b01950191613594565b9194818161396c60019360ff8960481c16614518565b0195019161358c565b9194818161398b60019360ff8960401c16614518565b01950191613584565b919481816139aa60019360ff8960381c16614518565b0195019161357c565b919481816139c960019360ff8960301c16614518565b01950191613574565b919481816139e860019360ff8960281c16614518565b0195019161356c565b91948181613a0660019360ff89851c16614518565b01950191613564565b91948181613a2560019360ff8960181c16614518565b0195019161355c565b91948181613a4460019360ff8960101c16614518565b01950191613554565b91948181613a6360019360ff8960081c16614518565b0195019161354c565b91948181613a7f60019360ff8916614518565b01950191613544565b9395509596909193610400600191613ce98954613cdb60ff613aac85828516614518565b613abc88860182858d1c16614518565b613ace60408601828560101c16614518565b613c6d8c613c2587613bdd8c613b956060613af08186018a8d60181c16614518565b613b036080938a8d868901921c16614518565b888b61018060a097613b1c898201858560281c16614518565b613b4060c09b613b338d8401878760301c16614518565b8201858560381c16614518565b613b536101008201858560401c16614518565b613b666101208201858560481c16614518565b613b796101408201858560501c16614518565b613b8c6101608201858560581c16614518565b01921c16614518565b613ba86101a08c01888b60681c16614518565b613bbb6101c08c01888b60701c16614518565b613bce6101e08c01888b60781c16614518565b86896102008d01921c16614518565b613bf06102208a01868960881c16614518565b613c036102408a01868960901c16614518565b613c166102608a01868960981c16614518565b84876102808b01921c16614518565b613c386102a08801848760a81c16614518565b613c4b6102c08801848760b01c16614518565b613c5e6102e08801848760b81c16614518565b82856103008901921c16614518565b613c806103208601828560c81c16614518565b613c936103408601828560d01c16614518565b613ca66103608601828560d81c16614518565b613cb86103808601848e1c8316614518565b613ccb6103a08601828560e81c16614518565b6103c08501908360f01c16614518565b6103e083019060f81c614518565b019601910188969593918a9593613520565b82346101d857806003193601126101d857613d2160018060a01b03600154163314614a05565b602047604051908152f35b82346101d857806003193601126101d8576024602060018060a01b03613d5781600154163314614a05565b604051632fa8a91360e11b815230600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156106c5578291613dac575b602082604051908152f35b90506020813d602011613dda575b81613dc760209383614385565b810103126105e557602091505182613da1565b3d9150613dba565b82346101d85760203660031901126101d857600435613e0c60018060a01b03600154163314614a05565b670de0b6b3a764000090818102918183041490151715613e2c5760055580f35b634e487b7160e01b82526011600452602482fd5b82346101d857602090816003193601126101d8576004356001600160401b0381116105e557613e739036906004016143c1565b906040519180519284820193613e8a81838761443f565b81018186600a93838580955203019020015490613ea682614923565b94613eb08361498a565b93613eba84614923565b955b848110613eff57613ee4886107bd89613ef18d8b604051968796606088526060880190614408565b9186830390870152614487565b9083820360408501526144e4565b80613f5f60026109ac83888e8e613f4a8460ff613f4160019c8f8f888a92613f329260405193849283925192839161443f565b81018481520301902001614757565b505416926149f1565b52604051908180613f328d8d5192839161443f565b613f6982896149f1565b52613f7481886149f1565b5081613f9082878d604051908180613f328c8c5192839161443f565b500154613f9d828a6149f1565b5201613ebc565b82346101d85760403660031901126101d8576001600160401b03906004358281116105e557613fd79036906004016143c1565b916024359081116105e557613ff09036906004016143c1565b918192338352614085602094600786526004604086200190604051918261401a8982018093614640565b039261402e601f1994858101835282614385565b51902091604051928884018751946140508b82818c01986101c081878c61443f565b51902014801561427e575b156141c857505061406c60016146e7565b6102b08660405180936101c0885180928585019061443f565b835260098452604083209151156106d957600782019060ff8254935460081c16831015614189578051801561186957601810614148576140c481615191565b156140ee578361307b949560ff604051956140de8761430b565b16855284015260408301526147e5565b60405162461bcd60e51b815260048101869052602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526004810186905260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b338752600788526141ee6104f76102b0600460408b20016040519283918d830190614640565b6142086040516102b08b828b516101c0818484018c61443f565b1490811591614233575b50614221575b61406c906146e7565b5061422b84614fdc565b506001614218565b61425c91506102b061057091338a5260078b52600560408b20016040519384918d830190614640565b6142766040516102b08a828a516101c0818484018b61443f565b141588614212565b5033875260078852600560408820016040516142a1816104f78c82018095614640565b519020604051898101906142bd8b828b516101c081878c61443f565b5190201461405b565b82346101d857806003193601126101d8576001546040516001600160a01b039091168152602090f35b8390346105e557816003193601126105e5576020906005548152f35b606081019081106001600160401b0382111761432657604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161432657604052565b604081019081106001600160401b0382111761432657604052565b602081019081106001600160401b0382111761432657604052565b90601f801991011681019081106001600160401b0382111761432657604052565b6001600160401b03811161432657601f01601f191660200190565b81601f820112156119ef578035906143d8826143a6565b926143e66040519485614385565b828452602083830101116119ef57816000926020809301838601378301015290565b90815180825260208080930193019160005b828110614428575050505090565b835160ff168552938101939281019260010161441a565b60005b8381106144525750506000910152565b8181015183820152602001614442565b9060209161447b8151809281855285808601910161443f565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106144b65750505050505090565b90919293949584806144d4600193601f198682030187528a51614462565b98019301930191949392906144a6565b90815180825260208080930193019160005b828110614504575050505090565b8351855293810193928101926001016144f6565b9060048210156145255752565b634e487b7160e01b600052602160045260246000fd5b90600182811c9216801561456b575b602083101461455557565b634e487b7160e01b600052602260045260246000fd5b91607f169161454a565b906040519182600082546145888161453b565b908184526020946001916001811690816000146145f857506001146145b9575b5050506145b792500383614385565b565b600090815285812095935091905b8183106145e05750506145b793508201013880806145a8565b855488840185015294850194879450918301916145c7565b925050506145b794925060ff191682840152151560051b8201013880806145a8565b602061463391816040519382858094519384920161443f565b8101600681520301902090565b60009291815461464f8161453b565b926001918083169081156146a9575060011461466c575b50505050565b9091929394506000526020906020600020906000915b8583106146985750505050019038808080614666565b805485840152918301918101614682565b60ff1916845250505081151590910201915038808080614666565b6020815191015190602081106146d8575090565b6000199060200360031b1b1690565b156146ee57565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b1561472657565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015614773576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b818110614794575050565b60008155600101614789565b9190601f81116147af57505050565b6145b7926000526020600020906020601f840160051c830193106147db575b601f0160051c0190614789565b90915081906147ce565b91908254600160401b8110156143265761480790600194600182018155614757565b6148f65760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b0383116143265761484e83611e7b865461453b565b602091601f841160011461489157505081906148829394956000926148865750508160011b916000199060031b1c19161790565b9055565b015190503880610d51565b600085815260208120601f1986169890949390925b8983106148df57505050836001959697106148c6575b505050811b019055565b015160001960f88460031b161c191690553880806148bc565b8385015186559485019493810193918101916148a6565b634e487b7160e01b600052600060045260246000fd5b6001600160401b0381116143265760051b60200190565b9061492d8261490c565b61493a6040519182614385565b828152809261494b601f199161490c565b0190602036910137565b604090604051916149658361430b565b600283528260005b82811061497957505050565b80606060208093850101520161496d565b906149948261490c565b6149a16040519182614385565b82815280926149b2601f199161490c565b019060005b8281106149c357505050565b8060606020809385010152016149b7565b8051156147735760200190565b8051600110156147735760400190565b80518210156147735760209160051b010190565b15614a0c57565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210614a74575050506145b792500383614385565b855484526001958601958895509381019390910190614a5e565b15614a9557565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b614af4815461453b565b9081614afe575050565b81601f60009311600114614b10575055565b908083918252614b2f601f60208420940160051c840160018501614789565b5555565b6000198114611f7d5760010190565b908154614b4e8161490c565b92614b5c6040519485614385565b818452600090815260208082208186015b848410614b7b575050505050565b6001838192614b8985614575565b815201920193019290614b6d565b3360003381526020906007825260409060ff8282205416600014614caf576001600160a01b03841681526007835281812090614bd1614955565b92614bde60048401614575565b614be7856149d4565b52614bf1846149d4565b50614bfe60058401614575565b614c07856149e1565b52614c11846149e1565b506003614c1c614955565b93805460018060b01b03198451818360a01b168a820152600a8152614c408161434f565b614c49886149d4565b52614c53876149d4565b5084519160501b1688820152600a8152614c6c8161434f565b614c75866149e1565b52614c7f856149e1565b50015494815195818701528552614c958561434f565b5190614ca08261436a565b81526001956001959493929190565b93916008815260ff8286205416600014614daf576001600160a01b038416855260088152818520614cde614955565b92614ceb60038301614575565b614cf4856149d4565b52614cfe846149d4565b50614d0b60048301614575565b614d14856149e1565b52614d1e846149e1565b50614d27614955565b9260018301549180519060018060801b031991828560801b168482015260108152614d518161434f565b614d5a876149d4565b52614d64866149d4565b505192169082015260108152614d798161434f565b614d82836149e1565b52614d8c826149e1565b506001959493614dac6005614da360028501614575565b95949301614b42565b90565b50809193925051614dbf8161436a565b8281528151614dcd8161436a565b8381528251614ddb8161436a565b84815284958533955190614dee8261436a565b815293929190565b15614dfd57565b60405162461bcd60e51b8152602060048201526008602482015267195c9c9bdc8e8ccd60c21b6044820152606490fd5b60ff1660ff8114611f7d5760010190565b15614e4557565b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b80548210156147735760005260206000200190600090565b8054600160401b81101561432657614ebf91600182018155614e8a565b819291549060031b91821b91600019901b1916179055565b919091805483101561477357600052601f60206000208360051c01921690565b90808214614fcb57614f09815461453b565b906001600160401b03821161432657614f2682612450855461453b565b600090601f8311600114614f6157614882929160009183614f565750508160011b916000199060031b1c19161790565b015490503880610d51565b815260208082208483528183209291601f1985169083905b828210614fb2575050908460019594939210614f9957505050811b019055565b015460001960f88460031b161c191690553880806148bc565b8495819295850154815560018091019601940190614f79565b5050565b8015611f7d576000190190565b604051614fe88161434f565b60019182825260208201602d60f81b815283846000905b61512e575b5061500e9061498a565b93600091600094826000905b6150a9575b505050508161503491615045949351916153b2565b61503e82856149f1565b52826149f1565b5080511561505a57615056906149d4565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b8551811015615129576001600160f81b0319806150c68389615180565b51169083511561477357845116146150e1575b83018361501a565b9593866150f191879493946153b2565b6150fb85896149f1565b5261510684886149f1565b5082860191828711611f7d578361511e819496614b33565b9791929350506150d9565b61501f565b835181101561517b576001600160f81b0319908161514c8287615180565b511686511561477357879285511614615168575b810190614fff565b916151738291614b33565b929050615160565b615004565b908151811015614773570160200190565b6000805b8251811015615264576151a88184615180565b51603060f891821c1015908161524b575b8115615215575b81156151db575b50156151d557600101615195565b50905090565b905060616151e98386615180565b51821c101590816151fc575b50386151c7565b607a915061520a8386615180565b51901c1115386151f5565b905060416152238386615180565b51821c101580615234575b906151c0565b50605a6152418386615180565b51821c111561522e565b905060396152598386615180565b51821c1115906151b9565b505050600190565b60005b81518110156152a657600160fd1b6001600160f81b03196152908385615180565b51161461529f5760010161526f565b5050600190565b5050600090565b6001600160a01b0316600090815260086020908152604080832060050180549491939192915b8581106152e557505050505050600090565b6152ef8183614e8a565b50855161530381610b098782018095614640565b51902085518481019086825285815261531b8161434f565b5190201461532b576001016152d3565b505050505050600190565b9060005b8254811015615368578161534e8285614e8a565b90549060031b1c146153625760010161533a565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b91908203918211611f7d57565b92918082111580615484575b15615443576153cd82826153a5565b916153d7836143a6565b926153e56040519485614385565b8084526153f4601f19916143a6565b01366020850137805b82811061540c57509193505050565b6001906001600160f81b03196154228289615180565b511661543c61543185846153a5565b9160001a9187615180565b53016153fd565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156153be56fea2646970667358221220a3d3ed0ae09c6f5ecf41a543b748a447a22ec60911d83624d7b490902d28ce0e64736f6c63430008180033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60009060e08235811c9182630946e807146142ef575081630c4f65bd146142c6578163145ef6e9146119f4578163158058f614613fa4578163162442e214613e405781631663d3df14613de25781631a80c09a14613d2c5781631df3739a14613cfb5781632c2032c0146134a15781633d2acf8314612d0e57816342b7fa1c14612cd7578163476343ee14612c375781635398690b14612b8d5781635d8d158514612b0657816363a846f814612a3a578163695c2d24146121245781636cbe478114611b355781637217fcfd14611b1757816381929bac14611a125781638783cc8a146119f45781638ad0e26e1461131a5781639b698d1b14610ab2578163a3ec138d146109e8578163a4224e201461084b578163a43064cc146107f3578163a9c63aa0146107d5578163b2054365146106dd57508063c10a7fdb146105e9578063f544bed8146101db5763f6246dcb0361000f57346101d85760203660031901126101d857600435906001600160401b0382116101d85760206101a436600485016143c1565b6040516101cd8382816101c0818301968781519384920161443f565b8101038084520182614385565b519020604051908152f35b80fd5b50346101d857602090816003193601126101d8576004356001600160401b0381116105e55761020e9036906004016143c1565b81903383526102bb6102b5600793848752600460408720019060405191826102398a82018093614640565b039261024d601f1994858101835282614385565b519020916040519289840187519461026f8c82818c01986101c081878c61443f565b51902014801561059e575b156104d257505061028b60016146e7565b6102978451151561471f565b6102b08760405180936101c0885180928585019061443f565b6146c4565b91614fdc565b8184526009855260408420805460ff811660048110156104be57610479578482015460ff8260081c160361043f57426005018060051161042b5790600291600384015560ff191617905561038760405192600283519488818187019761032281838b61443f565b81016006815203019020016103378154614b33565b905560016040518881865161034d81838b61443f565b81016006815203019020016103628154614fcf565b9055846040518881865161037781838b61443f565b8101600681520301902001615336565b926040518681845161039a81838961443f565b8101600681520301902001548310156103f1576103da93946009926103ca9260405193849283925192839161443f565b8101600681520301902001614ed7565b81549060031b9060ff6002831b921b191617905580f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b87526011600452602487fd5b60405162461bcd60e51b815260048101889052601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260048101889052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b87526021600452602487fd5b338852868952610503600460408a20016102b08b6104f7604051938492830190614640565b03848101835282614385565b61051d6040516102b08c828b516101c0818484018c61443f565b1490811591610548575b50610536575b61028b906146e7565b5061054084614fdc565b50600161052d565b61057c9150338952878a526102b0600560408b2001918b610570604051948592830190614640565b03908101835282614385565b6105966040516102b08b828a516101c0818484018b61443f565b141538610527565b50338852868952600560408920016040516105c0816104f78d82018095614640565b5190206040518a8101906105dc8c828b516101c081878c61443f565b5190201461027a565b5080fd5b5060203660031901126101d8576004356001600160401b0381116105e5576106159036906004016143c1565b815460ff81166106d95761063267a688906bd8b000003414614df6565b60018054610100600160a81b0319928316600882901b610100600160a81b0316178086556001600160a01b0319918216909255604051845191948693849384938493602080830193610690928491906101c09082908890860161443f565b5190206002558134156106d0575b349160081c6001600160a01b031690f1156106c55782541682553390600154161760015580f35b6040513d84823e3d90fd5b506108fc61069e565b8280fd5b9050346105e55760203660031901126105e5576004356001600160401b0381116106d95760206107146107279236906004016143c1565b816040519382858094519384920161443f565b810160068152030190209182549060ff8216926001850154946002810154600382015490600483015497610762600660058601549501614575565b96604051986101009760028210156107c15750895260081c6001600160a01b0316602089015260408801526060870152608086015260a085019590955260c0840194909452928201839052909182916107bd91830190614462565b0390f35b634e487b7160e01b81526021600452602490fd5b82346101d857806003193601126101d8576020600454604051908152f35b82346101d857806003193601126101d85761081960018060a01b03600154163314614a05565b805460ff8116158015610836575050805460ff1916600117815580f35b15600114610842575080f35b60ff1916815580f35b9050346105e557602091826003193601126101d8576004356001600160401b0381116105e55761088261089d9136906004016143c1565b6102b085604051836101c0829551809285808601910161443f565b918282526009845260408220906001938560018401549560028086015460405190848201528381526108ce8161434f565b6007870192888454946108e086614923565b9460096108ec8861498a565b986108f689614923565b9a855252600660ff604081952054169b01549b5b878110610983575050505050926109596107bd9796959361096793610946610975976040519e8f9e8f9061010092839183528201520190614462565b9160408d01528b820360608d0152614408565b9089820360808b0152614487565b9087820360a08901526144e4565b9360c0860152840190614518565b8084610990879386614757565b50541661099d828a6149f1565b526109b3836109ac8387614757565b5001614575565b6109bd828c6149f1565b526109c8818b6149f1565b50816109d48286614757565b5001546109e1828d6149f1565b520161090a565b9050346105e55760203660031901126105e5576001600160a01b0391600435838116908190036105e557816040916107bd935260086020522091610aa4835493610a96600182015493610a3d60028401614575565b90610a566004610a4f60038701614575565b9501614575565b95604051998960ff8c9b1615158b5260081c1660208a015260018060801b031990818160801b1660408b0152166060890152806080890152870190614462565b9085820360a0870152614462565b9083820360c0850152614462565b82346101d85760403660031901126101d8576004356001600160401b0381116105e557610ae39036906004016143c1565b9080338252600760205260046040832001604051610b1781610b09602082018095614640565b03601f198101835282614385565b5190206040516020810190610b3760208288516101c08187858d0161443f565b5190201480156112cc575b156112115750610b5260016146e7565b610b6f6040516102b060208286516101c081848401858b0161443f565b9081815260096020526040812090610b8684614fdc565b923382526007602052600360408320015460405190602082015260208152610bad8161434f565b610bcb6040516102b06020828a516101c0818d85808601910161443f565b8352600960205260408320604051610be28161436a565b848152600790910180549085805b8360ff8216106111c0575050505086511561118557610c1187511515614e3e565b828452600960205284549660ff8860101c1661114c57600460ff8916101561113857600260ff8916036110f95760068601546004610c56610c5184614fdc565b61461a565b015460011c600101908160011161042b5711156110b45742600501600511610f84576020610ca99162010003600489019a426005018c5562ff00ff1916178855816040519382858094519384920161443f565b8101600a81520301902096600160ff1989541617885560068601546003890155610cd33389614ac5565b600386015460018901555460028801556024356006880155610cfb6005860160078901614ef7565b826004880155600285015460058801558051906001600160401b0382116110a057610d3682610d2d60088b015461453b565b60088b016147a0565b602090601f831160011461103157610d669291869183611026575b50508160011b916000199060031b1c19161790565b60088701555b8051906001600160401b03821161101257610d9782610d8e60098a015461453b565b60098a016147a0565b602090601f8311600114610fa357610dc69291859183610f985750508160011b916000199060031b1c19161790565b60098601555b815b6007840154811015610e4d5780610e47610ded60019360078801614757565b50604051610dfa8161430b565b60ff825416815260ff610e1a600287850154946020850195865201614575565b918260408201525116915160405192610e328461430b565b835260208301526040820152600a89016147e5565b01610dce565b5083818352600960205260076040842084815560006001820155600060028201556000600382015560006004820155610e8860058201614aea565b600060068201550180549084815581610f44575b846002610f2a60208787610eda610ec660405193600784519587818188019861037781838c61443f565b6009604051868186516103ca81838b61443f565b81549060031b9060ff6003831b921b1916179055600360405184818451610f0281838961443f565b8101600681520301902001610f178154614b33565b905560405193849283925192839161443f565b8101600681520301902001610f3f8154614fcf565b905580f35b81600302916003830403610f8457845260208420908101905b81811015610e9c5780856003925560006001820155610f7e60028201614aea565b01610f5d565b634e487b7160e01b85526011600452602485fd5b015190508880610d51565b9190600988018552602085209085935b601f1984168510610ff7576001945083601f19811610610fde575b505050811b016009860155610dcc565b015160001960f88460031b161c19169055878080610fce565b81810151835560209485019460019093019290910190610fb3565b634e487b7160e01b84526041600452602484fd5b015190508980610d51565b9190600889018652602086209086935b601f1984168510611085576001945083601f1981161061106c575b505050811b016008870155610d6c565b015160001960f88460031b161c1916905588808061105c565b81810151835560209485019460019093019290910190611041565b634e487b7160e01b85526041600452602485fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b6111ca8184614757565b5082600180920154116111e7575b506111e290614e2d565b610bf0565b915093506111f58483614757565b5001546111e261120a60026109ac8786614757565b94906111d8565b3382526007602052611239610b096102b0600460408620016040519283916020830190614640565b6112566040516102b060208288516101c081848401858d0161443f565b1480159061127f575b61126d575b610b52906146e7565b5061127782614fdc565b506001611264565b5033825260076020526112a8610b096102b0600560408620016040519283916020830190614640565b6112c56040516102b060208288516101c081848401858d0161443f565b141561125f565b503382526007602052600560408320016040516112f181610b09602082018095614640565b519020604051602081019061131160208288516101c08187858d0161443f565b51902014610b42565b82346101d85760803660031901126101d8576004356001600160401b0381116105e55761134b9036906004016143c1565b6024356001600160401b0381116106d95761136a9036906004016143c1565b6044356001600160401b0381116118de576113899036906004016143c1565b9060ff60643516606435036119ef576113aa600160ff865416151514614a8e565b833385526007602052610b096113d0600460408820016040519283916020830190614640565b602081519101206040516113f160208288516101c081848401858d0161443f565b6020815191012014801561199f575b156118e2575061141060016146e7565b61143a6006604051602081875161142a8183858c0161443f565b810184815203019020015461453b565b156118de576001815111156118ad5760058151101561186d5781516001811115611869576019111561182857600a6002604051602081875161147f8183858c0161443f565b81016006815203019020015410156117ea57600160ff6064351611156117ad576114ee906102b06021604051809387516114c0816020850160208c0161443f565b8201602d60f81b60208201526114df825180936020878501910161443f565b01036001810184520182614385565b80845260096020526040842090600b60205260ff6040862054166117735783516001600160401b03811161175f576115368161152d600586015461453b565b600586016147a0565b6020601f82116001146116f65790806115649288916116eb575b508160011b916000199060031b1c19161790565b60058301555b8060018301556040519183519280602086019480602083019061158d918861443f565b8101038082526020016115a09082614385565b6115a9906146c4565b6002820155805461ffff191661ff0060643560081b16179055808552600b60209081526040808720805460ff1916600117905551855190918291906115f390829084908a0161443f565b8101600681520360200190206007019061160c91614ea2565b6040518351819061162181836020890161443f565b81016006815203602001902060080191604051918291519081602084016116479261443f565b81010380825260200161165a9082614385565b611663906146c4565b61166c91614ea2565b6040518151819061168181836020870161443f565b810160068152036020019020600901805490600160401b821015611012576001926116b683602093866116d696018155614ed7565b60ff82549160031b1b19169055816040519382858094519384920161443f565b8101600681520301902001610f3f8154614b33565b905086015188611550565b906005840187526020872087925b601f1983168410611747576001935082601f1981161061172e575b5050811b01600583015561156a565b87015160001960f88460031b161c19169055878061171f565b87810151825560209384019360019092019101611704565b634e487b7160e01b86526041600452602486fd5b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b8480fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b8380fd5b338552600760205261190a610b096102b0600460408920016040519283916020830190614640565b6119286040516102b060208289516101c0818c85808601910161443f565b14801590611951575b61193f575b611410906146e7565b5061194983614fdc565b506001611936565b50338552600760205261197a610b096102b0600560408920016040519283916020830190614640565b6119986040516102b060208289516101c0818c85808601910161443f565b1415611931565b503385526007602052600560408620016040516119c481610b09602082018095614640565b51902060405160208101906119e6602082816101c08b8781519384920161443f565b51902014611400565b600080fd5b82346101d857806003193601126101d8576020600254604051908152f35b9050346105e55760203660031901126105e557600435916001600160401b0383116101d857506107bd611a50602061071460609536906004016143c1565b8101600a815203019020611b08815491611af96001820154956002830154946003840154916004850154906005860154600687015492611a9260078901614575565b95611aab6009611aa460088c01614575565b9a01614575565b9a6040519e8f9e8f906101609960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015289015280610100890152870190614462565b90858203610120870152614462565b90838203610140850152614462565b82346101d857806003193601126101d8576020600354604051908152f35b82346101d85760603660031901126101d8576004356001600160401b0381116105e557611b669036906004016143c1565b9060ff6024351680602435036119ef57611b88600160ff845416151514614a8e565b611c44611b9484614fdc565b338452600760205260046040852001604051611bb881610b09602082018095614640565b5190206040519060208201835192611bdb602082818801966101c081878a61443f565b519020149182156120d6575b338652600860205260036040872001604051611c0b81610b09602082018095614640565b5190206040516020810190611c2960208286516101c081878b61443f565b51902014918215612084575b5050811561207c575b506146e7565b611c616040516102b060208287516101c081848401858c0161443f565b82526009602052604082209033835260086020526040832090600283019485549060056044351161207857611c9890511515614e3e565b60078401918254111561203c5760ff845416600481101561202857600203611fe357611cc490336152ad565b611f9357611cd760019160243590614757565b50019081546044358101809111611f7d57600592550192549060405191602083015260208252611d068261434f565b611d0f84614b42565b805160018101809111610f8457611d259061498a565b91845b825163ffffffff821690811015611d855780611d47611d5992866149f1565b51611d5282886149f1565b52856149f1565b5063ffffffff809116908114611d7157600101611d28565b634e487b7160e01b86526011600452602486fd5b8685848a611da18a895190611d9a82876149f1565b52846149f1565b50825192600160401b84116110a0578154848355808510611f50575b506020019084526020842084915b848310611e5a578560068501611de18154614b33565b9055807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e575781809160446040518094819363289047b960e21b8352336004840152833560248401525af180156106c557611e475750f35b611e509061433c565b6101d85780f35b50fd5b80518051906001600160401b038211611f3c57611e8182611e7b865461453b565b866147a0565b602090601f8311600114611ed25792611eb8836001959460209487968d92611ec75750508160011b916000199060031b1c19161790565b85555b01920192019190611dcb565b015190508c80610d51565b848952602089209190601f1984168a5b818110611f245750936020936001969387969383889510611f0b575b505050811b018555611ebb565b015160001960f88460031b161c191690558b8080611efe565b92936020600181928786015181550195019301611ee2565b634e487b7160e01b88526041600452602488fd5b828652846020872091820191015b818110611f6b5750611dbd565b80611f77600192614aea565b01611f5e565b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152602260248201527f596f7520616c726561647920766f74656420696e207468697320656c6563746960448201526137b760f11b6064820152608490fd5b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b8580fd5b905085611c3e565b9091503386526008602052600460408720016040516120ab81610b09602082018095614640565b519020916120cb602060405180936101c08383019687925192839161443f565b519020148680611c35565b91503385526007602052600560408620016040516120fc81610b09602082018095614640565b519020604051602081019061211a60208287516101c081878a61443f565b5190201491611be7565b8260803660031901126101d8576004356001600160401b0381116105e5576121509036906004016143c1565b6024356001600160401b0381116106d95761216f9036906004016143c1565b6044356001600160401b0381116118de5761218e9036906004016143c1565b600260643510156118de57338452600760205260026040852001544310612a0a576121c1600160ff865416151514614a8e565b338452600760205260408420926121db6005543414614df6565b617d0060035410156129da5760066040518451906121fd82826020890161443f565b0152612238604051845161221581836020890161443f565b600690820190815281900360200190205460081c6001600160a01b03161561471f565b61224183615191565b156129a9576122528151151561471f565b602081511015612978576001825111156118695782516003811490811561296d575b5015612928576122838361526c565b6128e3573385526007602052600460408620016040516122ab81610b09602082018095614640565b51902060405160208101906122cb60208288516101c08187858d0161443f565b519020141580612894575b156128595760405160208185516122f08183858a0161443f565b810160068152030190209083516001600160401b038111612672576123258161231c600686015461453b565b600686016147a0565b6020601f82116001146127e75760049261235b836001969461237d948c916127dc57508160011b916000199060031b1c19161790565b60068401555b6102b06020604051836101c0829551809285808601910161443f565b600582015560ff1981541660ff6064351617815561239b3382614ac5565b86600282015501556040519160208301926123ea60268284516123c281896020890161443f565b8101602d60f81b60208201526420b236b4b760d91b6021820152036006810184520182614385565b5192516001600160b01b031981169390600a82106127bc575b5050338552600760205261241d600460408720015461453b565b61268657338552600760205260046040862001908051906001600160401b0382116126725761245682612450855461453b565b856147a0565b602090601f831160011461260657918061248b926124f19695948a926110265750508160011b916000199060031b1c19161790565b90555b33855260076020526040852080546bffffffffffffffffffff0000191660a085901c6bffffffffffffffffffff0000161790555b600184013360018060a01b03198254161790556102b06020604051836101c0829551809285808601910161443f565b600383015561252861251260ff600181198654161780865560081c16614e2d565b835461ff00191660089190911b61ff0016178355565b338352600d60205260408320600160ff1982541617905560018060b01b0319168252600c60205260408220600160ff198254161790554360320190816032116125f2576002015561257a600354614b33565b600355612588600454614b33565b600455807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e5757604051630624515160e31b8152336004820152600560248201529082908290604490829084905af180156106c557611e475750f35b634e487b7160e01b83526011600452602483fd5b908388526020882091885b601f198516811061265a57509183916001936124f1979695601f19811610612641575b505050811b01905561248e565b015160001960f88460031b161c19169055888080612634565b91926020600181928685015181550194019201612611565b634e487b7160e01b87526041600452602487fd5b338552600760205261269e600560408720015461453b565b156126ae575b506124f1906124c2565b338552600760205260056040862001908051906001600160401b038211612672576126dd82612450855461453b565b602090601f8311600114612750579180612712926124f19695948a926110265750508160011b916000199060031b1c19161790565b90555b338552600760205260408520805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b16179055906126a4565b908388526020882091885b601f19851681106127a457509183916001936124f1979695601f1981161061278b575b505050811b019055612715565b015160001960f88460031b161c1916905588808061277e565b9192602060018192868501518155019401920161275b565b6001600160b01b0319600a9290920360031b82901b161692508580612403565b90508901518c611550565b6006840188526020882090885b601f198416811061284157509260018361237d93600496839896601f19811610612828575b5050811b016006840155612361565b8a015160001960f88460031b161c191690558b80612819565b9091602060018192858b0151815501930191016127f4565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b503385526007602052600560408620016040516128b981610b09602082018095614640565b51902060405160208101906128d960208288516101c08187858d0161443f565b51902014156122d6565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4f72672049442073686f756c642033206f7220342063686172616374657273006044820152606490fd5b600491501486612274565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b82346101d85760203660031901126101d8576001600160a01b0390600435828116908190036105e557816040916107bd935260076020522092612af784549460018060b01b03199460018201541694600282015496600383015494612aa66005610a4f60048701614575565b95604051998a99610120958560ff88971615158d528c602060ff8360081c169101528c6040838360a01b1691015260501b1660608c015260808b015260a08a015260c0890152870152850190614462565b90838203610100850152614462565b9050346105e557816003193601126105e557612b63906107bd612b71612b7f612b2d614b97565b97949a92919360409a91969a519b8c9b15158c52151560208c015260018060a01b031660408b01528060608b0152890190614462565b908782036080890152614487565b9085820360a0870152614487565b9083820360c0850152614487565b82346101d85760203660031901126101d8576040906004358152600960205220805491612c2c60018301549260ff60028201549560038301549460048401546006612bda60058701614575565b95015496604051998a996101209686612bf68d838b9a16614518565b8c6020838360081c1691015260101c16151560408c015260608b015260808a015260a089015260c0880152860152840190614462565b906101008301520390f35b82346101d857806003193601126101d8576001546001600160a01b0316612c5f338214614a05565b4715612c925781808080934790828215612c89575bf115612c7d5780f35b604051903d90823e3d90fd5b506108fc612c74565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20464c522042616c616e636520696e20436f6e74726163740000000000006044820152606490fd5b82346101d857806003193601126101d85760ff602091612d0260018060a01b03600154163314614a05565b54166040519015158152f35b8260603660031901126101d8576004356001600160401b0381116105e557612d3a9036906004016143c1565b6024356001600160401b0381116106d957612d599036906004016143c1565b906044612d6e600160ff865416151514614a8e565b60055460011c34036118de57338452600860205260408420916040519160208301928135845260208152612da18161434f565b5192516001600160801b03198116939060108210613481575b5050611388600460405160208181612dd88b8381519384920161443f565b810160068152030190200154101561343d57600182511115613400576018825110156133b257338652600860205260036040872001604051612e2281610b09602082018095614640565b5190206040516020810190612e44602082816101c08c8781519384920161443f565b519020141580613361575b8061334a575b156133065760016002612e678761461a565b015410156132ca57612e8b60066040516020818161142a8b8381519384920161443f565b156132865750612e9e600384015461453b565b6131865783516001600160401b03811161175f57612ecc81612ec3600387015461453b565b600387016147a0565b6020601f821160011461311d579080612ef99288916116eb57508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b612f223384614ac5565b8051906001600160401b03821161175f57612f4d82612f44600287015461453b565b600287016147a0565b602090601f83116001146130ae57612f7c92918791836130a35750508160011b916000199060031b1c19161790565b60028301555b83604051612f8f8161436a565b52600582018054908581558161307e575b5050600492612ff49260209260ff199160018382541617905560018060801b0319168652600c835260016040872091825416179055612fdf8454614b33565b8455816040519382858094519384920161443f565b81016006815203019020016130098154614b33565b90557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b156105e557604051630624515160e31b8152336004820152600560248201529082908290604490829084905af180156106c557613072575080f35b61307b9061433c565b80f35b855260208520908101905b81811015612fa0578061309d600192614aea565b01613089565b015190508780610d51565b9190600285018752602087209087935b601f1984168510613102576001945083601f198116106130e9575b505050811b016002830155612f82565b015160001960f88460031b161c191690558680806130d9565b818101518355602094850194600190930192909101906130be565b906003850187526020872087925b601f198316841061316e576001935082601f19811610613155575b5050811b016003840155612eff565b87015160001960f88460031b161c191690558780613146565b8781015182556020938401936001909201910161312b565b60048301546131948161453b565b156131a0575b50612f18565b8451906001600160401b03821161267257816131be6131c79261453b565b600487016147a0565b6020601f821160011461321d5790806131f49288916116eb57508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b031984161790558561319a565b906004850187526020872087925b601f198316841061326e576001935082601f19811610613255575b5050811b0160048401556131fa565b87015160001960f88460031b161c191690558780613246565b8781015182556020938401936001909201910161322b565b6064907f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006040519162461bcd60e51b835260206004840152601b6024840152820152fd5b60649074456c656374696f6e20696e2070726f67726573732160581b6040519162461bcd60e51b83526020600484015260156024840152820152fd5b6064907f566f746572206973207265676973746572656420696e204f72670000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b50338652600d60205260ff60408720541615612e55565b5033865260086020526004604087200160405161338681610b09602082018095614640565b51902060405160208101906133a8602082816101c08c8781519384920161443f565b5190201415612e4f565b6084907f566f746572206e616d65206c696d6974206973203234206368617261637465726040519162461bcd60e51b83526020600484015260216024840152820152607360f81b6064820152fd5b60649075506c656173652066696c6c20566f746572204e616d6560501b6040519162461bcd60e51b83526020600484015260166024840152820152fd5b6064907f4d6178696d756d206d656d626572206c696d69742072656163686564000000006040519162461bcd60e51b835260206004840152601c6024840152820152fd5b6001600160801b031960109290920360031b82901b161692508680612dba565b82346101d857602091826003193601126105e5576004356001600160401b0381116106d957836107146134d89236906004016143c1565b810160068152030190209260089281600986019461350460086134fd60078a01614a3d565b9801614a3d565b906040519081968792858a54918281520192839a885286882088915b83601f840110613a8857509287926136539592846136749998965493838310613a6c575b838310613a4d575b838310613a2e575b838310613a0f575b8383106139f1575b8383106139d2575b8383106139b3575b838310613994575b838310613975575b838310613956575b838310613937575b838310613918575b8383106138f9575b8383106138da575b8383106138bb575b83831061389c575b83831061387d575b83831061385e575b83831061383f575b838310613820575b838310613801575b8383106137e2575b8383106137c3575b8383106137a4575b838310613785575b838310613766575b838310613747575b838310613728575b83831061370b575b508282106136ee575b8282106136d1575b50106136bb575b506136679b9a999798509493929190940386614385565b60405198899860608a5260608a01906144e4565b90888203848a01526144e4565b92868403604088015251928381520193925b82811061369557505050500390f35b91938395509080826136ab600194839751614518565b0195019101918594939192613686565b816136c89160f81c614518565b0185908c61363c565b846136e56001939660ff8760f01c16614518565b01930184613635565b846137026001939660ff8760e81c16614518565b0193018461362d565b9461371e8160ff87600196991c16614518565b0193018438613624565b9194818161373e60019360ff8960d81c16614518565b0195019161361c565b9194818161375d60019360ff8960d01c16614518565b01950191613614565b9194818161377c60019360ff8960c81c16614518565b0195019161360c565b9194818161379b60019360ff8960c01c16614518565b01950191613604565b919481816137ba60019360ff8960b81c16614518565b019501916135fc565b919481816137d960019360ff8960b01c16614518565b019501916135f4565b919481816137f860019360ff8960a81c16614518565b019501916135ec565b9194818161381760019360ff8960a01c16614518565b019501916135e4565b9194818161383660019360ff8960981c16614518565b019501916135dc565b9194818161385560019360ff8960901c16614518565b019501916135d4565b9194818161387460019360ff8960881c16614518565b019501916135cc565b9194818161389360019360ff8960801c16614518565b019501916135c4565b919481816138b260019360ff8960781c16614518565b019501916135bc565b919481816138d160019360ff8960701c16614518565b019501916135b4565b919481816138f060019360ff8960681c16614518565b019501916135ac565b9194818161390f60019360ff8960601c16614518565b019501916135a4565b9194818161392e60019360ff8960581c16614518565b0195019161359c565b9194818161394d60019360ff8960501c16614518565b01950191613594565b9194818161396c60019360ff8960481c16614518565b0195019161358c565b9194818161398b60019360ff8960401c16614518565b01950191613584565b919481816139aa60019360ff8960381c16614518565b0195019161357c565b919481816139c960019360ff8960301c16614518565b01950191613574565b919481816139e860019360ff8960281c16614518565b0195019161356c565b91948181613a0660019360ff89851c16614518565b01950191613564565b91948181613a2560019360ff8960181c16614518565b0195019161355c565b91948181613a4460019360ff8960101c16614518565b01950191613554565b91948181613a6360019360ff8960081c16614518565b0195019161354c565b91948181613a7f60019360ff8916614518565b01950191613544565b9395509596909193610400600191613ce98954613cdb60ff613aac85828516614518565b613abc88860182858d1c16614518565b613ace60408601828560101c16614518565b613c6d8c613c2587613bdd8c613b956060613af08186018a8d60181c16614518565b613b036080938a8d868901921c16614518565b888b61018060a097613b1c898201858560281c16614518565b613b4060c09b613b338d8401878760301c16614518565b8201858560381c16614518565b613b536101008201858560401c16614518565b613b666101208201858560481c16614518565b613b796101408201858560501c16614518565b613b8c6101608201858560581c16614518565b01921c16614518565b613ba86101a08c01888b60681c16614518565b613bbb6101c08c01888b60701c16614518565b613bce6101e08c01888b60781c16614518565b86896102008d01921c16614518565b613bf06102208a01868960881c16614518565b613c036102408a01868960901c16614518565b613c166102608a01868960981c16614518565b84876102808b01921c16614518565b613c386102a08801848760a81c16614518565b613c4b6102c08801848760b01c16614518565b613c5e6102e08801848760b81c16614518565b82856103008901921c16614518565b613c806103208601828560c81c16614518565b613c936103408601828560d01c16614518565b613ca66103608601828560d81c16614518565b613cb86103808601848e1c8316614518565b613ccb6103a08601828560e81c16614518565b6103c08501908360f01c16614518565b6103e083019060f81c614518565b019601910188969593918a9593613520565b82346101d857806003193601126101d857613d2160018060a01b03600154163314614a05565b602047604051908152f35b82346101d857806003193601126101d8576024602060018060a01b03613d5781600154163314614a05565b604051632fa8a91360e11b815230600482015292839182907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156106c5578291613dac575b602082604051908152f35b90506020813d602011613dda575b81613dc760209383614385565b810103126105e557602091505182613da1565b3d9150613dba565b82346101d85760203660031901126101d857600435613e0c60018060a01b03600154163314614a05565b670de0b6b3a764000090818102918183041490151715613e2c5760055580f35b634e487b7160e01b82526011600452602482fd5b82346101d857602090816003193601126101d8576004356001600160401b0381116105e557613e739036906004016143c1565b906040519180519284820193613e8a81838761443f565b81018186600a93838580955203019020015490613ea682614923565b94613eb08361498a565b93613eba84614923565b955b848110613eff57613ee4886107bd89613ef18d8b604051968796606088526060880190614408565b9186830390870152614487565b9083820360408501526144e4565b80613f5f60026109ac83888e8e613f4a8460ff613f4160019c8f8f888a92613f329260405193849283925192839161443f565b81018481520301902001614757565b505416926149f1565b52604051908180613f328d8d5192839161443f565b613f6982896149f1565b52613f7481886149f1565b5081613f9082878d604051908180613f328c8c5192839161443f565b500154613f9d828a6149f1565b5201613ebc565b82346101d85760403660031901126101d8576001600160401b03906004358281116105e557613fd79036906004016143c1565b916024359081116105e557613ff09036906004016143c1565b918192338352614085602094600786526004604086200190604051918261401a8982018093614640565b039261402e601f1994858101835282614385565b51902091604051928884018751946140508b82818c01986101c081878c61443f565b51902014801561427e575b156141c857505061406c60016146e7565b6102b08660405180936101c0885180928585019061443f565b835260098452604083209151156106d957600782019060ff8254935460081c16831015614189578051801561186957601810614148576140c481615191565b156140ee578361307b949560ff604051956140de8761430b565b16855284015260408301526147e5565b60405162461bcd60e51b815260048101869052602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526004810186905260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260048101869052601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b338752600788526141ee6104f76102b0600460408b20016040519283918d830190614640565b6142086040516102b08b828b516101c0818484018c61443f565b1490811591614233575b50614221575b61406c906146e7565b5061422b84614fdc565b506001614218565b61425c91506102b061057091338a5260078b52600560408b20016040519384918d830190614640565b6142766040516102b08a828a516101c0818484018b61443f565b141588614212565b5033875260078852600560408820016040516142a1816104f78c82018095614640565b519020604051898101906142bd8b828b516101c081878c61443f565b5190201461405b565b82346101d857806003193601126101d8576001546040516001600160a01b039091168152602090f35b8390346105e557816003193601126105e5576020906005548152f35b606081019081106001600160401b0382111761432657604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161432657604052565b604081019081106001600160401b0382111761432657604052565b602081019081106001600160401b0382111761432657604052565b90601f801991011681019081106001600160401b0382111761432657604052565b6001600160401b03811161432657601f01601f191660200190565b81601f820112156119ef578035906143d8826143a6565b926143e66040519485614385565b828452602083830101116119ef57816000926020809301838601378301015290565b90815180825260208080930193019160005b828110614428575050505090565b835160ff168552938101939281019260010161441a565b60005b8381106144525750506000910152565b8181015183820152602001614442565b9060209161447b8151809281855285808601910161443f565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106144b65750505050505090565b90919293949584806144d4600193601f198682030187528a51614462565b98019301930191949392906144a6565b90815180825260208080930193019160005b828110614504575050505090565b8351855293810193928101926001016144f6565b9060048210156145255752565b634e487b7160e01b600052602160045260246000fd5b90600182811c9216801561456b575b602083101461455557565b634e487b7160e01b600052602260045260246000fd5b91607f169161454a565b906040519182600082546145888161453b565b908184526020946001916001811690816000146145f857506001146145b9575b5050506145b792500383614385565b565b600090815285812095935091905b8183106145e05750506145b793508201013880806145a8565b855488840185015294850194879450918301916145c7565b925050506145b794925060ff191682840152151560051b8201013880806145a8565b602061463391816040519382858094519384920161443f565b8101600681520301902090565b60009291815461464f8161453b565b926001918083169081156146a9575060011461466c575b50505050565b9091929394506000526020906020600020906000915b8583106146985750505050019038808080614666565b805485840152918301918101614682565b60ff1916845250505081151590910201915038808080614666565b6020815191015190602081106146d8575090565b6000199060200360031b1b1690565b156146ee57565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b1561472657565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015614773576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b818110614794575050565b60008155600101614789565b9190601f81116147af57505050565b6145b7926000526020600020906020601f840160051c830193106147db575b601f0160051c0190614789565b90915081906147ce565b91908254600160401b8110156143265761480790600194600182018155614757565b6148f65760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b0383116143265761484e83611e7b865461453b565b602091601f841160011461489157505081906148829394956000926148865750508160011b916000199060031b1c19161790565b9055565b015190503880610d51565b600085815260208120601f1986169890949390925b8983106148df57505050836001959697106148c6575b505050811b019055565b015160001960f88460031b161c191690553880806148bc565b8385015186559485019493810193918101916148a6565b634e487b7160e01b600052600060045260246000fd5b6001600160401b0381116143265760051b60200190565b9061492d8261490c565b61493a6040519182614385565b828152809261494b601f199161490c565b0190602036910137565b604090604051916149658361430b565b600283528260005b82811061497957505050565b80606060208093850101520161496d565b906149948261490c565b6149a16040519182614385565b82815280926149b2601f199161490c565b019060005b8281106149c357505050565b8060606020809385010152016149b7565b8051156147735760200190565b8051600110156147735760400190565b80518210156147735760209160051b010190565b15614a0c57565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210614a74575050506145b792500383614385565b855484526001958601958895509381019390910190614a5e565b15614a9557565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b614af4815461453b565b9081614afe575050565b81601f60009311600114614b10575055565b908083918252614b2f601f60208420940160051c840160018501614789565b5555565b6000198114611f7d5760010190565b908154614b4e8161490c565b92614b5c6040519485614385565b818452600090815260208082208186015b848410614b7b575050505050565b6001838192614b8985614575565b815201920193019290614b6d565b3360003381526020906007825260409060ff8282205416600014614caf576001600160a01b03841681526007835281812090614bd1614955565b92614bde60048401614575565b614be7856149d4565b52614bf1846149d4565b50614bfe60058401614575565b614c07856149e1565b52614c11846149e1565b506003614c1c614955565b93805460018060b01b03198451818360a01b168a820152600a8152614c408161434f565b614c49886149d4565b52614c53876149d4565b5084519160501b1688820152600a8152614c6c8161434f565b614c75866149e1565b52614c7f856149e1565b50015494815195818701528552614c958561434f565b5190614ca08261436a565b81526001956001959493929190565b93916008815260ff8286205416600014614daf576001600160a01b038416855260088152818520614cde614955565b92614ceb60038301614575565b614cf4856149d4565b52614cfe846149d4565b50614d0b60048301614575565b614d14856149e1565b52614d1e846149e1565b50614d27614955565b9260018301549180519060018060801b031991828560801b168482015260108152614d518161434f565b614d5a876149d4565b52614d64866149d4565b505192169082015260108152614d798161434f565b614d82836149e1565b52614d8c826149e1565b506001959493614dac6005614da360028501614575565b95949301614b42565b90565b50809193925051614dbf8161436a565b8281528151614dcd8161436a565b8381528251614ddb8161436a565b84815284958533955190614dee8261436a565b815293929190565b15614dfd57565b60405162461bcd60e51b8152602060048201526008602482015267195c9c9bdc8e8ccd60c21b6044820152606490fd5b60ff1660ff8114611f7d5760010190565b15614e4557565b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b80548210156147735760005260206000200190600090565b8054600160401b81101561432657614ebf91600182018155614e8a565b819291549060031b91821b91600019901b1916179055565b919091805483101561477357600052601f60206000208360051c01921690565b90808214614fcb57614f09815461453b565b906001600160401b03821161432657614f2682612450855461453b565b600090601f8311600114614f6157614882929160009183614f565750508160011b916000199060031b1c19161790565b015490503880610d51565b815260208082208483528183209291601f1985169083905b828210614fb2575050908460019594939210614f9957505050811b019055565b015460001960f88460031b161c191690553880806148bc565b8495819295850154815560018091019601940190614f79565b5050565b8015611f7d576000190190565b604051614fe88161434f565b60019182825260208201602d60f81b815283846000905b61512e575b5061500e9061498a565b93600091600094826000905b6150a9575b505050508161503491615045949351916153b2565b61503e82856149f1565b52826149f1565b5080511561505a57615056906149d4565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b8551811015615129576001600160f81b0319806150c68389615180565b51169083511561477357845116146150e1575b83018361501a565b9593866150f191879493946153b2565b6150fb85896149f1565b5261510684886149f1565b5082860191828711611f7d578361511e819496614b33565b9791929350506150d9565b61501f565b835181101561517b576001600160f81b0319908161514c8287615180565b511686511561477357879285511614615168575b810190614fff565b916151738291614b33565b929050615160565b615004565b908151811015614773570160200190565b6000805b8251811015615264576151a88184615180565b51603060f891821c1015908161524b575b8115615215575b81156151db575b50156151d557600101615195565b50905090565b905060616151e98386615180565b51821c101590816151fc575b50386151c7565b607a915061520a8386615180565b51901c1115386151f5565b905060416152238386615180565b51821c101580615234575b906151c0565b50605a6152418386615180565b51821c111561522e565b905060396152598386615180565b51821c1115906151b9565b505050600190565b60005b81518110156152a657600160fd1b6001600160f81b03196152908385615180565b51161461529f5760010161526f565b5050600190565b5050600090565b6001600160a01b0316600090815260086020908152604080832060050180549491939192915b8581106152e557505050505050600090565b6152ef8183614e8a565b50855161530381610b098782018095614640565b51902085518481019086825285815261531b8161434f565b5190201461532b576001016152d3565b505050505050600190565b9060005b8254811015615368578161534e8285614e8a565b90549060031b1c146153625760010161533a565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b91908203918211611f7d57565b92918082111580615484575b15615443576153cd82826153a5565b916153d7836143a6565b926153e56040519485614385565b8084526153f4601f19916143a6565b01366020850137805b82811061540c57509193505050565b6001906001600160f81b03196154228289615180565b511661543c61543185846153a5565b9160001a9187615180565b53016153fd565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156153be56fea2646970667358221220a3d3ed0ae09c6f5ecf41a543b748a447a22ec60911d83624d7b490902d28ce0e64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3999,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "VotreXActivated",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4001,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "previousVotreXOwnerAddress",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4003,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "VotreXOwnerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4011,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "VotreXOwnerName",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4013,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "organizationsCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4015,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "VotreXUserCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4018,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "OrganizationPriceFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4023,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "organizationData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Organization)4091_storage)"
      },
      {
        "astId": 4028,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "admin",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(ElectionAdmins)4110_storage)"
      },
      {
        "astId": 4033,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "voters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Voter)4155_storage)"
      },
      {
        "astId": 4038,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "electionInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(ElectionDetail)4179_storage)"
      },
      {
        "astId": 4043,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "electionResults",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)4137_storage)"
      },
      {
        "astId": 4047,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "electionExistanceChecks",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4051,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "votersIDExists",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes16,t_bool)"
      },
      {
        "astId": 4055,
        "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
        "label": "registeredAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ElectionStatus)4060)dyn_storage": {
        "base": "t_enum(ElectionStatus)4060",
        "encoding": "dynamic_array",
        "label": "enum VotreXSystemA1.ElectionStatus[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CandidateDetail)4186_storage)dyn_storage": {
        "base": "t_struct(CandidateDetail)4186_storage",
        "encoding": "dynamic_array",
        "label": "struct VotreXSystemA1.CandidateDetail[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes10": {
        "encoding": "inplace",
        "label": "bytes10",
        "numberOfBytes": "10"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ElectionStatus)4060": {
        "encoding": "inplace",
        "label": "enum VotreXSystemA1.ElectionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OrganizationType)4063": {
        "encoding": "inplace",
        "label": "enum VotreXSystemA1.OrganizationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ElectionAdmins)4110_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotreXSystemA1.ElectionAdmins)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionAdmins)4110_storage"
      },
      "t_mapping(t_address,t_struct(Voter)4155_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VotreXSystemA1.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)4155_storage"
      },
      "t_mapping(t_bytes16,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(ElectionDetail)4179_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct VotreXSystemA1.ElectionDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionDetail)4179_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)4137_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VotreXSystemA1.ElectionResult)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionResult)4137_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Organization)4091_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct VotreXSystemA1.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)4091_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CandidateDetail)4186_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.CandidateDetail",
        "members": [
          {
            "astId": 4181,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidateID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4183,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidateVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4185,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidateName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElectionAdmins)4110_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.ElectionAdmins",
        "members": [
          {
            "astId": 4093,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4095,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "adminOrgCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4097,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "AdminVoterIDOrg1",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 4099,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "AdminVoterIDOrg2",
            "offset": 12,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 4101,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionAdminAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4103,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "nextOrgCreationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4105,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "adminName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 4107,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4109,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ElectionDetail)4179_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.ElectionDetail",
        "members": [
          {
            "astId": 4158,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ElectionStatus)4060"
          },
          {
            "astId": 4160,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidateList",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 4162,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "isFinished",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4164,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4166,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 4168,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4170,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4172,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "orgID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4174,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "totalParticipants",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4178,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidates",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(CandidateDetail)4186_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(ElectionResult)4137_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.ElectionResult",
        "members": [
          {
            "astId": 4112,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "isPruned",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4114,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "adminAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4116,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4118,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4120,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "totalVoter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4122,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionID",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 4124,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionName",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 4126,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "digitalSignature",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 4128,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "registeredOrganization",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 4130,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionWinner",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 4132,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "signedBy",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 4136,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "candidates",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_struct(CandidateDetail)4186_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Organization)4091_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.Organization",
        "members": [
          {
            "astId": 4066,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "orgType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrganizationType)4063"
          },
          {
            "astId": 4068,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionAdminAddresses",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4070,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "onPreparationElectionCounter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4072,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "activeElectionCounter",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4074,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "archivedElectionCounter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4076,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "totalMembers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4078,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "orgName",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 4080,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "orgID",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 4083,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionIDs",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4086,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "ElectionName",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4090,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "electionStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_enum(ElectionStatus)4060)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Voter)4155_storage": {
        "encoding": "inplace",
        "label": "struct VotreXSystemA1.Voter",
        "members": [
          {
            "astId": 4139,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4141,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "VoterAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4143,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "VoterIDOrg1",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 4145,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "VoterIDOrg2",
            "offset": 16,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 4147,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "VoterName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4149,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 4151,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 4154,
            "contract": "contracts/Ultimate_VotreXSystemRC2.sol:VotreXSystemA1",
            "label": "participatedElectionEvents",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xDAfe6A26D55C50A51b0583E82b2918Fa2841ec4F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "electionID",
          "type": "string"
        }
      ],
      "name": "ElectionReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "LogResetVoter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CheckTokenETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VotreXOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "adminOrgCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg1",
          "type": "bytes10"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg2",
          "type": "bytes10"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nextOrgCreationBlock",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "adminName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "electionInfo",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2B.ElectionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "candidateList",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "electionResults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPruned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "digitalSignature",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "registeredOrganization",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "electionWinner",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signedBy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isSingleWaveOrFinalStage",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "finishElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getAllCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "candidateID",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "candidateVoteCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            }
          ],
          "internalType": "struct TestCompleXA2B.CandidateDetail[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionID",
          "type": "string"
        }
      ],
      "name": "getCandidateResult",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "candidateID",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateName",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candidateVoteCount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getElectionInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCandidates",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "candidateIDs",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "enum TestCompleXA2B.ElectionStatus",
          "name": "statusElection",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "name": "getElectionListInOrg",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum TestCompleXA2B.ElectionStatus[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "getOrgIDHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "registeredOrgList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "voterIDList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "participatedElectionEvents",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVotreXActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "organizationData",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2B.OrganizationType",
          "name": "orgType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddresses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "onPreparationElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "archivedElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMembers",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orgName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adminName",
          "type": "string"
        },
        {
          "internalType": "enum TestCompleXA2B.OrganizationType",
          "name": "_orgType",
          "type": "uint8"
        }
      ],
      "name": "registerOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "uniqueVoterID",
          "type": "bytes32"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "VoterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg1",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg2",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "VoterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52f823545483b092ede5c4baee54ef7fd05e5d7247d42d75ef6d0ed802719957",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0xDAfe6A26D55C50A51b0583E82b2918Fa2841ec4F",
    "transactionIndex": 1,
    "gasUsed": "4593773",
    "logsBloom": "0x
    "blockHash": "0x78636ded16794b32cf88ce5387a40ce1721df71f02435766b3316b1295282867",
    "transactionHash": "0x52f823545483b092ede5c4baee54ef7fd05e5d7247d42d75ef6d0ed802719957",
    "logs": [],
    "blockNumber": 14521498,
    "cumulativeGasUsed": "4794032",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "465a4a06889c7af7ef0af95c592f7926",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"electionID\",\"type\":\"string\"}],\"name\":\"ElectionReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogResetVoter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CheckTokenETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotreXOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"adminOrgCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg1\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg2\",\"type\":\"bytes10\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextOrgCreationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"adminName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_electionName\",\"type\":\"string\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"electionInfo\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2B.ElectionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"candidateList\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPruned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"digitalSignature\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"registeredOrganization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionWinner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signedBy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSingleWaveOrFinalStage\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"finishElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getAllCandidates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"}],\"internalType\":\"struct TestCompleXA2B.CandidateDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_electionID\",\"type\":\"string\"}],\"name\":\"getCandidateResult\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"candidateID\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateName\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candidateVoteCount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getElectionInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"electionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCandidates\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"candidateIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"enum TestCompleXA2B.ElectionStatus\",\"name\":\"statusElection\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"name\":\"getElectionListInOrg\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum TestCompleXA2B.ElectionStatus[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"getOrgIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"registeredOrgList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"voterIDList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"participatedElectionEvents\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotreXActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"organizationData\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2B.OrganizationType\",\"name\":\"orgType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"onPreparationElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"archivedElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMembers\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orgName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adminName\",\"type\":\"string\"},{\"internalType\":\"enum TestCompleXA2B.OrganizationType\",\"name\":\"_orgType\",\"type\":\"uint8\"}],\"name\":\"registerOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_voterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueVoterID\",\"type\":\"bytes32\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"VoterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg1\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg2\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"VoterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ultimate_VotreXSystemRC2B.sol\":\"TestCompleXA2B\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/Ultimate_VotreXSystemRC2B.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma abicoder v2;\\npragma solidity ^0.8.24;\\n\\nimport \\\"./UtilityLibrary.sol\\\";\\n\\ncontract TestCompleXA2B{\\n\\n    using UtilityLibrary for *;\\n\\n    constructor(){\\n        VotreXOwnerAddress = msg.sender;\\n        VotreXActivated = true;\\n    }\\n    bool private VotreXActivated;\\n    address private previousVotreXOwnerAddress;\\n    address private VotreXOwnerAddress;\\n    bytes32 public VotreXOwnerName = keccak256(abi.encodePacked(\\\"ATom\\\"));\\n    uint256 private organizationsCounter;\\n    uint256 private VotreXUserCounter;\\n    // uint256 private OrganizationPriceFee = 20 ether;\\n    \\n    mapping(string  => Organization) public organizationData;\\n    mapping(address => ElectionAdmins) public admin;\\n    mapping(address => Voter) public voters;\\n    mapping(bytes32 => ElectionDetail) public electionInfo;\\n    mapping(string  => ElectionResult) public electionResults;\\n    mapping(bytes32 => mapping(address => bool)) public hasVoted;\\n    mapping(bytes32 => bool) private electionExistanceChecks;\\n    mapping(bytes16 => bool) private votersIDExists;\\n    mapping(bytes32 => address[]) private votersList;\\n    mapping(address => bool) private registeredAdmin;\\n    mapping(string => bool) private registeredCandidate;\\n    string[] private candidateList;\\n\\n    enum ElectionStatus {\\n        Preparation,\\n        Scheduled,\\n        Started,\\n        Finished\\n    }\\n\\n    enum OrganizationType {\\n        Organization,\\n        Corporate\\n    }\\n\\n    struct Organization {\\n        OrganizationType orgType;\\n        address electionAdminAddresses;\\n        uint256 onPreparationElectionCounter;\\n        uint256 activeElectionCounter;\\n        uint256 archivedElectionCounter;\\n        uint256 totalMembers;\\n        bytes32 orgName;\\n        string orgID;\\n        bytes32[] electionIDs;\\n        bytes32[] ElectionName;\\n        ElectionStatus[] electionStatus;\\n    }\\n\\n    struct ElectionAdmins {\\n        bool isRegistered;\\n        uint8 adminOrgCount;\\n        bytes10 AdminVoterIDOrg1;\\n        bytes10 AdminVoterIDOrg2;\\n        address electionAdminAddress;\\n        uint256 nextOrgCreationBlock;\\n        bytes32 adminName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n    }\\n\\n    struct ElectionResult {\\n        bool isPruned;\\n        address adminAddress;\\n        uint256 waveNumber;\\n        uint startTime;\\n        uint endTime;\\n        uint totalVoter;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        bytes32 digitalSignature;\\n        string registeredOrganization;\\n        string electionWinner;\\n        string signedBy;\\n        CandidateDetail[] candidates;\\n    }\\n    \\n    struct Voter{\\n        bool isRegistered;\\n        address VoterAddress;\\n        bytes16 VoterIDOrg1;\\n        bytes16 VoterIDOrg2;\\n        string VoterName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n        string[] participatedElectionEvents;\\n    }\\n\\n    struct ElectionDetail{\\n        ElectionStatus status;\\n        uint8 candidateList;\\n        bool isFinished;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        uint startTime;\\n        uint endTime;\\n        string orgID;\\n        uint256 totalParticipants;\\n        uint256 waveNumber;\\n        CandidateDetail[] candidates;\\n    }\\n\\n    struct CandidateDetail{\\n        uint8 candidateID;\\n        uint256 candidateVoteCount;\\n        string candidateName;\\n    }\\n\\n    modifier onlyOrgAdmin(string memory _IDParameters) {\\n        bool isAdminRegisteredForOrg = false;\\n        if (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n            ||\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n        ) {\\n            isAdminRegisteredForOrg = true;\\n        } else if (\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n            ||\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n        ) {\\n            string memory orgID = UtilityLibrary.extractOrgId(_IDParameters);\\n            isAdminRegisteredForOrg = true;\\n\\n        }\\n\\n        require(\\n            isAdminRegisteredForOrg,\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedMember(string memory _userElectionID) {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        bool isAdminRegisteredForOrg = (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        bool isVoterRegisteredForOrg = (\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        require(\\n            isAdminRegisteredForOrg || isVoterRegisteredForOrg,\\n            // error 31a = Incorrect access control\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canCreateOrg() {\\n        require(\\n            block.number >= admin[msg.sender].nextOrgCreationBlock,\\n            // error 32 = error Block await for 2nd Admin Org Registration\\n            \\\"error:32\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVotreXOwner() {\\n        require(\\n            msg.sender == VotreXOwnerAddress,\\n            // error 31b = errror Owner access\\n            \\\"error:31b\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhenActivated() {\\n        require(\\n            VotreXActivated == true,\\n            // error 33 = error system still disabled\\n            \\\"error:33\\\"\\n        );\\n        _;\\n    }\\n\\n    function CheckTokenETHBalance () external view onlyVotreXOwner returns (uint256) {\\n        return (address(this).balance);\\n    }\\n\\n    function changeSystemState() external onlyVotreXOwner{\\n        if (VotreXActivated == false) {\\n            VotreXActivated = true;\\n        } else {\\n            VotreXActivated = false;\\n        }\\n    }\\n\\n    // function setOrgPriceFee(uint256 _PriceinEther) external onlyVotreXOwner {\\n    //     OrganizationPriceFee = _PriceinEther * 1 ether;\\n    // }\\n\\n    // receive() external payable {\\n\\n    // }\\n\\n    function registerOrganization(\\n        string memory _orgName,\\n        string memory _orgID,\\n        string memory _adminName,\\n        OrganizationType _orgType\\n    )\\n        external\\n        canCreateOrg\\n        onlyWhenActivated\\n    {\\n        ElectionAdmins storage AdminInfo = admin[msg.sender];\\n\\n        // require(\\n        //     msg.value == OrganizationPriceFee,\\n        //     // error 34 = error wrong ether value being sent\\n        //     \\\"error:34\\\"\\n        // );\\n\\n        require(\\n            organizationsCounter < 32000,\\n            // error 35 = error limit reached\\n            \\\"error:35\\\"\\n        );\\n\\n        require(\\n            bytes32(organizationData[_orgID].orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].electionAdminAddresses == address(0),\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            UtilityLibrary.onlyAlphanumericCharacters(_orgID),\\n            // error36b = Only Alpha Numeric character allowed\\n            \\\"error:36b\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length < 32,\\n            // error 36c = error character length limit\\n\\n            \\\"error:36c\\\"\\n        );\\n\\n        require(\\n            bytes(_adminName).length > 1\\n        );\\n\\n        require(\\n            bytes(_orgID).length == 3\\n            ||\\n            bytes(_orgID).length == 4\\n            ||\\n            bytes(_orgID).length == 5,\\n            \\\"Org ID should 3 - 5 characters\\\"\\n        );\\n\\n        require(\\n            !UtilityLibrary.containsWhitespaceCheck(_orgID),\\n            \\\"spaces in Org ID not allowed\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID)),\\n            \\\"Admin is registered\\\"\\n        );\\n\\n        Organization storage newOrg = organizationData[_orgID];\\n        newOrg.orgID = _orgID;\\n        newOrg.orgName = bytes32(abi.encodePacked(_orgName));\\n        newOrg.orgType = _orgType;\\n        newOrg.electionAdminAddresses = msg.sender;\\n        newOrg.activeElectionCounter = 0;\\n        newOrg.totalMembers = 1;\\n\\n        bytes10 UniqueAdminvoterID = bytes10(abi.encodePacked(_orgID, \\\"-\\\", \\\"Admin\\\"));\\n\\n        if (bytes(admin[msg.sender].RegisteredOrgID1).length == 0) {\\n            admin[msg.sender].RegisteredOrgID1 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg1 = UniqueAdminvoterID;\\n        } else if (bytes(admin[msg.sender].RegisteredOrgID2).length == 0) {\\n            admin[msg.sender].RegisteredOrgID2 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg2 = UniqueAdminvoterID;\\n        }\\n\\n        AdminInfo.electionAdminAddress = msg.sender;\\n        AdminInfo.adminName = bytes32(abi.encodePacked(_adminName));\\n        AdminInfo.isRegistered = true;\\n        ++AdminInfo.adminOrgCount;\\n\\n        registeredAdmin[msg.sender] = true;\\n        votersIDExists[UniqueAdminvoterID] = true;\\n\\n        AdminInfo.nextOrgCreationBlock = 50 + block.number;\\n\\n        ++organizationsCounter;\\n        ++VotreXUserCounter;\\n    }\\n\\n    \\n\\n    function registerVoter(\\n        string memory _voterName,\\n        string memory _orgID,\\n        bytes32 uniqueVoterID\\n    )\\n        external\\n        onlyWhenActivated\\n    {\\n        // require(\\n        //     msg.value == (OrganizationPriceFee/2)\\n        // );\\n\\n        Voter storage voter = voters[msg.sender];\\n        // string memory uniqueVoterID = generateUniqueVoterID(_orgID);\\n        bytes16 VoterID16 = bytes16(abi.encodePacked(uniqueVoterID));\\n        // bytes32 orgIDs = keccak256(abi.encodePacked(_orgID));\\n\\n        require(\\n            organizationData[_orgID].totalMembers < 5000,\\n            \\\"Maximum member limit reached\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length > 1,\\n            \\\"Please fill Voter Name\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length < 24,\\n            \\\"Voter name limit is 24 characters\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            !registeredAdmin[msg.sender],\\n            \\\"Voter is registered in Org\\\"\\n        );\\n\\n        require(\\n            ElectionActiveCheck(_orgID) < 1,\\n            \\\"Election in progress!\\\"\\n        );\\n\\n        require(\\n            bytes16(uniqueVoterID).length > 0\\n        );\\n\\n        require(\\n            bytes(organizationData[_orgID].orgID).length != 0,\\n            \\\"Organization does not exist\\\"\\n        );\\n\\n        if (bytes(voter.RegisteredOrgID1).length == 0) {\\n            voter.RegisteredOrgID1 = _orgID;\\n            voter.VoterIDOrg1 = VoterID16;\\n        } else if (bytes(voter.RegisteredOrgID2).length == 0) {\\n            voter.RegisteredOrgID2 = _orgID;\\n            voter.VoterIDOrg2 = VoterID16;\\n        }\\n\\n        voter.VoterAddress = msg.sender;\\n        voter.VoterName = _voterName;\\n        voter.participatedElectionEvents = new string[](0);\\n        voter.isRegistered = true;\\n        votersIDExists[VoterID16] = true;\\n        ++VotreXUserCounter;\\n        ++organizationData[_orgID].totalMembers;\\n    }\\n\\n    function createElection(\\n        string memory _orgID,\\n        string memory _userElectionID,\\n        string memory _electionName\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyOrgAdmin(_orgID)\\n    {\\n        require(\\n            bytes(organizationData[_orgID].orgID).length > 0\\n        );\\n\\n        require(\\n            bytes(_userElectionID).length > 1,\\n            // error 36a = error incorrect null value\\n            \\\"error 36a\\\"\\n        \\n        );\\n\\n        require(\\n            bytes(_userElectionID).length < 5,\\n            \\\"ID should < 5 characters\\\"\\n        );\\n\\n        require(\\n            bytes(_electionName).length > 1\\n        );\\n\\n        require(\\n            bytes(_electionName).length < 25,\\n            \\\"Election name should < 25\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].activeElectionCounter < 10,\\n            \\\"Maximum events reached\\\"\\n        );\\n\\n        bytes32 generatedElectionID = bytes32(abi.encodePacked(_orgID, \\\"-\\\", _userElectionID));\\n        ElectionDetail storage newElection = electionInfo[generatedElectionID];\\n\\n        require(\\n            !electionExistanceChecks[generatedElectionID],\\n            \\\"Election ID exists\\\"\\n        );\\n\\n        newElection.orgID = _orgID;\\n        newElection.electionID = generatedElectionID;\\n        newElection.electionName = bytes32(abi.encodePacked(_electionName));\\n        newElection.candidateList = 0;\\n        newElection.status = ElectionStatus.Preparation;\\n        electionExistanceChecks[generatedElectionID] = true;\\n        organizationData[_orgID].electionIDs.push(generatedElectionID);\\n        organizationData[_orgID].ElectionName.push(bytes32(abi.encodePacked(_electionName)));\\n        organizationData[_orgID].electionStatus.push(ElectionStatus.Preparation);\\n        ++organizationData[_orgID].onPreparationElectionCounter;\\n    }\\n\\n    function startElection(string memory _userElectionID) external onlyOrgAdmin(_userElectionID){\\n        // error 36a = error incorrect null value\\n        require(bytes(_userElectionID).length > 0, \\\"error:36a\\\");\\n\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(bytes16(election.electionID).length > 0, \\\"Invalid election ID\\\");\\n        require(election.status == ElectionStatus.Preparation, \\\"Election is not in preparation\\\");\\n\\n        election.startTime = 5 + block.timestamp;\\n        election.status = ElectionStatus.Started;\\n        ++election.waveNumber;\\n        ++organizationData[orgIDs].activeElectionCounter;\\n        --organizationData[orgIDs].onPreparationElectionCounter;\\n        uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, userElectionID);\\n        require(index < organizationData[orgIDs].electionIDs.length, \\\"Election not found\\\");\\n        organizationData[orgIDs].electionStatus[index] = ElectionStatus.Started;\\n    }\\n\\n    function findElectionIndex(bytes32[] storage array, bytes32 electionID) internal view returns (uint256) {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == electionID) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Election ID not found\\\");\\n    }\\n\\n    function finishElection(\\n        string memory _userElectionID,\\n        bytes32 _dataHash,\\n        bool isSingleWaveOrFinalStage,\\n        uint256 threshold\\n    ) external onlyOrgAdmin(_userElectionID) {\\n        bytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n        bytes32 electionIdBytes = keccak256(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage elections = electionInfo[packedElectionID];\\n        string memory adminName = getAdminName(msg.sender);\\n\\n        require(\\n            bytes(_userElectionID).length > 0,\\n            \\\"Invalid election ID\\\"\\n        );\\n\\n        require(_dataHash.length > 0, \\\"Invalid data hash\\\");\\n\\n        require(\\n            elections.totalParticipants > calculateValidElection(_userElectionID),\\n            \\\"need 50% total member to finish\\\"\\n        );\\n\\n        require(!elections.isFinished, \\\"Election finished\\\");\\n        \\n        require(\\n            elections.status == ElectionStatus.Started,\\n            \\\"Election is not started\\\"\\n        );\\n\\n        if (isSingleWaveOrFinalStage == true)\\n        {\\n            // Kondisi jika hanya 2 kandidat tersisa\\n            require(elections.candidates.length == 2, \\\"Single-wave requires exactly 2 candidates\\\");\\n            string memory electionWinner = determineWinner(_userElectionID);\\n            elections.endTime = 10 + block.timestamp;\\n            elections.status = ElectionStatus.Finished;\\n            elections.isFinished = true;\\n\\n            ElectionResult storage newelectionResult = electionResults[_userElectionID];\\n            newelectionResult.isPruned = true;\\n            newelectionResult.totalVoter = elections.totalParticipants;\\n            newelectionResult.adminAddress = msg.sender;\\n            newelectionResult.startTime = elections.startTime;\\n            newelectionResult.endTime = elections.endTime;\\n            newelectionResult.digitalSignature = _dataHash;\\n            newelectionResult.registeredOrganization = elections.orgID;\\n            newelectionResult.electionID = packedElectionID;\\n            newelectionResult.waveNumber = elections.waveNumber;\\n            newelectionResult.electionName = elections.electionName;\\n            newelectionResult.electionWinner = electionWinner;\\n            newelectionResult.signedBy = adminName;\\n\\n            for (uint i = 0; i < elections.candidates.length; i++) {\\n                CandidateDetail memory candidate = elections.candidates[i];\\n                newelectionResult.candidates.push(\\n                    CandidateDetail({\\n                        candidateID: candidate.candidateID,\\n                        candidateName: candidate.candidateName,\\n                        candidateVoteCount: candidate.candidateVoteCount\\n                    })\\n                );\\n            }\\n            \\n            delete electionInfo[packedElectionID];\\n            uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, packedElectionID);\\n            organizationData[orgIDs].electionStatus[index] = ElectionStatus.Finished;\\n            ++organizationData[orgIDs].archivedElectionCounter;\\n            --organizationData[orgIDs].activeElectionCounter;\\n        } else {\\n            // Kondisi jika kandidat lebih dari 2, reset kandidat\\n            require(elections.candidates.length > 2, \\\"More than 2 candidates required\\\");\\n\\n            for (uint256 i = 0; i < elections.candidates.length; ) {\\n                if (elections.candidates[i].candidateVoteCount < threshold) {\\n                    elections.candidates[i] = elections.candidates[elections.candidates.length - 1];\\n                    elections.candidates.pop(); // Hapus kandidat terakhir\\n                    elections.totalParticipants = 0;\\n                } else {\\n                    ++i;\\n                }\\n            }\\n\\n            // Reset suara kandidat yang tersisa\\n            for (uint256 i = 0; i < elections.candidates.length; i++) {\\n                elections.candidates[i].candidateVoteCount = 0;\\n            }\\n\\n            // Reset status hasVoted untuk semua peserta\\n            address[] storage voter = votersList[electionIdBytes];\\n            require(voter.length > 0, \\\"No voters to reset\\\");\\n\\n            for (uint256 i = 0; i < voter.length; i++) {\\n                hasVoted[electionIdBytes][voter[i]] = false;\\n            }\\n\\n            // Debugging log untuk memastikan reset berjalan\\n            for (uint256 i = 0; i < voter.length; i++) {\\n                bool status = hasVoted[electionIdBytes][voter[i]];\\n                emit LogResetVoter(voter[i], status); // Emit event untuk debugging\\n            }\\n\\n            // Hapus daftar voters untuk tahap berikutnya\\n            delete votersList[electionIdBytes];\\n            ++elections.waveNumber;\\n            elections.isFinished = false;\\n\\n            emit ElectionReset(_userElectionID);\\n        }\\n\\n    }\\n\\n    // Event untuk menginformasikan frontend tentang reset pemilihan\\n    event ElectionReset(string electionID);\\n    event LogResetVoter(address voter, bool status);\\n\\n\\n    function calculateValidElection(string memory _userElectionID)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n        Organization storage OrgData = organizationData[orgID];\\n        uint256 MIN_VOTES_PERCENTAGE = 1 + (OrgData.totalMembers / 2);\\n\\n        return MIN_VOTES_PERCENTAGE;\\n    }\\n\\n\\n    function getOwnerAddress() external view returns (address) {\\n        return VotreXOwnerAddress;\\n    }\\n\\n    function getOwnerName() external view returns (bytes32) {\\n        return VotreXOwnerName;\\n    }\\n\\n    function getTotalUser() external view returns (uint256) {\\n        return VotreXUserCounter;\\n    }\\n\\n    function getElectionListInOrg(string memory orgID)\\n        public\\n        view\\n        returns (bytes32[] memory, bytes32[] memory, ElectionStatus[] memory)\\n    {\\n        Organization storage org = organizationData[orgID];\\n        return (org.electionIDs, org.ElectionName, org.electionStatus);\\n    }\\n\\n    function getAdminName(address adminAddress) private view returns (string memory) {\\n        return string(abi.encodePacked(admin[adminAddress].adminName));\\n    }\\n\\n\\n    function vote(\\n        string memory _userElectionID,\\n        string memory _candidateName\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyAuthorizedMember(_userElectionID)\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        uint8 candidateIDs = uint8(election.candidates.length);\\n        bytes32 electionIdBytes = keccak256(abi.encodePacked(_userElectionID));\\n\\n        // Pastikan nama kandidat tidak kosong\\n        require(bytes(_candidateName).length > 0, \\\"Candidate name cannot be empty!\\\");\\n        require(!hasVoted[electionIdBytes][msg.sender], \\\"Anda sudah memilih!\\\");\\n        require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\n\\n\\n        bool candidateExists = false;\\n\\n        // Loop melalui array kandidat untuk mencari nama yang cocok\\n        for (uint256 i = 0; i < election.candidates.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(election.candidates[i].candidateName))\\n                ==\\n                keccak256(abi.encodePacked(_candidateName))) {\\n                // Jika kandidat ditemukan, tambahkan voteCount\\n                election.candidates[i].candidateVoteCount += 1;\\n                candidateExists = true;\\n                break;\\n                }\\n        }\\n\\n        // Jika kandidat belum ada, tambahkan kandidat baru ke array\\n        if (!candidateExists) {\\n            CandidateDetail memory newCandidate = CandidateDetail({\\n                candidateID: candidateIDs,\\n                candidateName: _candidateName,\\n                candidateVoteCount: 1\\n            });\\n            election.candidates.push(newCandidate);\\n        }\\n        hasVoted[electionIdBytes][msg.sender] = true;\\n        votersList[electionIdBytes].push(msg.sender);\\n        ++election.totalParticipants;\\n    }\\n\\n    function getAllCandidates(string memory _userElectionID) public view returns (CandidateDetail[] memory) {\\n        \\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        // Ambil detail pemilu berdasarkan ID\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n\\n        // Pastikan ada kandidat dalam pemilu\\n        require(election.candidates.length > 0, \\\"No candidates found in this election!\\\");\\n\\n        // Kembalikan array kandidat dari pemilu\\n        return election.candidates;\\n    }\\n\\n    function isVotreXActivated() external onlyVotreXOwner view returns (bool) {\\n        return VotreXActivated;\\n    }\\n\\n    function getTotalOrganization() external virtual view returns (uint256) {\\n        return organizationsCounter;\\n    }\\n\\n    function getElectionInfo(string memory _userElectionID)\\n        external\\n        view\\n        returns(\\n            bytes32 electionID,\\n            string memory electionName,\\n            uint256 waveNumber,\\n            uint256 totalCandidates,\\n            uint8[] memory candidateIDs, // Added\\n            string[] memory candidateNames,\\n            uint256[] memory voteCounts,\\n            uint256 totalParticipants,\\n            ElectionStatus statusElection\\n        )\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(\\n            bytes32(election.electionID).length > 0\\n        );\\n\\n        electionID = election.electionID;\\n        electionName = string(abi.encodePacked(election.electionName));\\n        waveNumber = election.waveNumber;\\n        totalCandidates = election.candidates.length;\\n        candidateIDs = new uint8[](totalCandidates); // Initialized\\n        candidateNames = new string[](totalCandidates);\\n        voteCounts = new uint256[](totalCandidates);\\n        totalParticipants = election.totalParticipants;\\n        statusElection = electionInfo[userElectionID].status;\\n\\n        for (uint256 i = 0; i < totalCandidates; ++i) {\\n            candidateIDs[i] = election.candidates[i].candidateID; // Added\\n            candidateNames[i] = election.candidates[i].candidateName;\\n            voteCounts[i] = election.candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            electionID,\\n            electionName,\\n            waveNumber,\\n            totalCandidates,\\n            candidateIDs,\\n            candidateNames,\\n            voteCounts,\\n            totalParticipants,\\n            statusElection\\n        );\\n    }\\n\\n    function getCandidateResult(string memory _electionID) \\n        public \\n        view \\n        returns (\\n            uint8[] memory candidateID,\\n            string[] memory candidateName,\\n            uint256[] memory candidateVoteCount\\n        ) \\n    {\\n\\n        uint totalCandidates = electionResults[_electionID].candidates.length;\\n\\n        uint8[] memory candidateIDs = new uint8[](totalCandidates);\\n        string[] memory candidateNames = new string[](totalCandidates);\\n        uint256[] memory candidateVoteCounts = new uint256[](totalCandidates);\\n\\n        for (uint i = 0; i < totalCandidates; i++) {\\n            candidateIDs[i] = electionResults[_electionID].candidates[i].candidateID;\\n            candidateNames[i] = electionResults[_electionID].candidates[i].candidateName;\\n            candidateVoteCounts[i] = electionResults[_electionID].candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            candidateIDs,\\n            candidateNames,\\n            candidateVoteCounts\\n        );\\n    }\\n\\n    function getUserInfo() external view returns (\\n        bool isRegistered,\\n        bool isAdmin,\\n        address userAddress,\\n        string memory userName,\\n        string[] memory registeredOrgList,\\n        string[] memory voterIDList,\\n        string[] memory participatedElectionEvents\\n    ) {\\n        userAddress = msg.sender;\\n\\n        if (admin[userAddress].isRegistered) {\\n            ElectionAdmins storage adminInfo = admin[userAddress];\\n            \\n            string[] memory VoterRegisteredOrgList = new string[](2);\\n            VoterRegisteredOrgList[0] = adminInfo.RegisteredOrgID1;\\n            VoterRegisteredOrgList[1] = adminInfo.RegisteredOrgID2;\\n\\n            string[] memory VoterIDList = new string[](2);\\n            VoterIDList[0] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg1));\\n            VoterIDList[1] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg2));\\n\\n            return (\\n                true,\\n                true,\\n                userAddress,\\n                string(abi.encodePacked(adminInfo.adminName)),\\n                VoterRegisteredOrgList,\\n                VoterIDList,\\n                new string[](0)\\n            );\\n\\n        } else if (voters[userAddress].isRegistered) {\\n            Voter storage voter = voters[userAddress];\\n\\n            string[] memory RegisteredOrgIDList = new string[](2);\\n            RegisteredOrgIDList[0] = voter.RegisteredOrgID1;\\n            RegisteredOrgIDList[1] = voter.RegisteredOrgID2;\\n\\n            string[] memory RegisteredVoterIDList = new string[](2);\\n            RegisteredVoterIDList[0] = string(abi.encodePacked(voter.VoterIDOrg1));\\n            RegisteredVoterIDList[1] = string(abi.encodePacked(voter.VoterIDOrg2));\\n            return (\\n                true,\\n                false,\\n                userAddress,\\n                voter.VoterName,\\n                RegisteredOrgIDList,\\n                RegisteredVoterIDList,\\n                voter.participatedElectionEvents\\n            );\\n        } else {\\n            return (\\n                false,\\n                false,\\n                userAddress,\\n                \\\"\\\",\\n                new string[](0),\\n                new string[](0),\\n                new string[](0)\\n            );\\n        }\\n    }\\n\\n    function ElectionActiveCheck(string memory _orgID) private view returns (uint256) {\\n\\n        return organizationData[_orgID].activeElectionCounter;\\n    \\n    }\\n\\n    function hasParticipatedInElection(\\n        address voterAddress,\\n        bytes32 electionName\\n    )\\n        private\\n        view\\n        returns (bool)\\n    {\\n        Voter storage voter = voters[voterAddress];\\n        for (uint i = 0; i < voter.participatedElectionEvents.length; ++i) {\\n            if (\\n                keccak256(abi.encodePacked(voter.participatedElectionEvents[i]))\\n                ==\\n                keccak256(abi.encodePacked(electionName))\\n            ) {\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n\\n    function determineWinner(string memory _userElectionID) private view returns (string memory) {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        string memory winner = \\\"\\\";\\n        uint256 maxVotes = 0;\\n        for (uint8 i = 0; i < election.candidates.length; ++i) {\\n            if (election.candidates[i].candidateVoteCount > maxVotes) {\\n                maxVotes = election.candidates[i].candidateVoteCount;\\n                winner = election.candidates[i].candidateName;\\n            }\\n        }\\n\\n        return winner;\\n    }\\n    \\n    // function generateUniqueVoterID(string memory _orgID) public view returns (string memory) {\\n    //     uint256 CurrentID = organizationData[_orgID].totalMembers;\\n    //     uint256 nextID = ++CurrentID;\\n\\n    //     return string(abi.encodePacked(_orgID, \\\"-\\\", UtilityLibrary.uint2str(nextID)));\\n    // }\\n\\n    function getOrgIDHash(string memory _orgID) external pure returns (bytes32) {\\n        bytes32 orgIDHash = keccak256(abi.encodePacked(_orgID));\\n\\n        return (orgIDHash);\\n    }\\n}\\n\",\"keccak256\":\"0x720280bd2697a539ac718f9e6eda33d6c314ebe7e6e238eb085eee6289c81c8d\",\"license\":\"MIT\"},\"contracts/UtilityLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.7.0;\\n\\nlibrary UtilityLibrary{\\n\\n    function extractOrgId(string memory _userElectionID) internal pure returns (string memory) {\\n        string[] memory parts = UtilityLibrary.splitString(_userElectionID, \\\"-\\\");\\n        require(parts.length > 0, \\\"Invalid custom election ID format\\\");\\n\\n        return parts[0];\\n    }\\n\\n    function decodeBytes10(bytes10 data) internal pure returns (string memory) {\\n        string memory decodedString = new string(10);\\n        \\n        assembly {\\n            mstore(add(decodedString, 32), data)\\n        }\\n\\n        return decodedString;\\n    }\\n    \\n    function arrayContains(string[] storage array, string memory element) internal view returns (bool) {\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            if (keccak256(abi.encodePacked(array[i])) == keccak256(abi.encodePacked(element))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    function onlyAlphanumericCharacters(string memory _input) internal pure returns (bool) {\\n        bytes memory b = bytes(_input);\\n        for (uint i = 0; i < b.length; ++i) {\\n            if (\\n                !((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\n                (uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\n                (uint8(b[i]) >= 97 && uint8(b[i]) <= 122))|| // a-z\\n                uint8(b[i]) == 32 // Space\\n            ){ \\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function appendToStringArray(string[] memory array, string memory newValue) internal pure returns (string[] memory) {\\n        string[] memory newArray = new string[](array.length + 1);\\n        \\n        for (uint32 i = 0; i < array.length; ++i) {\\n            newArray[i] = array[i];\\n        }\\n        \\n        newArray[array.length] = newValue;\\n        \\n        return newArray;\\n    }\\n\\n    function containsWhitespaceCheck(string memory _str) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(_str);\\n\\n        for (uint256 i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == \\\" \\\") {\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n\\n\\n    function uintToString(uint48 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint48 temp = value;\\n        uint48 length;\\n        while (temp != 0) {\\n            length++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(length);\\n        uint48 i = length - 1;\\n        while (value != 0) {\\n            buffer[i] = bytes1(uint8(48 + value % 10));\\n            value /= 10;\\n            i--;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\\n    }\\n\\n    function splitString(string memory str, string memory delimiter) internal pure returns (string[] memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory delimiterBytes = bytes(delimiter);\\n\\n        uint delimiterCount = 1;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                ++delimiterCount;\\n            }\\n        }\\n\\n        string[] memory parts = new string[](delimiterCount);\\n\\n        uint partStart = 0;\\n        uint partIndex = 0;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                parts[partIndex] = substring(str, partStart, i);\\n                partStart = i + 1;\\n                partIndex++;\\n            }\\n        }\\n\\n        // Add the last part\\n        parts[partIndex] = substring(str, partStart, strBytes.length);\\n\\n        return parts;\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        require(startIndex <= endIndex && endIndex <= strBytes.length, \\\"Invalid substring indices\\\");\\n\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; ++i) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n\\n        return string(result);\\n    }\\n\\n    function extractOrgIdFromElectionId(string memory _userElectionID) internal pure returns (string memory) {\\n        bytes memory orgIdBytes = bytes(_userElectionID);\\n\\n        // Split the input string at the hyphen ('-')\\n        uint8 i = 0;\\n        while (i < orgIdBytes.length && orgIdBytes[i] != '-'){  // ASCII code for hyphen '-'\\n            ++i;\\n        }\\n\\n        // If a hyphen is found, extract the organization ID\\n        if (i < orgIdBytes.length) {\\n            bytes memory extractedBytes = new bytes(i);\\n            for (uint8 j = 0; j < i; ++j) {\\n                extractedBytes[j] = orgIdBytes[j];\\n            }\\n            return string(extractedBytes);\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(bytes(_a), bytes(_b)));\\n    }\\n\\n\\n}\",\"keccak256\":\"0x642efa53e2a87ce097adff9442b17054aa487cde8598026d6663f40fa27f3029\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034607a576341546f6d60e01b602082019081526004825260408201916001600160401b038311818410176064576040839052519020600255600180546001600160a01b031916331781556000805460ff191690911790556150e090816100808239f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd14613fdf57508063145ef6e914610e78578063162442e214613e575780631df3739a14613e265780632c2032c0146136075780633d2acf8314612edc57806342b7fa1c14612ea45780634313c4cc146122835780634a6cf3a914611c3b5780635398690b14611b835780635d8d158514611afb57806363a846f814611a37578063695c2d24146111505780637149d8ba14610fc15780637217fcfd14610fa357806381929bac14610e965780638783cc8a14610e78578063a3ec138d14610db3578063a43064cc14610d69578063a9c63aa014610d4b578063aadc3b7214610cf9578063b205436514610c27578063e0428cf314610a6e578063e8d5940d14610586578063f544bed8146101a85763f6246dcb1461013d57600080fd5b346101a35760203660031901126101a3576004356001600160401b0381116101a35761016f6020913690600401614090565b60405161019883828161018b818301968781519384920161410e565b8101038084520182614054565b519020604051908152f35b600080fd5b346101a3576020806003193601126101a3576004356001600160401b0381116101a3576101d9903690600401614090565b610286610280600033600052600685526004604060002001906040519182610204888201809361452e565b0392610218601f1994858101835282614054565b519020916040519287840187519461023a8a82818c019861018b81878c61410e565b51902014801561053c575b1561046a57505061025660016146ae565b61026284511515614c39565b61027b85604051809361018b885180928585019061410e565b61468b565b91614c82565b9080600052600883526040600020805460ff811660048110156104545761040f576005914283018084116103f957600792600291600384015560ff1916178155016102d1815461467c565b90556103536040519260028551948781818901976102f081838b61410e565b81018781520301902001610304815461467c565b905560016040518781885161031a81838b61410e565b8101878152030190200161032e815461494c565b905560076040518781885161034481838b61410e565b81018781520301902001614e26565b9260076040518681845161036881838a61410e565b81018681520301902001548410156103bf5793600992610397926103a69660405194859384925192839161410e565b8201908152030190200161492c565b81549060031b9060ff6002831b921b1916179055600080f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b336000526006875261049e61049261027b60046040600020016040519283918c83019061452e565b03848101835282614054565b6104b860405161027b8a828b5161018b818484018c61410e565b14908115916104e3575b506104d1575b610256906146ae565b506104db84614c82565b5060016104c8565b61051a915061027b61050e913360005260068a5260056040600020016040519384918c83019061452e565b03908101835282614054565b61053460405161027b89828a5161018b818484018b61410e565b1415876104c2565b5033600052600687526005604060002001604051610561816104928b8201809561452e565b5190206040518881019061057d8a828b5161018b81878c61410e565b51902014610245565b346101a35760403660031901126101a3576001600160401b036004358181116101a3576105b7903690600401614090565b9060249081359081116101a3576105d2903690600401614090565b9160016105e78160ff600054161515146144f7565b6105f082614c82565b33600052602090600682526106c16004604060002001916040519283610619868201809361452e565b039361062d601f1995868101835282614054565b5190206040519085820183519261064e88828188019661018b81878a61410e565b51902014918215610a16575b3360005260078652600360406000200160405161068a8161067e8a8201809561452e565b03888101835282614054565b519020604051878101906106a68982865161018b81878b61410e565b519020149182156109c5575b505081156109bd575b506146ae565b604051956106e285519761027b85828b61018b838c019d8e8585019061410e565b60005260088352604060002094600886019760ff8954169161071586604051809361018b8383019687925192839161410e565b519020928251156109795783600052600a8552604060002033600052855260ff6040600020541661093f5760ff87541690600482101561092a5760028092036108e6576000918487019183895b610831575b5050505097600d9596979815610807575b50505080600052600a8252604060002033600052825260406000208460ff1982541617905560005252604060002090815493600160401b8510156107f35750830181556006926107c7916147d0565b81546001600160a01b0360039290921b91821b19163390911b1790550180546107ef9061467c565b9055005b634e487b7160e01b60009081526041600452fd5b610829926040519261081884614003565b83528786840152604083015261481a565b868080610778565b8c548110156108e15782610845828f61440b565b5061086a8b61085e60405193849283019586910161452e565b03858101835282614054565b5190206040518a8101906108868c828c5161018b81878d61410e565b5190201461089657890189610762565b9150508798999a809893506108ab925061440b565b50019485548781018091116108cc57600d96558690989796958a8080610767565b89634e487b7160e01b60005260116004526000fd5b610767565b60405162461bcd60e51b815260048101879052601b818b01527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b88634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152600481018690526013818a015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b60405162461bcd60e51b815260048101869052601f818a01527f43616e646964617465206e616d652063616e6e6f7420626520656d70747921006044820152606490fd5b9050886106bb565b909150336000526007865260046040600020016040516109ec8161067e8a8201809561452e565b51902091610a0b87604051809361018b8383019687925192839161410e565b5190201489806106b2565b915033600052600685526005604060002001604051610a4881610a3c898201809561452e565b03878101835282614054565b51902060405186810190610a648882875161018b81878a61410e565b519020149161065a565b346101a35760203660031901126101a3576004356001600160401b0381116101a357610aa1610abd913690600401614090565b61027b60206040518361018b829551809285808601910161410e565b8060005260086020526040600020906001820154906002808401549360405194602086015260208552610aef8561401e565b6007810154600882015490610b038261435a565b610b0c836143c1565b92610b168161435a565b94600681015497600052600860205260ff9060ff604060002054169760005b848110610bb8575050505092610b87610bb4969593610b9593610ba396610b6f6040519d8e9d8e6101209181528160208201520190614131565b9260408d015260608c01528a820360808c01526140d7565b9088820360a08a0152614156565b9086820360c08801526141b3565b9260e085015261010084019061421b565b0390f35b8084610bc96001936008870161440b565b505416610bd6828961445a565b52610bef83610be8836008880161440b565b5001614262565b610bf9828b61445a565b52610c04818a61445a565b5081610c13826008870161440b565b500154610c20828c61445a565b5201610b35565b346101a35760203660031901126101a3576004356001600160401b0381116101a3576020610c5c610c6f923690600401614090565b816040519382858094519384920161410e565b81016005815203019020805460ff81166001830154926002810154936003820154916004810154610ca7600660058401549301614262565b9360405197610100946002881015610454578998610bb4988a5260018060a01b039060081c1660208a015260408901526060880152608087015260a086015260c08501528060e0850152830190614131565b346101a35760403660031901126101a3576024356001600160a01b038116908190036101a357600435600052600a602052604060002090600052602052602060ff604060002054166040519015158152f35b346101a35760003660031901126101a3576020600454604051908152f35b346101a35760003660031901126101a357610d8f60018060a01b0360015416331461446e565b60005460ff8116610daa57506000805460ff19166001179055005b60ff1916600055005b346101a35760203660031901126101a3576001600160a01b0380610dd5614307565b1660005260076020526040600020610bb4815491610e6a600182015491610e5c610e0160028301614262565b610e196004610e1260038601614262565b9401614262565b94604051988860ff8b9a1615158a5260081c16602089015260018060801b031990818160801b1660408a015216606088015260e0608088015260e0870190614131565b9085820360a0870152614131565b9083820360c0850152614131565b346101a35760003660031901126101a3576020600254604051908152f35b346101a35760203660031901126101a3576004356001600160401b0381116101a357610ecd6020610c5c6060933690600401614090565b81016009815203019020610bb48154610f94600184015493610f8560028201549360038301549060048401546005850154600686015490600787015492610f1660088901614262565b95610f2f600a610f2860098c01614262565b9a01614262565b9a6040519e8f9e8f906101809960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015260e08a015261010089015280610120890152870190614131565b90858203610140870152614131565b90838203610160850152614131565b346101a35760003660031901126101a3576020600354604051908152f35b346101a3576020806003193601126101a3576004356001600160401b0381116101a357610ff5611010913690600401614090565b61027b836040518361018b829551809285808601910161410e565b60005260088152600860406000200180549081156110fd57611033829392614343565b926110416040519485614054565b8084528284018092600052836000206000915b8383106110da5750505050604051918083019381845251809452604083019360408160051b85010192916000955b82871061108f5785850386f35b9091929382806110ca600193603f198a82030186528851604060609160ff815116845285810151868501520151918160408201520190614131565b9601920196019592919092611082565b6003866001926110ec859a999a6147e8565b815201920192019190959495611054565b60405162461bcd60e51b815260048101849052602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b346101a35760803660031901126101a3576004356001600160401b0381116101a357611180903690600401614090565b6024356001600160401b0381116101a35761119f903690600401614090565b6044356001600160401b0381116101a3576111be903690600401614090565b90600260643510156101a3573360005260066020526002604060002001544310611a07576111f5600160ff600054161515146144f7565b336000526006602052604060002091617d0060035410156119d757600560405183519061122682826020880161410e565b0152611261604051835161123e81836020880161410e565b600590820190815281900360200190205460081c6001600160a01b031615614c39565b61126a82614ea6565b156119a65761127b84511515614c39565b602084511015611975576001815111156101a35781516003811490811561196a575b811561195f575b501561191a576112b382614f8c565b6118d55733600052600660205260046040600020016040516112eb816112dd60208201809561452e565b03601f198101835282614054565b519020604051602081019061130b602082875161018b8187858c0161410e565b519020141580611884575b15611849576040516020818451611330818385890161410e565b810160058152030190208251946001600160401b038611611650576113658661135c6006850154614228565b600685016145c9565b602095601f81116001146117d257600492916113a1826113c29360019798999a6000916117c7575b508160011b916000199060031b1c19161790565b600684015561027b60206040518361018b829551809285808601910161410e565b600582015560ff1981541660ff606435161781556113e0338261460e565b600060028201550155604051916020830192611430602682845161140881896020890161410e565b8101602d60f81b60208201526420b236b4b760d91b6021820152036006810184520182614054565b5192516001600160b01b031981169390600a82106117a7575b5050336000526006602052611465600460406000200154614228565b611666573360005260066020526004604060002001908051906001600160401b038211611650576114a08261149a8554614228565b856145c9565b602090601f83116001146115e15791806114d79261153f9695946000926115d6575b50508160011b916000199060031b1c19161790565b90555b336000526006602052604060002080546bffffffffffffffffffff00008560a01c16906bffffffffffffffffffff000019161790555b600184013360018060a01b031982541617905561027b60206040518361018b829551809285808601910161410e565b60038301556001825461ff0061155f60ff84811985161760081c16614c71565b60081b169061ffff19161717825533600052600e6020526040600020600160ff1982541617905560018060b01b031916600052600c6020526040600020600160ff198254161790554360320190816032116103f957600201556115c360035461467c565b6003556115d160045461467c565b600455005b0151905088806114c2565b908360005260206000209160005b601f1985168110611638575091839160019361153f979695601f1981161061161f575b505050811b0190556114da565b015160001960f88460031b161c19169055878080611612565b919260206001819286850151815501940192016115ef565b634e487b7160e01b600052604160045260246000fd5b336000526006602052611680600560406000200154614228565b15611690575b5061153f90611510565b3360005260066020526005604060002001908051906001600160401b038211611650576116c18261149a8554614228565b602090601f83116001146117385791806116f79261153f9695946000926115d65750508160011b916000199060031b1c19161790565b90555b336000908152600660205260409020805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b1617905590611686565b908360005260206000209160005b601f198516811061178f575091839160019361153f979695601f19811610611776575b505050811b0190556116fa565b015160001960f88460031b161c19169055878080611769565b91926020600181928685015181550194019201611746565b6001600160b01b0319600a9290920360031b82901b161692508480611449565b90508901518b61138d565b60068301600052602060002060005b601f198316811061183157509160018260049594829798999a6113c295601f19811610611818575b5050811b016006840155610aa1565b8a015160001960f88460031b161c191690558a80611809565b868901518255602098890198600190920191016117e1565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600660205260056040600020016040516118ab816112dd60208201809561452e565b51902060405160208101906118cb602082875161018b8187858c0161410e565b5190201415611316565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b6005915014856112a4565b60048114915061129d565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101a35760203660031901126101a3576001600160a01b0380611a59614307565b166000526006602052604060002090610bb48254611aec60018060b01b031993600186015416946002810154926003820154611a9c6005610e1260048601614262565b946040519889986101209460ff811615158b5260ff8160081c1660208c0152818160a01b1660408c015260501b1660608a0152608089015260a088015260c08701528060e0870152850190614131565b90838203610100850152614131565b346101a35760003660031901126101a357611b59611b67610bb4611b75611b2061498e565b9695989360409a929391959a519a8b9a15158b52151560208b015260018060a01b031660408a015260e060608a015260e0890190614131565b908782036080890152614156565b9085820360a0870152614156565b9083820360c0850152614156565b346101a35760203660031901126101a35760043560005260086020526040600020805490600181015490600281015492611c2a600383015491600484015490611bce60058601614262565b91600760068701549601549460405198899860ff61014095611bf28c83831661421b565b818160081c1660208d015260101c16151560408b015260608a0152608089015260a088015260c08701528060e0870152850190614131565b916101008401526101208301520390f35b346101a35760603660031901126101a3576004356001600160401b0381116101a357611c6b903690600401614090565b6024356001600160401b0381116101a357611c8a903690600401614090565b906044356001600160401b0381116101a357611caa903690600401614090565b91600192611cc08460ff600054161515146144f7565b60003360005260066020526004604060002001604051611ce8816112dd60208201809561452e565b519020604051611d05602082885161018b81848401858d0161410e565b60208151910120148015612231575b156121715750611d23846146ae565b60405191611d5360068551611d3c818760208a0161410e565b850194602081600597888152030190200154614228565b156101a3578481511115612140578281511015612100578151858111156101a357601911156120bf57600a60026040516020818851611d958183858d0161410e565b8101888152030190200154101561208157611df49061027b602160405180938851611dc7816020850160208d0161410e565b8201602d60f81b6020820152611de6825180936020878501910161410e565b010388810184520182614054565b806000526008602052604060002090600b60205260ff604060002054166120475783820185516001600160401b03811161165057611e3c81611e368454614228565b846145c9565b6020601f8211600114611fe4579080611e6a92600091611fd957508160011b916000199060031b1c19161790565b90555b808683015560405191835192806020860194806020830190611e8f918861410e565b810103808252602001611ea29082614054565b611eab9061468b565b600282015561ffff19815416905580600052600b60205260406000208660ff19825416179055604051808651818160208a0191611ee79261410e565b810186815203602001902060070190611eff91614959565b60405184518190611f14818360208a0161410e565b81018581520360200190206008019160405191829151908160208401611f399261410e565b810103808252602001611f4c9082614054565b611f559061468b565b611f5e91614959565b60405182518190611f7381836020880161410e565b810183815203602001902060090191825491600160401b83101561165057611fa583611fc5958760209601815561492c565b60ff82549160031b1b19169055826040519483868095519384920161410e565b820190815203019020016107ef815461467c565b90508801518a61138d565b908891601f198216908460005260206000209160005b8b8282106120305750508311612017575b5050811b019055611e6d565b89015160001960f88460031b161c19169055898061200b565b83015184558c959093019260209283019201611ffa565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b33600052600660205261219b6112dd61027b6004604060002001604051928391602083019061452e565b6121b960405161027b602082895161018b818c85808601910161410e565b148015906121e1575b6121d0575b611d23906146ae565b506121da83614c82565b50836121c7565b5033600052600660205261220c6112dd61027b6005604060002001604051928391602083019061452e565b61222a60405161027b602082895161018b818c85808601910161410e565b14156121c2565b503360005260066020526005604060002001604051612258816112dd60208201809561452e565b519020604051602081019061227a6020828161018b8b8781519384920161410e565b51902014611d14565b346101a35760803660031901126101a3576004356001600160401b0381116101a3576122b3903690600401614090565b60443580151581036101a357600033600052600660205260046040600020016040516122e7816112dd60208201809561452e565b5190206040516020810190612307602082885161018b8187858d0161410e565b519020148015612e54575b15612d95575061232260016146ae565b61233f60405161027b602082865161018b81848401858b0161410e565b9061234983614c82565b916040516020810190612367602082885161018b8187858d0161410e565b5190209181600052600860205260406000209233600052600660205260036040600020015491604051926020840152602083526123a38361401e565b865115612d5a57600685015460046123c26123bd8a614c82565b61431d565b015460011c60010190816001116103f9571115612d1557845460ff8160101c16612cdc57600460ff821610156104545760ff6002911603612c9d571515600103612937575060026008840154036128e05761243160405161027b602082895161018b818c85808601910161410e565b6000526008602052604060002060405161244a81614039565b60008082526008830154919290805b8360ff821610612887575050505042600a01600a116103f9576124a46020600486019742600a0189556201000362ff00ff19885416178755816040519382858094519384920161410e565b8101600981520301902095600160ff19885416178755600685015460048801556124ce338861460e565b6003850154600288015554600387015560243560078701556124f660058501600888016146f3565b82600587015560078401546001870155600284015460068701558051906001600160401b0382116116505761253b8261253260098a0154614228565b60098a016145c9565b602090601f83116001146128155761256b9291600091836115d65750508160011b916000199060031b1c19161790565b60098601555b8051906001600160401b0382116116505761259c82612593600a890154614228565b600a89016145c9565b602090601f83116001146127a3576125cc9291600091836127985750508160011b916000199060031b1c19161790565b600a8501555b60005b6008830154811015612635578061262f6125fd6125f76001946008880161440b565b506147e8565b60ff81511690602060408201519101516040519261261a84614003565b835260208301526040820152600b880161481a565b016125d5565b5092505081600052600860205260086040600020600081556000600182015560006002820155600060038201556000600482015561267560058201614633565b6000600682015560006007820155018054906000815581612755575b50506020600292612740926126f06126cc6040519360078451958781818801986126bc81838c61410e565b8101600581520301902001614e26565b6009604051868186516126e081838b61410e565b810160058152030190200161492c565b81549060031b9060ff6003831b921b191617905560036040518481845161271881838961410e565b810160058152030190200161272d815461467c565b905560405193849283925192839161410e565b81016005815203019020016107ef815461494c565b816003029160038304036103f9576000526020600020908101905b8181101561269157806000600392556000600182015561279260028201614633565b01612770565b0151905087806114c2565b9190600a87016000526020600020906000935b601f19841685106127fa576001945083601f198116106127e1575b505050811b01600a8501556125d2565b015160001960f88460031b161c191690558680806127d1565b818101518355602094850194600190930192909101906127b6565b9190600988016000526020600020906000935b601f198416851061286c576001945083601f19811610612853575b505050811b016009860155612571565b015160001960f88460031b161c19169055878080612843565b81810151835560209485019460019093019290910190612828565b816001612897836008870161440b565b500154116128ae575b6128a990614c71565b612459565b93505060016128c0846008840161440b565b5001546128a96128d86002610be8876008870161440b565b9490506128a0565b60405162461bcd60e51b815260206004820152602960248201527f53696e676c652d776176652072657175697265732065786163746c7920322063604482015268616e6469646174657360b81b6064820152608490fd5b9280959450600292506008915001541115612c58576000905b600884015480831015612a615761296a836008870161440b565b50600101546064351115612a5057600019908082019081116103f957612993906008870161440b565b506129a1846008880161440b565b6129f657818103612a22575b505060088501548015612a0c576129c98282016008880161440b565b6129f65760028160006129e493556000600182015501614633565b01600885015560006006850155612950565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6002808360ff612a4995541660ff19855416178455600181015460018501550191016146f3565b85806129ad565b5090612a5b9061467c565b90612950565b509291905060005b6008830154811015612a91578060006001612a8881946008880161440b565b50015501612a69565b509180600052600d602052604060002090815415612c1e5760005b8254811015612af75760019082600052600a6020526040600020612ad082866147d0565b848060a01b0391549060031b1c16600052602052604060002060ff19815416905501612aac565b508154909160005b828110612b9a5750505091612b79917f92336a19fa05b8a2d104c1cdeb6b25edcc9dd48abbb73f16cfbe714c614c502593600052600d602052604060002080546000825580612b7e575b505060078101612b59815461467c565b905562ff0000198154169055604051918291602083526020830190614131565b0390a1005b612b93916000526020600020908101906145b2565b8480612b49565b60019084600052600a6020527f676300808a8817a4676fd8567b046338b857c2bbd7a4f128527a83f439c558dc604080600020612bd784876147d0565b9190868060a01b03928391549060031b1c1660005260205260ff82600020541690612c0285886147d0565b90549060031b1c1690825191825215156020820152a101612aff565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d9bdd195c9cc81d1bc81c995cd95d60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4d6f7265207468616e20322063616e64696461746573207265717569726564006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b336000526006602052612dbf6112dd61027b6004604060002001604051928391602083019061452e565b612ddc60405161027b602082885161018b81848401858d0161410e565b14801590612e05575b612df3575b612322906146ae565b50612dfd82614c82565b506001612dea565b50336000526006602052612e306112dd61027b6005604060002001604051928391602083019061452e565b612e4d60405161027b602082885161018b81848401858d0161410e565b1415612de5565b503360005260066020526005604060002001604051612e7b816112dd60208201809561452e565b5190206040516020810190612e9b602082885161018b8187858d0161410e565b51902014612312565b346101a35760003660031901126101a357612eca60018060a01b0360015416331461446e565b602060ff600054166040519015158152f35b346101a35760603660031901126101a3576004356001600160401b0381116101a357612f0c903690600401614090565b6024356001600160401b0381116101a357612f2b903690600401614090565b90612f3f600160ff600054161515146144f7565b336000526007602052604060002090604051906020820191604435835260208152612f698161401e565b5191516001600160801b031981169290601082106135e7575b505061138860046040516020818851612f9e8183858d0161410e565b81016005815203019020015410156135a25760018151111561356457601881511015613515573360005260076020526003604060002001604051612fea816112dd60208201809561452e565b519020604051602081019061300c6020828161018b8b8781519384920161410e565b5190201415806134c2575b806134a9575b15613464576001600261302f8661431d565b0154101561342757613062600660405160208188516130518183858d0161410e565b810160058152030190200154614228565b156133e2576130746003840154614228565b6132de5783516001600160401b038111611650576130a2816130996003870154614228565b600387016145c9565b6020601f82116001146132725790806130d09260009161326757508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b6130f9338461460e565b805160028401916001600160401b0382116116505761311c8261149a8554614228565b602090601f83116001146131ff5761314c9291600091836127985750508160011b916000199060031b1c19161790565b90555b600060405161315d81614039565b526005820180549060008155816131d8575b60046131c3602087878760ff199160018382541617905560018060801b031916600052600c835260016040600020918254161790556131ae845461467c565b8455816040519382858094519384920161410e565b81016005815203019020016107ef815461467c565b6000526020600020908101905b8181101561316f57806131f9600192614633565b016131e5565b90601f198316918460005260206000209260005b81811061324f5750908460019594939210613236575b505050811b01905561314f565b015160001960f88460031b161c19169055868080613229565b92936020600181928786015181550195019301613213565b90508601518761138d565b906003850160005260206000206000925b601f19831684106132c6576001935082601f198116106132ad575b5050811b0160038401556130d6565b87015160001960f88460031b161c19169055868061329e565b87810151825560209384019360019092019101613283565b60048301546132ec81614228565b156132f8575b506130ef565b8451906001600160401b038211611650578161331661331f92614228565b600487016145c9565b6020601f821160011461337657908061334d9260009161326757508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b03198416179055846132f2565b906004850160005260206000206000925b601f19831684106133ca576001935082601f198116106133b1575b5050811b016004840155613353565b87015160001960f88460031b161c1916905586806133a2565b87810151825560209384019360019092019101613387565b60405162461bcd60e51b815260206004820152601b60248201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152606490fd5b5033600052600e60205260ff604060002054161561301d565b5033600052600760205260046040600020016040516134e9816112dd60208201809561452e565b519020604051602081019061350b6020828161018b8b8781519384920161410e565b5190201415613017565b60405162461bcd60e51b815260206004820152602160248201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152606490fd5b6001600160801b031960109290920360031b82901b161691508480612f82565b346101a3576020806003193601126101a3576004356001600160401b0381116101a35781610c5c61363c923690600401614090565b810160058152030190209060086009830191806136676008613660600788016144a6565b96016144a6565b604051938485918488549283815201918298600052856000206000925b82601f850110613bb35750926137d595949287926137b495549184828210613b99575b828210613b7c575b828210613b5f575b828210613b42575b828210613b26575b828210613b09575b828210613aec575b828210613acf575b828210613ab2575b828210613a95575b828210613a78575b828210613a5b575b828210613a3e575b828210613a21575b828210613a04575b8282106139e7575b8282106139ca575b8282106139ad575b828210613990575b828210613973575b828210613956575b828210613939575b82821061391c575b8282106138ff575b8282106138e2575b8282106138c5575b8282106138a8575b82821061388b575b82821061386e575b828210613851575b828210613834575b501061381e575b506137c89a999896509493929190940385614054565b6040519788976060895260608901906141e7565b90878203848901526141e7565b918583036040870152519182815201929160005b8281106137f857505050500390f35b919383955090808261380e60019483975161421b565b01950191019185949391926137e9565b8161382b9160f81c61421b565b0185908b61379e565b846138486001939660ff8760f01c1661421b565b01930184613797565b846138656001939660ff8760e81c1661421b565b0193018461378f565b846138826001939660ff8760e01c1661421b565b01930184613787565b8461389f6001939660ff8760d81c1661421b565b0193018461377f565b846138bc6001939660ff8760d01c1661421b565b01930184613777565b846138d96001939660ff8760c81c1661421b565b0193018461376f565b846138f66001939660ff8760c01c1661421b565b01930184613767565b846139136001939660ff8760b81c1661421b565b0193018461375f565b846139306001939660ff8760b01c1661421b565b01930184613757565b8461394d6001939660ff8760a81c1661421b565b0193018461374f565b8461396a6001939660ff8760a01c1661421b565b01930184613747565b846139876001939660ff8760981c1661421b565b0193018461373f565b846139a46001939660ff8760901c1661421b565b01930184613737565b846139c16001939660ff8760881c1661421b565b0193018461372f565b846139de6001939660ff8760801c1661421b565b01930184613727565b846139fb6001939660ff8760781c1661421b565b0193018461371f565b84613a186001939660ff8760701c1661421b565b01930184613717565b84613a356001939660ff8760681c1661421b565b0193018461370f565b84613a526001939660ff8760601c1661421b565b01930184613707565b84613a6f6001939660ff8760581c1661421b565b019301846136ff565b84613a8c6001939660ff8760501c1661421b565b019301846136f7565b84613aa96001939660ff8760481c1661421b565b019301846136ef565b84613ac66001939660ff8760401c1661421b565b019301846136e7565b84613ae36001939660ff8760381c1661421b565b019301846136df565b84613b006001939660ff8760301c1661421b565b019301846136d7565b84613b1d6001939660ff8760281c1661421b565b019301846136cf565b84613b396001939660ff87851c1661421b565b019301846136c7565b84613b566001939660ff8760181c1661421b565b019301846136bf565b84613b736001939660ff8760101c1661421b565b019301846136b7565b84613b906001939660ff8760081c1661421b565b019301846136af565b84613baa6001939660ff871661421b565b019301846136a7565b945094959092610400600191613e148854613e0660ff613bd58582851661421b565b613be5858901848d1c831661421b565b613bf760408601828560101c1661421b565b613d9785613d4f6060613c11818401868960181c1661421b565b613d078c613c28608091888b848901921c1661421b565b613cbf60a093613c3f8588018a8d60281c1661421b565b888b61018060c099613c588b8201858560301c1661421b565b613c6a60e08201858560381c1661421b565b613c7d6101008201858560401c1661421b565b613c906101208201858560481c1661421b565b613ca36101408201858560501c1661421b565b613cb66101608201858560581c1661421b565b01921c1661421b565b613cd26101a08c01888b60681c1661421b565b613ce56101c08c01888b60701c1661421b565b613cf86101e08c01888b60781c1661421b565b86896102008d01921c1661421b565b613d1a6102208a01868960881c1661421b565b613d2d6102408a01868960901c1661421b565b613d406102608a01868960981c1661421b565b84876102808b01921c1661421b565b613d626102a08801848760a81c1661421b565b613d756102c08801848760b01c1661421b565b613d886102e08801848760b81c1661421b565b82856103008901921c1661421b565b613daa6103208601828560c81c1661421b565b613dbd6103408601828560d01c1661421b565b613dd06103608601828560d81c1661421b565b613de36103808601828560e01c1661421b565b613df66103a08601828560e81c1661421b565b6103c08501908360f01c1661421b565b6103e083019060f81c61421b565b01950191019091869594928894613684565b346101a35760003660031901126101a357613e4c60018060a01b0360015416331461446e565b602047604051908152f35b346101a3576020806003193601126101a3576004356001600160401b0381116101a357613e88903690600401614090565b906040519180519180820192613e9f81868661410e565b840193600b6009916009875283818398030190200154613ebe8161435a565b94613ec8826143c1565b92613ed28361435a565b9560005b848110613f1957613efe89610bb48a613f0b8b8b6040519687966060885260608801906140d7565b9186830390870152614156565b9083820360408501526141b3565b80613f8c6002610be8838e8e613f66838f613f5d60019b8f8f8f948992613f4e9260ff9760405194859384925192839161410e565b8201908152030190200161440b565b5054169261445a565b52613f7d8d8b604051809381928d5192839161410e565b81018c8152030190200161440b565b613f96828961445a565b52613fa1818861445a565b5081613fcb828d6040518c8180613fbc8d8c5192839161410e565b81018b8152030190200161440b565b500154613fd8828b61445a565b5201613ed6565b346101a35760003660031901126101a3576001546001600160a01b03168152602090f35b606081019081106001600160401b0382111761165057604052565b604081019081106001600160401b0382111761165057604052565b602081019081106001600160401b0382111761165057604052565b90601f801991011681019081106001600160401b0382111761165057604052565b6001600160401b03811161165057601f01601f191660200190565b81601f820112156101a3578035906140a782614075565b926140b56040519485614054565b828452602083830101116101a357816000926020809301838601378301015290565b90815180825260208080930193019160005b8281106140f7575050505090565b835160ff16855293810193928101926001016140e9565b60005b8381106141215750506000910152565b8181015183820152602001614111565b9060209161414a8151809281855285808601910161410e565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106141855750505050505090565b90919293949584806141a3600193601f198682030187528a51614131565b9801930193019194939290614175565b90815180825260208080930193019160005b8281106141d3575050505090565b8351855293810193928101926001016141c5565b90815180825260208080930193019160005b828110614207575050505090565b8351855293810193928101926001016141f9565b9060048210156104545752565b90600182811c92168015614258575b602083101461424257565b634e487b7160e01b600052602260045260246000fd5b91607f1691614237565b9060405191826000825461427581614228565b908184526020946001916001811690816000146142e557506001146142a6575b5050506142a492500383614054565b565b600090815285812095935091905b8183106142cd5750506142a49350820101388080614295565b855488840185015294850194879450918301916142b4565b925050506142a494925060ff191682840152151560051b820101388080614295565b600435906001600160a01b03821682036101a357565b602061433691816040519382858094519384920161410e565b8101600581520301902090565b6001600160401b0381116116505760051b60200190565b9061436482614343565b6143716040519182614054565b8281528092614382601f1991614343565b0190602036910137565b6040906040519161439c83614003565b600283528260005b8281106143b057505050565b8060606020809385010152016143a4565b906143cb82614343565b6143d86040519182614054565b82815280926143e9601f1991614343565b019060005b8281106143fa57505050565b8060606020809385010152016143ee565b8054821015614427576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b8051156144275760200190565b8051600110156144275760400190565b80518210156144275760209160051b010190565b1561447557565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b8282106144dd575050506142a492500383614054565b8554845260019586019588955093810193909101906144c7565b156144fe57565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b60009291815461453d81614228565b92600191808316908115614597575060011461455a575b50505050565b9091929394506000526020906020600020906000915b8583106145865750505050019038808080614554565b805485840152918301918101614570565b60ff1916845250505081151590910201915038808080614554565b8181106145bd575050565b600081556001016145b2565b9190601f81116145d857505050565b6142a4926000526020600020906020601f840160051c83019310614604575b601f0160051c01906145b2565b90915081906145f7565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b61463d8154614228565b9081614647575050565b81601f60009311600114614659575055565b908083918252614678601f60208420940160051c8401600185016145b2565b5555565b60001981146103f95760010190565b60208151910151906020811061469f575090565b6000199060200360031b1b1690565b156146b557565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b919082039182116103f957565b908082146147cc576147058154614228565b906001600160401b038211611650576147228261149a8554614228565b600090601f8311600114614761576147529291600091836147565750508160011b916000199060031b1c19161790565b9055565b0154905038806114c2565b815260208082208483528183209291601f1985169083905b8282106147b357505090846001959493921061479a575b505050811b019055565b015460001960f88460031b161c19169055388080614790565b8495819295850154815560018091019601940190614779565b5050565b80548210156144275760005260206000200190600090565b906040516147f581614003565b60406148156002839560ff81541685526001810154602086015201614262565b910152565b91908254600160401b8110156116505761483c9060019460018201815561440b565b6129f65760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b03831161165057614889836148838654614228565b866145c9565b602091601f84116001146148c857505081906147529394956000926148bd5750508160011b916000199060031b1c19161790565b0151905038806114c2565b600085815260208120601f1986169890949390925b89831061491557505050836001959697106148fc57505050811b019055565b015160001960f88460031b161c19169055388080614790565b8385015186559485019493810193918101916148dd565b919091805483101561442757600052601f60206000208360051c01921690565b80156103f9576000190190565b8054600160401b81101561165057614976916001820181556147d0565b819291549060031b91821b91600019901b1916179055565b3360003381526020906006825260409060ff8282205416600014614aa6576001600160a01b038416815260068352818120906149c861438c565b926149d560048401614262565b6149de8561443d565b526149e88461443d565b506149f560058401614262565b6149fe8561444a565b52614a088461444a565b506003614a1361438c565b93805460018060b01b03198451818360a01b168a820152600a8152614a378161401e565b614a408861443d565b52614a4a8761443d565b5084519160501b1688820152600a8152614a638161401e565b614a6c8661444a565b52614a768561444a565b50015494815195818701528552614a8c8561401e565b5190614a9782614039565b81526001956001959493929190565b93906007835260ff8186205416600014614bf2576001600160a01b03841685526007835280852092614ad661438c565b92614ae360038601614262565b614aec8561443d565b52614af68461443d565b50614b0360048601614262565b614b0c8561444a565b52614b168461444a565b50614b1f61438c565b60018681015485516001600160801b0319608083901b8116878301526010825293969390614b4c8161401e565b614b558861443d565b52614b5f8761443d565b50835191168582015260108152614b758161401e565b614b7e8661444a565b52614b888561444a565b506005870198600199614b9f6002839b9a01614262565b979695815492614bba614bb185614343565b96519687614054565b8386529182528082208186015b848410614bd75750505050505090565b85838192614be485614262565b815201920193019290614bc7565b91509291508051614c0281614039565b8281528151614c1081614039565b8381528251614c1e81614039565b84815284958533955190614c3182614039565b815293929190565b15614c4057565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b60ff1660ff81146103f95760010190565b604051614c8e8161401e565b60019182825260208201602d60f81b815283846000905b614dd4575b50614cb4906143c1565b93600091600094826000905b614d4f575b5050505081614cda91614ceb94935191614fcd565b614ce4828561445a565b528261445a565b50805115614d0057614cfc9061443d565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b8551811015614dcf576001600160f81b031980614d6c8389614e95565b5116908351156144275784511614614d87575b830183614cc0565b959386614d979187949394614fcd565b614da1858961445a565b52614dac848861445a565b50828601918287116103f95783614dc481949661467c565b979192935050614d7f565b614cc5565b8351811015614e21576001600160f81b03199081614df28287614e95565b511686511561442757879285511614614e0e575b810190614ca5565b91614e19829161467c565b929050614e06565b614caa565b9060005b8254811015614e585781614e3e82856147d0565b90549060031b1c14614e5257600101614e2a565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b908151811015614427570160200190565b6000805b8251811015614f8457614ebd8184614e95565b51603060f891821c101580614f6d575b8015614f3e575b8015614f0f575b15908115614ef7575b50614ef157600101614eaa565b50905090565b60209150614f058386614e95565b51901c1438614ee4565b506061614f1c8386614e95565b51821c10158015614edb5750607a614f348386614e95565b51821c1115614edb565b506041614f4b8386614e95565b51821c10158015614ed45750605a614f638386614e95565b51821c1115614ed4565b506039614f7a8386614e95565b51821c1115614ecd565b505050600190565b60005b8151811015614fc657600160fd1b6001600160f81b0319614fb08385614e95565b511614614fbf57600101614f8f565b5050600190565b5050600090565b9291808211158061509f575b1561505e57614fe882826146e6565b91614ff283614075565b926150006040519485614054565b80845261500f601f1991614075565b01366020850137805b82811061502757509193505050565b6001906001600160f81b031961503d8289614e95565b511661505761504c85846146e6565b9160001a9187614e95565b5301615018565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b508351811115614fd956fea26469706673582212206d65fc0d8dfe724d34db4e02ad5a4fe4be2f536f7c60d2b2deb8791ee2a0242564736f6c63430008190033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd14613fdf57508063145ef6e914610e78578063162442e214613e575780631df3739a14613e265780632c2032c0146136075780633d2acf8314612edc57806342b7fa1c14612ea45780634313c4cc146122835780634a6cf3a914611c3b5780635398690b14611b835780635d8d158514611afb57806363a846f814611a37578063695c2d24146111505780637149d8ba14610fc15780637217fcfd14610fa357806381929bac14610e965780638783cc8a14610e78578063a3ec138d14610db3578063a43064cc14610d69578063a9c63aa014610d4b578063aadc3b7214610cf9578063b205436514610c27578063e0428cf314610a6e578063e8d5940d14610586578063f544bed8146101a85763f6246dcb1461013d57600080fd5b346101a35760203660031901126101a3576004356001600160401b0381116101a35761016f6020913690600401614090565b60405161019883828161018b818301968781519384920161410e565b8101038084520182614054565b519020604051908152f35b600080fd5b346101a3576020806003193601126101a3576004356001600160401b0381116101a3576101d9903690600401614090565b610286610280600033600052600685526004604060002001906040519182610204888201809361452e565b0392610218601f1994858101835282614054565b519020916040519287840187519461023a8a82818c019861018b81878c61410e565b51902014801561053c575b1561046a57505061025660016146ae565b61026284511515614c39565b61027b85604051809361018b885180928585019061410e565b61468b565b91614c82565b9080600052600883526040600020805460ff811660048110156104545761040f576005914283018084116103f957600792600291600384015560ff1916178155016102d1815461467c565b90556103536040519260028551948781818901976102f081838b61410e565b81018781520301902001610304815461467c565b905560016040518781885161031a81838b61410e565b8101878152030190200161032e815461494c565b905560076040518781885161034481838b61410e565b81018781520301902001614e26565b9260076040518681845161036881838a61410e565b81018681520301902001548410156103bf5793600992610397926103a69660405194859384925192839161410e565b8201908152030190200161492c565b81549060031b9060ff6002831b921b1916179055600080f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260048101869052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b336000526006875261049e61049261027b60046040600020016040519283918c83019061452e565b03848101835282614054565b6104b860405161027b8a828b5161018b818484018c61410e565b14908115916104e3575b506104d1575b610256906146ae565b506104db84614c82565b5060016104c8565b61051a915061027b61050e913360005260068a5260056040600020016040519384918c83019061452e565b03908101835282614054565b61053460405161027b89828a5161018b818484018b61410e565b1415876104c2565b5033600052600687526005604060002001604051610561816104928b8201809561452e565b5190206040518881019061057d8a828b5161018b81878c61410e565b51902014610245565b346101a35760403660031901126101a3576001600160401b036004358181116101a3576105b7903690600401614090565b9060249081359081116101a3576105d2903690600401614090565b9160016105e78160ff600054161515146144f7565b6105f082614c82565b33600052602090600682526106c16004604060002001916040519283610619868201809361452e565b039361062d601f1995868101835282614054565b5190206040519085820183519261064e88828188019661018b81878a61410e565b51902014918215610a16575b3360005260078652600360406000200160405161068a8161067e8a8201809561452e565b03888101835282614054565b519020604051878101906106a68982865161018b81878b61410e565b519020149182156109c5575b505081156109bd575b506146ae565b604051956106e285519761027b85828b61018b838c019d8e8585019061410e565b60005260088352604060002094600886019760ff8954169161071586604051809361018b8383019687925192839161410e565b519020928251156109795783600052600a8552604060002033600052855260ff6040600020541661093f5760ff87541690600482101561092a5760028092036108e6576000918487019183895b610831575b5050505097600d9596979815610807575b50505080600052600a8252604060002033600052825260406000208460ff1982541617905560005252604060002090815493600160401b8510156107f35750830181556006926107c7916147d0565b81546001600160a01b0360039290921b91821b19163390911b1790550180546107ef9061467c565b9055005b634e487b7160e01b60009081526041600452fd5b610829926040519261081884614003565b83528786840152604083015261481a565b868080610778565b8c548110156108e15782610845828f61440b565b5061086a8b61085e60405193849283019586910161452e565b03858101835282614054565b5190206040518a8101906108868c828c5161018b81878d61410e565b5190201461089657890189610762565b9150508798999a809893506108ab925061440b565b50019485548781018091116108cc57600d96558690989796958a8080610767565b89634e487b7160e01b60005260116004526000fd5b610767565b60405162461bcd60e51b815260048101879052601b818b01527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b88634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152600481018690526013818a015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b60405162461bcd60e51b815260048101869052601f818a01527f43616e646964617465206e616d652063616e6e6f7420626520656d70747921006044820152606490fd5b9050886106bb565b909150336000526007865260046040600020016040516109ec8161067e8a8201809561452e565b51902091610a0b87604051809361018b8383019687925192839161410e565b5190201489806106b2565b915033600052600685526005604060002001604051610a4881610a3c898201809561452e565b03878101835282614054565b51902060405186810190610a648882875161018b81878a61410e565b519020149161065a565b346101a35760203660031901126101a3576004356001600160401b0381116101a357610aa1610abd913690600401614090565b61027b60206040518361018b829551809285808601910161410e565b8060005260086020526040600020906001820154906002808401549360405194602086015260208552610aef8561401e565b6007810154600882015490610b038261435a565b610b0c836143c1565b92610b168161435a565b94600681015497600052600860205260ff9060ff604060002054169760005b848110610bb8575050505092610b87610bb4969593610b9593610ba396610b6f6040519d8e9d8e6101209181528160208201520190614131565b9260408d015260608c01528a820360808c01526140d7565b9088820360a08a0152614156565b9086820360c08801526141b3565b9260e085015261010084019061421b565b0390f35b8084610bc96001936008870161440b565b505416610bd6828961445a565b52610bef83610be8836008880161440b565b5001614262565b610bf9828b61445a565b52610c04818a61445a565b5081610c13826008870161440b565b500154610c20828c61445a565b5201610b35565b346101a35760203660031901126101a3576004356001600160401b0381116101a3576020610c5c610c6f923690600401614090565b816040519382858094519384920161410e565b81016005815203019020805460ff81166001830154926002810154936003820154916004810154610ca7600660058401549301614262565b9360405197610100946002881015610454578998610bb4988a5260018060a01b039060081c1660208a015260408901526060880152608087015260a086015260c08501528060e0850152830190614131565b346101a35760403660031901126101a3576024356001600160a01b038116908190036101a357600435600052600a602052604060002090600052602052602060ff604060002054166040519015158152f35b346101a35760003660031901126101a3576020600454604051908152f35b346101a35760003660031901126101a357610d8f60018060a01b0360015416331461446e565b60005460ff8116610daa57506000805460ff19166001179055005b60ff1916600055005b346101a35760203660031901126101a3576001600160a01b0380610dd5614307565b1660005260076020526040600020610bb4815491610e6a600182015491610e5c610e0160028301614262565b610e196004610e1260038601614262565b9401614262565b94604051988860ff8b9a1615158a5260081c16602089015260018060801b031990818160801b1660408a015216606088015260e0608088015260e0870190614131565b9085820360a0870152614131565b9083820360c0850152614131565b346101a35760003660031901126101a3576020600254604051908152f35b346101a35760203660031901126101a3576004356001600160401b0381116101a357610ecd6020610c5c6060933690600401614090565b81016009815203019020610bb48154610f94600184015493610f8560028201549360038301549060048401546005850154600686015490600787015492610f1660088901614262565b95610f2f600a610f2860098c01614262565b9a01614262565b9a6040519e8f9e8f906101809960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015260e08a015261010089015280610120890152870190614131565b90858203610140870152614131565b90838203610160850152614131565b346101a35760003660031901126101a3576020600354604051908152f35b346101a3576020806003193601126101a3576004356001600160401b0381116101a357610ff5611010913690600401614090565b61027b836040518361018b829551809285808601910161410e565b60005260088152600860406000200180549081156110fd57611033829392614343565b926110416040519485614054565b8084528284018092600052836000206000915b8383106110da5750505050604051918083019381845251809452604083019360408160051b85010192916000955b82871061108f5785850386f35b9091929382806110ca600193603f198a82030186528851604060609160ff815116845285810151868501520151918160408201520190614131565b9601920196019592919092611082565b6003866001926110ec859a999a6147e8565b815201920192019190959495611054565b60405162461bcd60e51b815260048101849052602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b346101a35760803660031901126101a3576004356001600160401b0381116101a357611180903690600401614090565b6024356001600160401b0381116101a35761119f903690600401614090565b6044356001600160401b0381116101a3576111be903690600401614090565b90600260643510156101a3573360005260066020526002604060002001544310611a07576111f5600160ff600054161515146144f7565b336000526006602052604060002091617d0060035410156119d757600560405183519061122682826020880161410e565b0152611261604051835161123e81836020880161410e565b600590820190815281900360200190205460081c6001600160a01b031615614c39565b61126a82614ea6565b156119a65761127b84511515614c39565b602084511015611975576001815111156101a35781516003811490811561196a575b811561195f575b501561191a576112b382614f8c565b6118d55733600052600660205260046040600020016040516112eb816112dd60208201809561452e565b03601f198101835282614054565b519020604051602081019061130b602082875161018b8187858c0161410e565b519020141580611884575b15611849576040516020818451611330818385890161410e565b810160058152030190208251946001600160401b038611611650576113658661135c6006850154614228565b600685016145c9565b602095601f81116001146117d257600492916113a1826113c29360019798999a6000916117c7575b508160011b916000199060031b1c19161790565b600684015561027b60206040518361018b829551809285808601910161410e565b600582015560ff1981541660ff606435161781556113e0338261460e565b600060028201550155604051916020830192611430602682845161140881896020890161410e565b8101602d60f81b60208201526420b236b4b760d91b6021820152036006810184520182614054565b5192516001600160b01b031981169390600a82106117a7575b5050336000526006602052611465600460406000200154614228565b611666573360005260066020526004604060002001908051906001600160401b038211611650576114a08261149a8554614228565b856145c9565b602090601f83116001146115e15791806114d79261153f9695946000926115d6575b50508160011b916000199060031b1c19161790565b90555b336000526006602052604060002080546bffffffffffffffffffff00008560a01c16906bffffffffffffffffffff000019161790555b600184013360018060a01b031982541617905561027b60206040518361018b829551809285808601910161410e565b60038301556001825461ff0061155f60ff84811985161760081c16614c71565b60081b169061ffff19161717825533600052600e6020526040600020600160ff1982541617905560018060b01b031916600052600c6020526040600020600160ff198254161790554360320190816032116103f957600201556115c360035461467c565b6003556115d160045461467c565b600455005b0151905088806114c2565b908360005260206000209160005b601f1985168110611638575091839160019361153f979695601f1981161061161f575b505050811b0190556114da565b015160001960f88460031b161c19169055878080611612565b919260206001819286850151815501940192016115ef565b634e487b7160e01b600052604160045260246000fd5b336000526006602052611680600560406000200154614228565b15611690575b5061153f90611510565b3360005260066020526005604060002001908051906001600160401b038211611650576116c18261149a8554614228565b602090601f83116001146117385791806116f79261153f9695946000926115d65750508160011b916000199060031b1c19161790565b90555b336000908152600660205260409020805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b1617905590611686565b908360005260206000209160005b601f198516811061178f575091839160019361153f979695601f19811610611776575b505050811b0190556116fa565b015160001960f88460031b161c19169055878080611769565b91926020600181928685015181550194019201611746565b6001600160b01b0319600a9290920360031b82901b161692508480611449565b90508901518b61138d565b60068301600052602060002060005b601f198316811061183157509160018260049594829798999a6113c295601f19811610611818575b5050811b016006840155610aa1565b8a015160001960f88460031b161c191690558a80611809565b868901518255602098890198600190920191016117e1565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600660205260056040600020016040516118ab816112dd60208201809561452e565b51902060405160208101906118cb602082875161018b8187858c0161410e565b5190201415611316565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b6005915014856112a4565b60048114915061129d565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101a35760203660031901126101a3576001600160a01b0380611a59614307565b166000526006602052604060002090610bb48254611aec60018060b01b031993600186015416946002810154926003820154611a9c6005610e1260048601614262565b946040519889986101209460ff811615158b5260ff8160081c1660208c0152818160a01b1660408c015260501b1660608a0152608089015260a088015260c08701528060e0870152850190614131565b90838203610100850152614131565b346101a35760003660031901126101a357611b59611b67610bb4611b75611b2061498e565b9695989360409a929391959a519a8b9a15158b52151560208b015260018060a01b031660408a015260e060608a015260e0890190614131565b908782036080890152614156565b9085820360a0870152614156565b9083820360c0850152614156565b346101a35760203660031901126101a35760043560005260086020526040600020805490600181015490600281015492611c2a600383015491600484015490611bce60058601614262565b91600760068701549601549460405198899860ff61014095611bf28c83831661421b565b818160081c1660208d015260101c16151560408b015260608a0152608089015260a088015260c08701528060e0870152850190614131565b916101008401526101208301520390f35b346101a35760603660031901126101a3576004356001600160401b0381116101a357611c6b903690600401614090565b6024356001600160401b0381116101a357611c8a903690600401614090565b906044356001600160401b0381116101a357611caa903690600401614090565b91600192611cc08460ff600054161515146144f7565b60003360005260066020526004604060002001604051611ce8816112dd60208201809561452e565b519020604051611d05602082885161018b81848401858d0161410e565b60208151910120148015612231575b156121715750611d23846146ae565b60405191611d5360068551611d3c818760208a0161410e565b850194602081600597888152030190200154614228565b156101a3578481511115612140578281511015612100578151858111156101a357601911156120bf57600a60026040516020818851611d958183858d0161410e565b8101888152030190200154101561208157611df49061027b602160405180938851611dc7816020850160208d0161410e565b8201602d60f81b6020820152611de6825180936020878501910161410e565b010388810184520182614054565b806000526008602052604060002090600b60205260ff604060002054166120475783820185516001600160401b03811161165057611e3c81611e368454614228565b846145c9565b6020601f8211600114611fe4579080611e6a92600091611fd957508160011b916000199060031b1c19161790565b90555b808683015560405191835192806020860194806020830190611e8f918861410e565b810103808252602001611ea29082614054565b611eab9061468b565b600282015561ffff19815416905580600052600b60205260406000208660ff19825416179055604051808651818160208a0191611ee79261410e565b810186815203602001902060070190611eff91614959565b60405184518190611f14818360208a0161410e565b81018581520360200190206008019160405191829151908160208401611f399261410e565b810103808252602001611f4c9082614054565b611f559061468b565b611f5e91614959565b60405182518190611f7381836020880161410e565b810183815203602001902060090191825491600160401b83101561165057611fa583611fc5958760209601815561492c565b60ff82549160031b1b19169055826040519483868095519384920161410e565b820190815203019020016107ef815461467c565b90508801518a61138d565b908891601f198216908460005260206000209160005b8b8282106120305750508311612017575b5050811b019055611e6d565b89015160001960f88460031b161c19169055898061200b565b83015184558c959093019260209283019201611ffa565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b33600052600660205261219b6112dd61027b6004604060002001604051928391602083019061452e565b6121b960405161027b602082895161018b818c85808601910161410e565b148015906121e1575b6121d0575b611d23906146ae565b506121da83614c82565b50836121c7565b5033600052600660205261220c6112dd61027b6005604060002001604051928391602083019061452e565b61222a60405161027b602082895161018b818c85808601910161410e565b14156121c2565b503360005260066020526005604060002001604051612258816112dd60208201809561452e565b519020604051602081019061227a6020828161018b8b8781519384920161410e565b51902014611d14565b346101a35760803660031901126101a3576004356001600160401b0381116101a3576122b3903690600401614090565b60443580151581036101a357600033600052600660205260046040600020016040516122e7816112dd60208201809561452e565b5190206040516020810190612307602082885161018b8187858d0161410e565b519020148015612e54575b15612d95575061232260016146ae565b61233f60405161027b602082865161018b81848401858b0161410e565b9061234983614c82565b916040516020810190612367602082885161018b8187858d0161410e565b5190209181600052600860205260406000209233600052600660205260036040600020015491604051926020840152602083526123a38361401e565b865115612d5a57600685015460046123c26123bd8a614c82565b61431d565b015460011c60010190816001116103f9571115612d1557845460ff8160101c16612cdc57600460ff821610156104545760ff6002911603612c9d571515600103612937575060026008840154036128e05761243160405161027b602082895161018b818c85808601910161410e565b6000526008602052604060002060405161244a81614039565b60008082526008830154919290805b8360ff821610612887575050505042600a01600a116103f9576124a46020600486019742600a0189556201000362ff00ff19885416178755816040519382858094519384920161410e565b8101600981520301902095600160ff19885416178755600685015460048801556124ce338861460e565b6003850154600288015554600387015560243560078701556124f660058501600888016146f3565b82600587015560078401546001870155600284015460068701558051906001600160401b0382116116505761253b8261253260098a0154614228565b60098a016145c9565b602090601f83116001146128155761256b9291600091836115d65750508160011b916000199060031b1c19161790565b60098601555b8051906001600160401b0382116116505761259c82612593600a890154614228565b600a89016145c9565b602090601f83116001146127a3576125cc9291600091836127985750508160011b916000199060031b1c19161790565b600a8501555b60005b6008830154811015612635578061262f6125fd6125f76001946008880161440b565b506147e8565b60ff81511690602060408201519101516040519261261a84614003565b835260208301526040820152600b880161481a565b016125d5565b5092505081600052600860205260086040600020600081556000600182015560006002820155600060038201556000600482015561267560058201614633565b6000600682015560006007820155018054906000815581612755575b50506020600292612740926126f06126cc6040519360078451958781818801986126bc81838c61410e565b8101600581520301902001614e26565b6009604051868186516126e081838b61410e565b810160058152030190200161492c565b81549060031b9060ff6003831b921b191617905560036040518481845161271881838961410e565b810160058152030190200161272d815461467c565b905560405193849283925192839161410e565b81016005815203019020016107ef815461494c565b816003029160038304036103f9576000526020600020908101905b8181101561269157806000600392556000600182015561279260028201614633565b01612770565b0151905087806114c2565b9190600a87016000526020600020906000935b601f19841685106127fa576001945083601f198116106127e1575b505050811b01600a8501556125d2565b015160001960f88460031b161c191690558680806127d1565b818101518355602094850194600190930192909101906127b6565b9190600988016000526020600020906000935b601f198416851061286c576001945083601f19811610612853575b505050811b016009860155612571565b015160001960f88460031b161c19169055878080612843565b81810151835560209485019460019093019290910190612828565b816001612897836008870161440b565b500154116128ae575b6128a990614c71565b612459565b93505060016128c0846008840161440b565b5001546128a96128d86002610be8876008870161440b565b9490506128a0565b60405162461bcd60e51b815260206004820152602960248201527f53696e676c652d776176652072657175697265732065786163746c7920322063604482015268616e6469646174657360b81b6064820152608490fd5b9280959450600292506008915001541115612c58576000905b600884015480831015612a615761296a836008870161440b565b50600101546064351115612a5057600019908082019081116103f957612993906008870161440b565b506129a1846008880161440b565b6129f657818103612a22575b505060088501548015612a0c576129c98282016008880161440b565b6129f65760028160006129e493556000600182015501614633565b01600885015560006006850155612950565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6002808360ff612a4995541660ff19855416178455600181015460018501550191016146f3565b85806129ad565b5090612a5b9061467c565b90612950565b509291905060005b6008830154811015612a91578060006001612a8881946008880161440b565b50015501612a69565b509180600052600d602052604060002090815415612c1e5760005b8254811015612af75760019082600052600a6020526040600020612ad082866147d0565b848060a01b0391549060031b1c16600052602052604060002060ff19815416905501612aac565b508154909160005b828110612b9a5750505091612b79917f92336a19fa05b8a2d104c1cdeb6b25edcc9dd48abbb73f16cfbe714c614c502593600052600d602052604060002080546000825580612b7e575b505060078101612b59815461467c565b905562ff0000198154169055604051918291602083526020830190614131565b0390a1005b612b93916000526020600020908101906145b2565b8480612b49565b60019084600052600a6020527f676300808a8817a4676fd8567b046338b857c2bbd7a4f128527a83f439c558dc604080600020612bd784876147d0565b9190868060a01b03928391549060031b1c1660005260205260ff82600020541690612c0285886147d0565b90549060031b1c1690825191825215156020820152a101612aff565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d9bdd195c9cc81d1bc81c995cd95d60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4d6f7265207468616e20322063616e64696461746573207265717569726564006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b336000526006602052612dbf6112dd61027b6004604060002001604051928391602083019061452e565b612ddc60405161027b602082885161018b81848401858d0161410e565b14801590612e05575b612df3575b612322906146ae565b50612dfd82614c82565b506001612dea565b50336000526006602052612e306112dd61027b6005604060002001604051928391602083019061452e565b612e4d60405161027b602082885161018b81848401858d0161410e565b1415612de5565b503360005260066020526005604060002001604051612e7b816112dd60208201809561452e565b5190206040516020810190612e9b602082885161018b8187858d0161410e565b51902014612312565b346101a35760003660031901126101a357612eca60018060a01b0360015416331461446e565b602060ff600054166040519015158152f35b346101a35760603660031901126101a3576004356001600160401b0381116101a357612f0c903690600401614090565b6024356001600160401b0381116101a357612f2b903690600401614090565b90612f3f600160ff600054161515146144f7565b336000526007602052604060002090604051906020820191604435835260208152612f698161401e565b5191516001600160801b031981169290601082106135e7575b505061138860046040516020818851612f9e8183858d0161410e565b81016005815203019020015410156135a25760018151111561356457601881511015613515573360005260076020526003604060002001604051612fea816112dd60208201809561452e565b519020604051602081019061300c6020828161018b8b8781519384920161410e565b5190201415806134c2575b806134a9575b15613464576001600261302f8661431d565b0154101561342757613062600660405160208188516130518183858d0161410e565b810160058152030190200154614228565b156133e2576130746003840154614228565b6132de5783516001600160401b038111611650576130a2816130996003870154614228565b600387016145c9565b6020601f82116001146132725790806130d09260009161326757508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b6130f9338461460e565b805160028401916001600160401b0382116116505761311c8261149a8554614228565b602090601f83116001146131ff5761314c9291600091836127985750508160011b916000199060031b1c19161790565b90555b600060405161315d81614039565b526005820180549060008155816131d8575b60046131c3602087878760ff199160018382541617905560018060801b031916600052600c835260016040600020918254161790556131ae845461467c565b8455816040519382858094519384920161410e565b81016005815203019020016107ef815461467c565b6000526020600020908101905b8181101561316f57806131f9600192614633565b016131e5565b90601f198316918460005260206000209260005b81811061324f5750908460019594939210613236575b505050811b01905561314f565b015160001960f88460031b161c19169055868080613229565b92936020600181928786015181550195019301613213565b90508601518761138d565b906003850160005260206000206000925b601f19831684106132c6576001935082601f198116106132ad575b5050811b0160038401556130d6565b87015160001960f88460031b161c19169055868061329e565b87810151825560209384019360019092019101613283565b60048301546132ec81614228565b156132f8575b506130ef565b8451906001600160401b038211611650578161331661331f92614228565b600487016145c9565b6020601f821160011461337657908061334d9260009161326757508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b03198416179055846132f2565b906004850160005260206000206000925b601f19831684106133ca576001935082601f198116106133b1575b5050811b016004840155613353565b87015160001960f88460031b161c1916905586806133a2565b87810151825560209384019360019092019101613387565b60405162461bcd60e51b815260206004820152601b60248201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152606490fd5b5033600052600e60205260ff604060002054161561301d565b5033600052600760205260046040600020016040516134e9816112dd60208201809561452e565b519020604051602081019061350b6020828161018b8b8781519384920161410e565b5190201415613017565b60405162461bcd60e51b815260206004820152602160248201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152606490fd5b6001600160801b031960109290920360031b82901b161691508480612f82565b346101a3576020806003193601126101a3576004356001600160401b0381116101a35781610c5c61363c923690600401614090565b810160058152030190209060086009830191806136676008613660600788016144a6565b96016144a6565b604051938485918488549283815201918298600052856000206000925b82601f850110613bb35750926137d595949287926137b495549184828210613b99575b828210613b7c575b828210613b5f575b828210613b42575b828210613b26575b828210613b09575b828210613aec575b828210613acf575b828210613ab2575b828210613a95575b828210613a78575b828210613a5b575b828210613a3e575b828210613a21575b828210613a04575b8282106139e7575b8282106139ca575b8282106139ad575b828210613990575b828210613973575b828210613956575b828210613939575b82821061391c575b8282106138ff575b8282106138e2575b8282106138c5575b8282106138a8575b82821061388b575b82821061386e575b828210613851575b828210613834575b501061381e575b506137c89a999896509493929190940385614054565b6040519788976060895260608901906141e7565b90878203848901526141e7565b918583036040870152519182815201929160005b8281106137f857505050500390f35b919383955090808261380e60019483975161421b565b01950191019185949391926137e9565b8161382b9160f81c61421b565b0185908b61379e565b846138486001939660ff8760f01c1661421b565b01930184613797565b846138656001939660ff8760e81c1661421b565b0193018461378f565b846138826001939660ff8760e01c1661421b565b01930184613787565b8461389f6001939660ff8760d81c1661421b565b0193018461377f565b846138bc6001939660ff8760d01c1661421b565b01930184613777565b846138d96001939660ff8760c81c1661421b565b0193018461376f565b846138f66001939660ff8760c01c1661421b565b01930184613767565b846139136001939660ff8760b81c1661421b565b0193018461375f565b846139306001939660ff8760b01c1661421b565b01930184613757565b8461394d6001939660ff8760a81c1661421b565b0193018461374f565b8461396a6001939660ff8760a01c1661421b565b01930184613747565b846139876001939660ff8760981c1661421b565b0193018461373f565b846139a46001939660ff8760901c1661421b565b01930184613737565b846139c16001939660ff8760881c1661421b565b0193018461372f565b846139de6001939660ff8760801c1661421b565b01930184613727565b846139fb6001939660ff8760781c1661421b565b0193018461371f565b84613a186001939660ff8760701c1661421b565b01930184613717565b84613a356001939660ff8760681c1661421b565b0193018461370f565b84613a526001939660ff8760601c1661421b565b01930184613707565b84613a6f6001939660ff8760581c1661421b565b019301846136ff565b84613a8c6001939660ff8760501c1661421b565b019301846136f7565b84613aa96001939660ff8760481c1661421b565b019301846136ef565b84613ac66001939660ff8760401c1661421b565b019301846136e7565b84613ae36001939660ff8760381c1661421b565b019301846136df565b84613b006001939660ff8760301c1661421b565b019301846136d7565b84613b1d6001939660ff8760281c1661421b565b019301846136cf565b84613b396001939660ff87851c1661421b565b019301846136c7565b84613b566001939660ff8760181c1661421b565b019301846136bf565b84613b736001939660ff8760101c1661421b565b019301846136b7565b84613b906001939660ff8760081c1661421b565b019301846136af565b84613baa6001939660ff871661421b565b019301846136a7565b945094959092610400600191613e148854613e0660ff613bd58582851661421b565b613be5858901848d1c831661421b565b613bf760408601828560101c1661421b565b613d9785613d4f6060613c11818401868960181c1661421b565b613d078c613c28608091888b848901921c1661421b565b613cbf60a093613c3f8588018a8d60281c1661421b565b888b61018060c099613c588b8201858560301c1661421b565b613c6a60e08201858560381c1661421b565b613c7d6101008201858560401c1661421b565b613c906101208201858560481c1661421b565b613ca36101408201858560501c1661421b565b613cb66101608201858560581c1661421b565b01921c1661421b565b613cd26101a08c01888b60681c1661421b565b613ce56101c08c01888b60701c1661421b565b613cf86101e08c01888b60781c1661421b565b86896102008d01921c1661421b565b613d1a6102208a01868960881c1661421b565b613d2d6102408a01868960901c1661421b565b613d406102608a01868960981c1661421b565b84876102808b01921c1661421b565b613d626102a08801848760a81c1661421b565b613d756102c08801848760b01c1661421b565b613d886102e08801848760b81c1661421b565b82856103008901921c1661421b565b613daa6103208601828560c81c1661421b565b613dbd6103408601828560d01c1661421b565b613dd06103608601828560d81c1661421b565b613de36103808601828560e01c1661421b565b613df66103a08601828560e81c1661421b565b6103c08501908360f01c1661421b565b6103e083019060f81c61421b565b01950191019091869594928894613684565b346101a35760003660031901126101a357613e4c60018060a01b0360015416331461446e565b602047604051908152f35b346101a3576020806003193601126101a3576004356001600160401b0381116101a357613e88903690600401614090565b906040519180519180820192613e9f81868661410e565b840193600b6009916009875283818398030190200154613ebe8161435a565b94613ec8826143c1565b92613ed28361435a565b9560005b848110613f1957613efe89610bb48a613f0b8b8b6040519687966060885260608801906140d7565b9186830390870152614156565b9083820360408501526141b3565b80613f8c6002610be8838e8e613f66838f613f5d60019b8f8f8f948992613f4e9260ff9760405194859384925192839161410e565b8201908152030190200161440b565b5054169261445a565b52613f7d8d8b604051809381928d5192839161410e565b81018c8152030190200161440b565b613f96828961445a565b52613fa1818861445a565b5081613fcb828d6040518c8180613fbc8d8c5192839161410e565b81018b8152030190200161440b565b500154613fd8828b61445a565b5201613ed6565b346101a35760003660031901126101a3576001546001600160a01b03168152602090f35b606081019081106001600160401b0382111761165057604052565b604081019081106001600160401b0382111761165057604052565b602081019081106001600160401b0382111761165057604052565b90601f801991011681019081106001600160401b0382111761165057604052565b6001600160401b03811161165057601f01601f191660200190565b81601f820112156101a3578035906140a782614075565b926140b56040519485614054565b828452602083830101116101a357816000926020809301838601378301015290565b90815180825260208080930193019160005b8281106140f7575050505090565b835160ff16855293810193928101926001016140e9565b60005b8381106141215750506000910152565b8181015183820152602001614111565b9060209161414a8151809281855285808601910161410e565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106141855750505050505090565b90919293949584806141a3600193601f198682030187528a51614131565b9801930193019194939290614175565b90815180825260208080930193019160005b8281106141d3575050505090565b8351855293810193928101926001016141c5565b90815180825260208080930193019160005b828110614207575050505090565b8351855293810193928101926001016141f9565b9060048210156104545752565b90600182811c92168015614258575b602083101461424257565b634e487b7160e01b600052602260045260246000fd5b91607f1691614237565b9060405191826000825461427581614228565b908184526020946001916001811690816000146142e557506001146142a6575b5050506142a492500383614054565b565b600090815285812095935091905b8183106142cd5750506142a49350820101388080614295565b855488840185015294850194879450918301916142b4565b925050506142a494925060ff191682840152151560051b820101388080614295565b600435906001600160a01b03821682036101a357565b602061433691816040519382858094519384920161410e565b8101600581520301902090565b6001600160401b0381116116505760051b60200190565b9061436482614343565b6143716040519182614054565b8281528092614382601f1991614343565b0190602036910137565b6040906040519161439c83614003565b600283528260005b8281106143b057505050565b8060606020809385010152016143a4565b906143cb82614343565b6143d86040519182614054565b82815280926143e9601f1991614343565b019060005b8281106143fa57505050565b8060606020809385010152016143ee565b8054821015614427576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b8051156144275760200190565b8051600110156144275760400190565b80518210156144275760209160051b010190565b1561447557565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b8282106144dd575050506142a492500383614054565b8554845260019586019588955093810193909101906144c7565b156144fe57565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b60009291815461453d81614228565b92600191808316908115614597575060011461455a575b50505050565b9091929394506000526020906020600020906000915b8583106145865750505050019038808080614554565b805485840152918301918101614570565b60ff1916845250505081151590910201915038808080614554565b8181106145bd575050565b600081556001016145b2565b9190601f81116145d857505050565b6142a4926000526020600020906020601f840160051c83019310614604575b601f0160051c01906145b2565b90915081906145f7565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b61463d8154614228565b9081614647575050565b81601f60009311600114614659575055565b908083918252614678601f60208420940160051c8401600185016145b2565b5555565b60001981146103f95760010190565b60208151910151906020811061469f575090565b6000199060200360031b1b1690565b156146b557565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b919082039182116103f957565b908082146147cc576147058154614228565b906001600160401b038211611650576147228261149a8554614228565b600090601f8311600114614761576147529291600091836147565750508160011b916000199060031b1c19161790565b9055565b0154905038806114c2565b815260208082208483528183209291601f1985169083905b8282106147b357505090846001959493921061479a575b505050811b019055565b015460001960f88460031b161c19169055388080614790565b8495819295850154815560018091019601940190614779565b5050565b80548210156144275760005260206000200190600090565b906040516147f581614003565b60406148156002839560ff81541685526001810154602086015201614262565b910152565b91908254600160401b8110156116505761483c9060019460018201815561440b565b6129f65760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b03831161165057614889836148838654614228565b866145c9565b602091601f84116001146148c857505081906147529394956000926148bd5750508160011b916000199060031b1c19161790565b0151905038806114c2565b600085815260208120601f1986169890949390925b89831061491557505050836001959697106148fc57505050811b019055565b015160001960f88460031b161c19169055388080614790565b8385015186559485019493810193918101916148dd565b919091805483101561442757600052601f60206000208360051c01921690565b80156103f9576000190190565b8054600160401b81101561165057614976916001820181556147d0565b819291549060031b91821b91600019901b1916179055565b3360003381526020906006825260409060ff8282205416600014614aa6576001600160a01b038416815260068352818120906149c861438c565b926149d560048401614262565b6149de8561443d565b526149e88461443d565b506149f560058401614262565b6149fe8561444a565b52614a088461444a565b506003614a1361438c565b93805460018060b01b03198451818360a01b168a820152600a8152614a378161401e565b614a408861443d565b52614a4a8761443d565b5084519160501b1688820152600a8152614a638161401e565b614a6c8661444a565b52614a768561444a565b50015494815195818701528552614a8c8561401e565b5190614a9782614039565b81526001956001959493929190565b93906007835260ff8186205416600014614bf2576001600160a01b03841685526007835280852092614ad661438c565b92614ae360038601614262565b614aec8561443d565b52614af68461443d565b50614b0360048601614262565b614b0c8561444a565b52614b168461444a565b50614b1f61438c565b60018681015485516001600160801b0319608083901b8116878301526010825293969390614b4c8161401e565b614b558861443d565b52614b5f8761443d565b50835191168582015260108152614b758161401e565b614b7e8661444a565b52614b888561444a565b506005870198600199614b9f6002839b9a01614262565b979695815492614bba614bb185614343565b96519687614054565b8386529182528082208186015b848410614bd75750505050505090565b85838192614be485614262565b815201920193019290614bc7565b91509291508051614c0281614039565b8281528151614c1081614039565b8381528251614c1e81614039565b84815284958533955190614c3182614039565b815293929190565b15614c4057565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b60ff1660ff81146103f95760010190565b604051614c8e8161401e565b60019182825260208201602d60f81b815283846000905b614dd4575b50614cb4906143c1565b93600091600094826000905b614d4f575b5050505081614cda91614ceb94935191614fcd565b614ce4828561445a565b528261445a565b50805115614d0057614cfc9061443d565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b8551811015614dcf576001600160f81b031980614d6c8389614e95565b5116908351156144275784511614614d87575b830183614cc0565b959386614d979187949394614fcd565b614da1858961445a565b52614dac848861445a565b50828601918287116103f95783614dc481949661467c565b979192935050614d7f565b614cc5565b8351811015614e21576001600160f81b03199081614df28287614e95565b511686511561442757879285511614614e0e575b810190614ca5565b91614e19829161467c565b929050614e06565b614caa565b9060005b8254811015614e585781614e3e82856147d0565b90549060031b1c14614e5257600101614e2a565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b908151811015614427570160200190565b6000805b8251811015614f8457614ebd8184614e95565b51603060f891821c101580614f6d575b8015614f3e575b8015614f0f575b15908115614ef7575b50614ef157600101614eaa565b50905090565b60209150614f058386614e95565b51901c1438614ee4565b506061614f1c8386614e95565b51821c10158015614edb5750607a614f348386614e95565b51821c1115614edb565b506041614f4b8386614e95565b51821c10158015614ed45750605a614f638386614e95565b51821c1115614ed4565b506039614f7a8386614e95565b51821c1115614ecd565b505050600190565b60005b8151811015614fc657600160fd1b6001600160f81b0319614fb08385614e95565b511614614fbf57600101614f8f565b5050600190565b5050600090565b9291808211158061509f575b1561505e57614fe882826146e6565b91614ff283614075565b926150006040519485614054565b80845261500f601f1991614075565b01366020850137805b82811061502757509193505050565b6001906001600160f81b031961503d8289614e95565b511661505761504c85846146e6565b9160001a9187614e95565b5301615018565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b508351811115614fd956fea26469706673582212206d65fc0d8dfe724d34db4e02ad5a4fe4be2f536f7c60d2b2deb8791ee2a0242564736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "VotreXActivated",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "previousVotreXOwnerAddress",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "VotreXOwnerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "VotreXOwnerName",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 33,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "organizationsCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 35,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "VotreXUserCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 40,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "organizationData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Organization)126_storage)"
      },
      {
        "astId": 45,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(ElectionAdmins)145_storage)"
      },
      {
        "astId": 50,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "voters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Voter)192_storage)"
      },
      {
        "astId": 55,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "electionInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(ElectionDetail)218_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "electionResults",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)174_storage)"
      },
      {
        "astId": 66,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "hasVoted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 70,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "electionExistanceChecks",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 74,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "votersIDExists",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes16,t_bool)"
      },
      {
        "astId": 79,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "votersList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 83,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "registeredAdmin",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 87,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "registeredCandidate",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 90,
        "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
        "label": "candidateList",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ElectionStatus)95)dyn_storage": {
        "base": "t_enum(ElectionStatus)95",
        "encoding": "dynamic_array",
        "label": "enum TestCompleXA2B.ElectionStatus[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CandidateDetail)225_storage)dyn_storage": {
        "base": "t_struct(CandidateDetail)225_storage",
        "encoding": "dynamic_array",
        "label": "struct TestCompleXA2B.CandidateDetail[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes10": {
        "encoding": "inplace",
        "label": "bytes10",
        "numberOfBytes": "10"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ElectionStatus)95": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2B.ElectionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OrganizationType)98": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2B.OrganizationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ElectionAdmins)145_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2B.ElectionAdmins)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionAdmins)145_storage"
      },
      "t_mapping(t_address,t_struct(Voter)192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2B.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)192_storage"
      },
      "t_mapping(t_bytes16,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(ElectionDetail)218_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TestCompleXA2B.ElectionDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionDetail)218_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)174_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2B.ElectionResult)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionResult)174_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Organization)126_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2B.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)126_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CandidateDetail)225_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.CandidateDetail",
        "members": [
          {
            "astId": 220,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidateID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 222,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidateVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 224,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidateName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElectionAdmins)145_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.ElectionAdmins",
        "members": [
          {
            "astId": 128,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 130,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "adminOrgCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 132,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "AdminVoterIDOrg1",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 134,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "AdminVoterIDOrg2",
            "offset": 12,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 136,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionAdminAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 138,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "nextOrgCreationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 140,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "adminName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 142,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 144,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ElectionDetail)218_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.ElectionDetail",
        "members": [
          {
            "astId": 195,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ElectionStatus)95"
          },
          {
            "astId": 197,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidateList",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 199,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "isFinished",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 201,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 203,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 205,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 209,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "orgID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 211,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "totalParticipants",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 213,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "waveNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 217,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidates",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(CandidateDetail)225_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ElectionResult)174_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.ElectionResult",
        "members": [
          {
            "astId": 147,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "isPruned",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 149,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "adminAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 151,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "waveNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 153,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 155,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 157,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "totalVoter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 159,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionID",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 161,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionName",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 163,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "digitalSignature",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 165,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "registeredOrganization",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 167,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionWinner",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 169,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "signedBy",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 173,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "candidates",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(CandidateDetail)225_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Organization)126_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.Organization",
        "members": [
          {
            "astId": 101,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "orgType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrganizationType)98"
          },
          {
            "astId": 103,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionAdminAddresses",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 105,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "onPreparationElectionCounter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 107,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "activeElectionCounter",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 109,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "archivedElectionCounter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 111,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "totalMembers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 113,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "orgName",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 115,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "orgID",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 118,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionIDs",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 121,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "ElectionName",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 125,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "electionStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_enum(ElectionStatus)95)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Voter)192_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2B.Voter",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 178,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "VoterAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 180,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "VoterIDOrg1",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 182,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "VoterIDOrg2",
            "offset": 16,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 184,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "VoterName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 186,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 188,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 191,
            "contract": "contracts/Ultimate_VotreXSystemRC2B.sol:TestCompleXA2B",
            "label": "participatedElectionEvents",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
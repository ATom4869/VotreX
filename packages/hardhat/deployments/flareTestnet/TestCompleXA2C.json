{
  "address": "0x1CD12738d77B681c35b07a728AB1584D6846D6a6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CheckTokenETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VotreXOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "addCandidateDetail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "adminOrgCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg1",
          "type": "bytes10"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg2",
          "type": "bytes10"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nextOrgCreationBlock",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "adminName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_candidateCount",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isHaveCandidateMode",
          "type": "bool"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "electionInfo",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "candidateList",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isHaveCandidateMode",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "electionResults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPruned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "digitalSignature",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "registeredOrganization",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "electionWinner",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signedBy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isSingleWaveOrFinalStage",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "finishElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getAllCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "candidateID",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "candidateVoteCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            }
          ],
          "internalType": "struct TestCompleXA2C.CandidateDetail[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionID",
          "type": "string"
        }
      ],
      "name": "getCandidateResult",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "candidateID",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateName",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candidateVoteCount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getElectionInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCandidates",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "candidateIDs",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus",
          "name": "statusElection",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isHaveCandidateMode",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "name": "getElectionListInOrg",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "getOrgIDHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "registeredOrgList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "voterIDList",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "isVoterChecked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVotreXActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "organizationData",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2C.OrganizationType",
          "name": "orgType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddresses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "onPreparationElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "archivedElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMembers",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orgName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adminName",
          "type": "string"
        },
        {
          "internalType": "enum TestCompleXA2C.OrganizationType",
          "name": "_orgType",
          "type": "uint8"
        }
      ],
      "name": "registerOrganization",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "uniqueVoterID",
          "type": "bytes32"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModeHaveCandidate",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "VoterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg1",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg2",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "VoterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0x1CD12738d77B681c35b07a728AB1584D6846D6a6",
    "transactionIndex": 0,
    "gasUsed": "4926206",
    "logsBloom": "0x
    "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c",
    "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000c738fdcde9cd2fbd72618d36ed71008b8d001ba4000000000000000000000000000000000000000000000000000000000000421a",
        "logIndex": 0,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d00000000000000000000000000000000000000000000000000000000000093ec",
        "logIndex": 1,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d",
        "logIndex": 2,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008f11",
        "logIndex": 3,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000a90db6d10f856799b10ef2a77ebcbf460ac71e520000000000000000000000000000000000000000000000000000000000005fab",
        "logIndex": 4,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 15044883,
        "transactionHash": "0x035a817b83a8943f13e56aabcc41e6a582a0016167012108c155788923196313",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000000b162ca3acf3482d3357972e12d794434085d83900000000000000000000000000000000000000000000000000000000000103ba",
        "logIndex": 5,
        "blockHash": "0xd74204fe71a1938d0b5915baf4aee5ff9ea8d5ed94b064dc74f501f0acc6860c"
      }
    ],
    "blockNumber": 15044883,
    "cumulativeGasUsed": "4926206",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2806b35c12e15557c3e8c738179174b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CheckTokenETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VotreXOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"addCandidateDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"adminOrgCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg1\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg2\",\"type\":\"bytes10\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextOrgCreationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"adminName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_electionName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_candidateCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isHaveCandidateMode\",\"type\":\"bool\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"electionInfo\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2C.ElectionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"candidateList\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isHaveCandidateMode\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPruned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"digitalSignature\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"registeredOrganization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionWinner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signedBy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isSingleWaveOrFinalStage\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"finishElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getAllCandidates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"}],\"internalType\":\"struct TestCompleXA2C.CandidateDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_electionID\",\"type\":\"string\"}],\"name\":\"getCandidateResult\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"candidateID\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateName\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candidateVoteCount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getElectionInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"electionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCandidates\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"candidateIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"enum TestCompleXA2C.ElectionStatus\",\"name\":\"statusElection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isHaveCandidateMode\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"name\":\"getElectionListInOrg\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum TestCompleXA2C.ElectionStatus[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"getOrgIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"registeredOrgList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"voterIDList\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"isVoterChecked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotreXActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"organizationData\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2C.OrganizationType\",\"name\":\"orgType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"onPreparationElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"archivedElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMembers\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orgName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adminName\",\"type\":\"string\"},{\"internalType\":\"enum TestCompleXA2C.OrganizationType\",\"name\":\"_orgType\",\"type\":\"uint8\"}],\"name\":\"registerOrganization\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_voterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueVoterID\",\"type\":\"bytes32\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModeHaveCandidate\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"VoterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg1\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg2\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"VoterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotreXSystemRC2C.sol\":\"TestCompleXA2C\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/UtilityLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.7.0;\\n\\nlibrary UtilityLibrary{\\n\\n    function extractOrgId(string memory _userElectionID) internal pure returns (string memory) {\\n        string[] memory parts = UtilityLibrary.splitString(_userElectionID, \\\"-\\\");\\n        require(parts.length > 0, \\\"Invalid custom election ID format\\\");\\n\\n        return parts[0];\\n    }\\n\\n    function decodeBytes10(bytes10 data) internal pure returns (string memory) {\\n        string memory decodedString = new string(10);\\n        \\n        assembly {\\n            mstore(add(decodedString, 32), data)\\n        }\\n\\n        return decodedString;\\n    }\\n\\n    function capitalizeFirstLetter(string memory str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        if (bStr.length == 0) return \\\"\\\"; // Return empty string if no input\\n\\n        // \\u2705 Convert first letter to uppercase\\n        if (bStr[0] >= 0x61 && bStr[0] <= 0x7A) { // Check if lowercase a-z\\n            bStr[0] = bytes1(uint8(bStr[0]) - 32);\\n        }\\n\\n        // \\u2705 Convert the rest to lowercase\\n        for (uint256 i = 1; i < bStr.length; i++) {\\n            if (bStr[i] >= 0x41 && bStr[i] <= 0x5A) { // Check if uppercase A-Z\\n                bStr[i] = bytes1(uint8(bStr[i]) + 32); // Convert to lowercase\\n            }\\n        }\\n        \\n        return string(bStr);\\n    }\\n    \\n    function arrayContains(string[] storage array, string memory element) internal view returns (bool) {\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            if (keccak256(abi.encodePacked(array[i])) == keccak256(abi.encodePacked(element))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    function onlyAlphanumericCharacters(string memory _input) internal pure returns (bool) {\\n        bytes memory b = bytes(_input);\\n        for (uint i = 0; i < b.length; ++i) {\\n            if (\\n                !((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\n                (uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\n                (uint8(b[i]) >= 97 && uint8(b[i]) <= 122))|| // a-z\\n                uint8(b[i]) == 32 // Space\\n            ){ \\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function appendToStringArray(string[] memory array, string memory newValue) internal pure returns (string[] memory) {\\n        string[] memory newArray = new string[](array.length + 1);\\n        \\n        for (uint32 i = 0; i < array.length; ++i) {\\n            newArray[i] = array[i];\\n        }\\n        \\n        newArray[array.length] = newValue;\\n        \\n        return newArray;\\n    }\\n\\n    function containsWhitespaceCheck(string memory _str) internal pure returns (bool) {\\n        bytes memory strBytes = bytes(_str);\\n\\n        for (uint256 i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == \\\" \\\") {\\n                return true; \\n            }\\n        }\\n\\n        return false; \\n    }\\n\\n\\n    function uintToString(uint48 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n\\n        uint48 temp = value;\\n        uint48 length;\\n        while (temp != 0) {\\n            length++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(length);\\n        uint48 i = length - 1;\\n        while (value != 0) {\\n            buffer[i] = bytes1(uint8(48 + value % 10));\\n            value /= 10;\\n            i--;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\\n    }\\n\\n    function splitString(string memory str, string memory delimiter) internal pure returns (string[] memory) {\\n        bytes memory strBytes = bytes(str);\\n        bytes memory delimiterBytes = bytes(delimiter);\\n\\n        uint delimiterCount = 1;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                ++delimiterCount;\\n            }\\n        }\\n\\n        string[] memory parts = new string[](delimiterCount);\\n\\n        uint partStart = 0;\\n        uint partIndex = 0;\\n        for (uint i = 0; i < strBytes.length; ++i) {\\n            if (strBytes[i] == delimiterBytes[0]) {\\n                parts[partIndex] = substring(str, partStart, i);\\n                partStart = i + 1;\\n                partIndex++;\\n            }\\n        }\\n\\n        // Add the last part\\n        parts[partIndex] = substring(str, partStart, strBytes.length);\\n\\n        return parts;\\n    }\\n\\n    function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\\n        bytes memory strBytes = bytes(str);\\n        require(startIndex <= endIndex && endIndex <= strBytes.length, \\\"Invalid substring indices\\\");\\n\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint i = startIndex; i < endIndex; ++i) {\\n            result[i - startIndex] = strBytes[i];\\n        }\\n\\n        return string(result);\\n    }\\n\\n    function extractOrgIdFromElectionId(string memory _userElectionID) internal pure returns (string memory) {\\n        bytes memory orgIdBytes = bytes(_userElectionID);\\n\\n        // Split the input string at the hyphen ('-')\\n        uint8 i = 0;\\n        while (i < orgIdBytes.length && orgIdBytes[i] != '-'){  // ASCII code for hyphen '-'\\n            ++i;\\n        }\\n\\n        // If a hyphen is found, extract the organization ID\\n        if (i < orgIdBytes.length) {\\n            bytes memory extractedBytes = new bytes(i);\\n            for (uint8 j = 0; j < i; ++j) {\\n                extractedBytes[j] = orgIdBytes[j];\\n            }\\n            return string(extractedBytes);\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    function concat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return string(abi.encodePacked(bytes(_a), bytes(_b)));\\n    }\\n\\n\\n}\",\"keccak256\":\"0xb277d9fcd7e708b7c7019075abeaa0c252524d421e86b1080bac3d1820d182bb\",\"license\":\"MIT\"},\"contracts/VotreXSystemRC2C.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma abicoder v2;\\npragma solidity ^0.8.24;\\n\\nimport \\\"./UtilityLibrary.sol\\\";\\n\\ncontract TestCompleXA2C{\\n\\n    using UtilityLibrary for *;\\n\\n    constructor(){\\n        VotreXOwnerAddress = msg.sender;\\n        VotreXActivated = true;\\n    }\\n\\n    uint256 private organizationsCounter;\\n    bool private VotreXActivated;\\n    address private previousVotreXOwnerAddress;\\n    address private VotreXOwnerAddress;\\n    bytes32 public VotreXOwnerName = keccak256(abi.encodePacked(\\\"ATom\\\"));\\n    uint256 private VotreXUserCounter;\\n    \\n    mapping(string  => Organization) public organizationData;\\n    mapping(address => ElectionAdmins) public admin;\\n    mapping(address => Voter) public voters;\\n    mapping(bytes32 => address[]) private votersList;\\n    mapping(bytes32 => mapping(address => bool)) public hasVoted;\\n    mapping(bytes32 => ElectionDetail) public electionInfo;\\n    mapping(string  => ElectionResult) public electionResults;\\n    mapping(bytes32 => bool) private electionExistanceChecks;\\n    mapping(bytes16 => bool) private votersIDExists;\\n    mapping(address => bool) private registeredAdmin;\\n\\n    enum ElectionStatus {\\n        Preparation,\\n        Scheduled,\\n        Started,\\n        Finished\\n    }\\n\\n    enum OrganizationType {\\n        Organization,\\n        Corporate\\n    }\\n\\n    struct Organization {\\n        OrganizationType orgType;\\n        address electionAdminAddresses;\\n        uint256 onPreparationElectionCounter;\\n        uint256 activeElectionCounter;\\n        uint256 archivedElectionCounter;\\n        uint256 totalMembers;\\n        bytes32 orgName;\\n        string orgID;\\n        bytes32[] electionIDs;\\n        bytes32[] ElectionName;\\n        ElectionStatus[] electionStatus;\\n    }\\n\\n    struct ElectionAdmins {\\n        bool isRegistered;\\n        uint8 adminOrgCount;\\n        bytes10 AdminVoterIDOrg1;\\n        bytes10 AdminVoterIDOrg2;\\n        address electionAdminAddress;\\n        uint256 nextOrgCreationBlock;\\n        bytes32 adminName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n    }\\n\\n    struct ElectionResult {\\n        bool isPruned;\\n        address adminAddress;\\n        uint256 waveNumber;\\n        uint startTime;\\n        uint endTime;\\n        uint totalVoter;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        bytes32 digitalSignature;\\n        string registeredOrganization;\\n        string electionWinner;\\n        string signedBy;\\n        CandidateDetail[] candidates;\\n    }\\n    \\n    struct Voter{\\n        bool isRegistered;\\n        address VoterAddress;\\n        bytes16 VoterIDOrg1;\\n        bytes16 VoterIDOrg2;\\n        string VoterName;\\n        string RegisteredOrgID1;\\n        string RegisteredOrgID2;\\n    }\\n\\n    struct ElectionDetail{\\n        ElectionStatus status;\\n        uint8 candidateList;\\n        bool isFinished;\\n        bool isHaveCandidateMode;\\n        bytes32 electionID;\\n        bytes32 electionName;\\n        uint startTime;\\n        uint endTime;\\n        string orgID;\\n        uint256 totalParticipants;\\n        uint256 waveNumber;\\n        CandidateDetail[] candidates;\\n    }\\n\\n    struct CandidateDetail{\\n        uint8 candidateID;\\n        uint256 candidateVoteCount;\\n        string candidateName;\\n    }\\n\\n    modifier onlyOrgAdmin(string memory _IDParameters) {\\n        bool isAdminRegisteredForOrg = false;\\n        if (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n            ||\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(_IDParameters))\\n        ) {\\n            isAdminRegisteredForOrg = true;\\n        } else if (\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n            ||\\n            bytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            bytes32(abi.encodePacked(_IDParameters))\\n        ) {\\n            string memory orgID = UtilityLibrary.extractOrgId(_IDParameters);\\n            isAdminRegisteredForOrg = true;\\n\\n        }\\n\\n        require(\\n            isAdminRegisteredForOrg,\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedMember(string memory _userElectionID) {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        bool isAdminRegisteredForOrg = (\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        bool isVoterRegisteredForOrg = (\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        )||(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            ==\\n            keccak256(abi.encodePacked(orgID))\\n        );\\n\\n        require(\\n            isAdminRegisteredForOrg || isVoterRegisteredForOrg,\\n            // error 31a = Incorrect access control\\n            \\\"error:31a\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier canCreateOrg() {\\n        require(\\n            block.number >= admin[msg.sender].nextOrgCreationBlock,\\n            // error 32 = error Block await for 2nd Admin Org Registration\\n            \\\"error:32\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyVotreXOwner() {\\n        require(\\n            msg.sender == VotreXOwnerAddress,\\n            // error 31b = errror Owner access\\n            \\\"error:31b\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhenActivated() {\\n        require(\\n            VotreXActivated == true,\\n            // error 33 = error system still disabled\\n            \\\"error:33\\\"\\n        );\\n        _;\\n    }\\n\\n    function CheckTokenETHBalance () external view onlyVotreXOwner returns (uint256) {\\n        return (address(this).balance);\\n    }\\n\\n    function changeSystemState() external onlyVotreXOwner{\\n        if (VotreXActivated == false) {\\n            VotreXActivated = true;\\n        } else {\\n            VotreXActivated = false;\\n        }\\n    }\\n\\n    function registerOrganization(\\n        string memory _orgName,\\n        string memory _orgID,\\n        string memory _adminName,\\n        OrganizationType _orgType\\n    )\\n        external\\n        payable\\n        canCreateOrg\\n        onlyWhenActivated\\n    {\\n        ElectionAdmins storage AdminInfo = admin[msg.sender];\\n\\n        require(\\n            organizationsCounter < 32000,\\n            // error 35 = error limit reached\\n            \\\"error:35\\\"\\n        );\\n\\n        require(\\n            bytes32(organizationData[_orgID].orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].electionAdminAddresses == address(0),\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            UtilityLibrary.onlyAlphanumericCharacters(_orgID),\\n            // error36b = Only Alpha Numeric character allowed\\n            \\\"error:36b\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            bytes(_orgName).length < 32,\\n            // error 36c = error character length limit\\n\\n            \\\"error:36c\\\"\\n        );\\n\\n        require(\\n            bytes(_adminName).length > 1\\n        );\\n\\n        require(\\n            bytes(_orgID).length == 3\\n            ||\\n            bytes(_orgID).length == 4\\n            ||\\n            bytes(_orgID).length == 5,\\n            \\\"Org ID should 3 - 5 characters\\\"\\n        );\\n\\n        require(\\n            !UtilityLibrary.containsWhitespaceCheck(_orgID),\\n            \\\"spaces in Org ID not allowed\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID)),\\n            \\\"Admin is registered\\\"\\n        );\\n\\n        Organization storage newOrg = organizationData[_orgID];\\n        newOrg.orgID = _orgID;\\n        newOrg.orgName = bytes32(abi.encodePacked(_orgName));\\n        newOrg.orgType = _orgType;\\n        newOrg.electionAdminAddresses = msg.sender;\\n        newOrg.activeElectionCounter = 0;\\n        newOrg.totalMembers = 1;\\n\\n        bytes10 UniqueAdminvoterID = bytes10(abi.encodePacked(_orgID, \\\"-\\\", \\\"Admin\\\"));\\n\\n        if (bytes(admin[msg.sender].RegisteredOrgID1).length == 0) {\\n            admin[msg.sender].RegisteredOrgID1 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg1 = UniqueAdminvoterID;\\n        } else if (bytes(admin[msg.sender].RegisteredOrgID2).length == 0) {\\n            admin[msg.sender].RegisteredOrgID2 = _orgID;\\n            admin[msg.sender].AdminVoterIDOrg2 = UniqueAdminvoterID;\\n        }\\n\\n        AdminInfo.electionAdminAddress = msg.sender;\\n        AdminInfo.adminName = bytes32(abi.encodePacked(_adminName));\\n        AdminInfo.isRegistered = true;\\n        ++AdminInfo.adminOrgCount;\\n\\n        registeredAdmin[msg.sender] = true;\\n        votersIDExists[UniqueAdminvoterID] = true;\\n\\n        AdminInfo.nextOrgCreationBlock = 50 + block.number;\\n\\n        ++organizationsCounter;\\n        ++VotreXUserCounter;\\n    }\\n\\n    function registerVoter(\\n        string memory _voterName,\\n        string memory _orgID,\\n        bytes32 uniqueVoterID\\n    )\\n        external\\n        payable\\n        onlyWhenActivated\\n    {\\n\\n        Voter storage voter = voters[msg.sender];\\n        bytes16 VoterID16 = bytes16(abi.encodePacked(uniqueVoterID));\\n\\n        require(\\n            organizationData[_orgID].totalMembers < 5000,\\n            \\\"Maximum member limit reached\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length > 1,\\n            \\\"Please fill Voter Name\\\"\\n        );\\n\\n        require(\\n            bytes(_voterName).length < 24,\\n            \\\"Voter name limit is 24 characters\\\"\\n        );\\n\\n        require(\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2))\\n            !=\\n            keccak256(abi.encodePacked(_orgID))\\n            &&\\n            !registeredAdmin[msg.sender],\\n            \\\"Voter is registered in Org\\\"\\n        );\\n\\n        require(\\n            ElectionActiveCheck(_orgID) < 1,\\n            \\\"Election in progress!\\\"\\n        );\\n\\n        require(\\n            bytes16(uniqueVoterID).length > 0\\n        );\\n\\n        require(\\n            bytes(organizationData[_orgID].orgID).length != 0,\\n            \\\"Organization does not exist\\\"\\n        );\\n\\n        if (bytes(voter.RegisteredOrgID1).length == 0) {\\n            voter.RegisteredOrgID1 = _orgID;\\n            voter.VoterIDOrg1 = VoterID16;\\n        } else if (bytes(voter.RegisteredOrgID2).length == 0) {\\n            voter.RegisteredOrgID2 = _orgID;\\n            voter.VoterIDOrg2 = VoterID16;\\n        }\\n\\n        voter.VoterAddress = msg.sender;\\n        voter.VoterName = _voterName;\\n        voter.isRegistered = true;\\n        votersIDExists[VoterID16] = true;\\n        ++VotreXUserCounter;\\n        ++organizationData[_orgID].totalMembers;\\n    }\\n\\n    function createElection(\\n        string memory _orgID,\\n        string memory _userElectionID,\\n        string memory _electionName,\\n        uint8 _candidateCount,\\n        bool _isHaveCandidateMode\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyOrgAdmin(_orgID)\\n    {\\n        require(\\n            bytes(organizationData[_orgID].orgID).length > 0\\n        );\\n\\n        require(\\n            bytes(_userElectionID).length > 1,\\n            // error 36a = error incorrect null value\\n            \\\"error 36a\\\"\\n        \\n        );\\n\\n        require(\\n            bytes(_userElectionID).length < 5,\\n            \\\"ID should < 5 characters\\\"\\n        );\\n\\n        require(\\n            bytes(_electionName).length > 1\\n        );\\n\\n        require(\\n            bytes(_electionName).length < 25,\\n            \\\"Election name should < 25\\\"\\n        );\\n\\n        require(\\n            organizationData[_orgID].activeElectionCounter < 10,\\n            \\\"Maximum events reached\\\"\\n        );\\n\\n        bytes32 generatedElectionID = bytes32(abi.encodePacked(_orgID, \\\"-\\\", _userElectionID));\\n\\n        require(\\n            !electionExistanceChecks[generatedElectionID],\\n            \\\"Election ID exists\\\"\\n        );\\n\\n        ElectionDetail storage newElection = electionInfo[generatedElectionID];\\n        newElection.orgID = _orgID;\\n        newElection.electionID = generatedElectionID;\\n        newElection.electionName = bytes32(abi.encodePacked(_electionName));\\n        newElection.status = ElectionStatus.Preparation;\\n        electionExistanceChecks[generatedElectionID] = true;\\n\\n\\n        if(_isHaveCandidateMode == true){\\n            require(_candidateCount > 1, \\\"Minimum 2 candidates!\\\");\\n\\n            newElection.candidateList = _candidateCount;\\n        } else {\\n            newElection.candidateList = 0;\\n        }\\n\\n        newElection.isHaveCandidateMode = _isHaveCandidateMode;\\n        electionExistanceChecks[generatedElectionID] = true;\\n        organizationData[_orgID].electionIDs.push(generatedElectionID);\\n        organizationData[_orgID].ElectionName.push(bytes32(abi.encodePacked(_electionName)));\\n        organizationData[_orgID].electionStatus.push(ElectionStatus.Preparation);\\n        ++organizationData[_orgID].onPreparationElectionCounter;\\n    }\\n\\n    function startElection(string memory _userElectionID) external onlyOrgAdmin(_userElectionID){\\n        // error 36a = error incorrect null value\\n        require(bytes(_userElectionID).length > 0, \\\"error:36a\\\");\\n\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(bytes16(election.electionID).length > 0, \\\"Invalid election ID\\\");\\n        require(election.status == ElectionStatus.Preparation, \\\"Election is not in preparation\\\");\\n\\n        if(election.isHaveCandidateMode == true){\\n            require(election.candidateList == election.candidates.length, \\\"Candidate Not full\\\");\\n        }\\n        election.startTime = 5 + block.timestamp;\\n        election.status = ElectionStatus.Started;\\n        ++election.waveNumber;\\n        ++organizationData[orgIDs].activeElectionCounter;\\n        --organizationData[orgIDs].onPreparationElectionCounter;\\n        uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, userElectionID);\\n        require(index < organizationData[orgIDs].electionIDs.length, \\\"Election not found\\\");\\n        organizationData[orgIDs].electionStatus[index] = ElectionStatus.Started;\\n    }\\n\\n    function findElectionIndex(bytes32[] storage array, bytes32 electionID) internal view returns (uint256) {\\n        for (uint256 i = 0; i < array.length; i++) {\\n            if (array[i] == electionID) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Election ID not found\\\");\\n    }\\n\\n    function finishElection(string memory _userElectionID, bytes32 _dataHash, bool isSingleWaveOrFinalStage, uint256 _threshold)\\n        external\\n        onlyOrgAdmin(_userElectionID)\\n    {\\n        bytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage elections = electionInfo[packedElectionID];\\n        bytes32 electionIdBytes = keccak256(\\n            abi.encodePacked(\\n                bytes32(abi.encodePacked(_userElectionID)), \\\"-\\\" , elections.electionName\\n            )\\n        );\\n        string memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n        string memory adminName = getAdminName(msg.sender);\\n\\n        require(\\n            bytes(_userElectionID).length > 0,\\n            \\\"Invalid election ID\\\"\\n        );\\n\\n        require(\\n            bytes(_userElectionID).length > 0,\\n            \\\"Election ID can't be empty\\\"\\n        );\\n\\n        require(\\n            bytes32(electionInfo[packedElectionID].electionID).length > 0,\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            _dataHash.length > 0,\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(!elections.isFinished, \\\"Election finished\\\");\\n\\n        require(\\n            elections.status == ElectionStatus.Started,\\n            \\\"Election is not started\\\"\\n        );\\n\\n        require(\\n            elections.totalParticipants > calculateValidElection(_userElectionID),\\n            \\\"need 50% total member to finish\\\"\\n        );\\n\\n        if (isSingleWaveOrFinalStage == true)\\n        {\\n            // Kondisi jika hanya 2 kandidat tersisa\\n            require(elections.candidates.length == 2, \\\"need 2 candidates!\\\");\\n            string memory electionWinner = determineWinner(_userElectionID);\\n            elections.endTime = 10 + block.timestamp;\\n            elections.status = ElectionStatus.Finished;\\n            elections.isFinished = true;\\n\\n            ElectionResult storage newelectionResult = electionResults[_userElectionID];\\n            newelectionResult.isPruned = true;\\n            newelectionResult.totalVoter = elections.totalParticipants;\\n            newelectionResult.adminAddress = msg.sender;\\n            newelectionResult.startTime = elections.startTime;\\n            newelectionResult.endTime = elections.endTime;\\n            newelectionResult.digitalSignature = _dataHash;\\n            newelectionResult.registeredOrganization = elections.orgID;\\n            newelectionResult.electionID = packedElectionID;\\n            newelectionResult.waveNumber = elections.waveNumber;\\n            newelectionResult.electionName = elections.electionName;\\n            newelectionResult.electionWinner = electionWinner;\\n            newelectionResult.signedBy = adminName;\\n\\n            for (uint i = 0; i < elections.candidates.length; i++) {\\n                CandidateDetail memory candidate = elections.candidates[i];\\n                newelectionResult.candidates.push(\\n                    CandidateDetail({\\n                        candidateID: candidate.candidateID,\\n                        candidateName: candidate.candidateName,\\n                        candidateVoteCount: candidate.candidateVoteCount\\n                    })\\n                );\\n            }\\n            \\n            delete electionInfo[packedElectionID];\\n            uint256 index = findElectionIndex(organizationData[orgIDs].electionIDs, packedElectionID);\\n            organizationData[orgIDs].electionStatus[index] = ElectionStatus.Finished;\\n            ++organizationData[orgIDs].archivedElectionCounter;\\n            --organizationData[orgIDs].activeElectionCounter;\\n        } else {\\n            // Kondisi jika kandidat lebih dari 2, reset kandidat\\n            require(elections.candidates.length > 2, \\\"More than 2 candidates required\\\");\\n\\n            for (uint256 i = 0; i < elections.candidates.length; ) {\\n                if (elections.candidates[i].candidateVoteCount < _threshold) {\\n                    elections.candidates[i] = elections.candidates[elections.candidates.length - 1];\\n                    elections.candidates.pop(); // Hapus kandidat terakhir\\n                    elections.totalParticipants = 0;\\n                } else {\\n                    ++i;\\n                }\\n            }\\n\\n            // Reset suara kandidat yang tersisa\\n            for (uint256 i = 0; i < elections.candidates.length; i++) {\\n                elections.candidates[i].candidateVoteCount = 0;\\n            }\\n\\n            // Reset status hasVoted untuk semua peserta\\n            address[] storage voter = votersList[electionIdBytes];\\n            require(voter.length > 0, \\\"No voters to reset\\\");\\n\\n            for (uint256 i = 0; i < voter.length; i++) {\\n                hasVoted[electionIdBytes][voter[i]] = false;\\n            }\\n\\n            // Debugging log untuk memastikan reset berjalan\\n            // for (uint256 i = 0; i < voter.length; i++) {\\n            //     bool status = hasVoted[electionIdBytes][voter[i]];\\n            //     emit LogResetVoter(voter[i], status); // Emit event untuk debugging\\n            // }\\n\\n            // Hapus daftar voters untuk tahap berikutnya\\n            delete votersList[electionIdBytes];\\n            ++elections.waveNumber;\\n            elections.isFinished = false;\\n\\n            // emit ElectionReset(_userElectionID);\\n        }\\n    }\\n\\n    function calculateValidElection(string memory _userElectionID)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        string memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n        Organization storage OrgData = organizationData[orgID];\\n        uint256 MIN_VOTES_PERCENTAGE = 1 + (OrgData.totalMembers / 2);\\n\\n        return MIN_VOTES_PERCENTAGE;\\n    }\\n\\n    function getOwnerAddress() external view returns (address) {\\n        return VotreXOwnerAddress;\\n    }\\n\\n    function getOwnerName() external view returns (bytes32) {\\n        return VotreXOwnerName;\\n    }\\n\\n    function getTotalUser() external view returns (uint256) {\\n        return VotreXUserCounter;\\n    }\\n\\n    function getElectionListInOrg(string memory orgID)\\n        external\\n        view\\n        returns (bytes32[] memory, bytes32[] memory, ElectionStatus[] memory)\\n    {\\n        Organization storage org = organizationData[orgID];\\n        return (org.electionIDs, org.ElectionName, org.electionStatus);\\n    }\\n\\n    function getAdminName(address adminAddress) private view returns (string memory) {\\n        return string(abi.encodePacked(admin[adminAddress].adminName));\\n    }\\n\\n    function addCandidateDetail(\\n        string memory _userElectionID,\\n        string memory _candidateName\\n    )\\n        external\\n        onlyOrgAdmin(_userElectionID)\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n\\n        require(bytes(_userElectionID).length > 0);\\n\\n        require(\\n            bytes32(electionInfo[userElectionID].electionID).length > 0,\\n            // error 36a = error incorrect null value\\n            \\\"error:36a\\\"\\n        );\\n\\n        require(\\n            election.candidates.length < election.candidateList,\\n            \\\"Candidate limit reached\\\"\\n        );\\n\\n        require(bytes(_candidateName).length > 0);\\n\\n        require(\\n            bytes(_candidateName).length <= 24,\\n            \\\"name limits 24 characters\\\"\\n        );\\n\\n        require(\\n            UtilityLibrary.onlyAlphanumericCharacters(_candidateName),\\n            \\\"Candidate name can only contain alphabetical\\\"\\n        );\\n\\n        uint8 candidateID = uint8(election.candidates.length);\\n\\n        election.candidates.push(\\n            CandidateDetail({\\n                candidateID: candidateID,\\n                candidateName: _candidateName,\\n                candidateVoteCount: 0\\n            })\\n        );\\n    }\\n\\n    function vote(\\n        string memory _userElectionID,\\n        uint8 candidateID,\\n        string memory _candidateName,\\n        bool isModeHaveCandidate\\n    )\\n        external\\n        onlyWhenActivated\\n        onlyAuthorizedMember(_userElectionID)\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        bytes32 electionName = election.electionName;\\n        bytes32 electionIdBytes = keccak256(abi.encodePacked(userElectionID, \\\"-\\\" , electionName));\\n        string memory formattedName = UtilityLibrary.capitalizeFirstLetter(_candidateName);\\n        if(isModeHaveCandidate == true){\\n            require(bytes(_userElectionID).length > 0, \\\"Election ID can't be empty\\\");\\n            require(candidateID < election.candidates.length, \\\"Invalid candidate ID\\\");\\n            require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\n            require(!hasVoted[electionIdBytes][msg.sender], \\\"Anda sudah memilih!\\\");\\n            \\n            ++election.candidates[candidateID].candidateVoteCount;\\n            ++election.totalParticipants;\\n            \\n            hasVoted[electionIdBytes][msg.sender] = true;\\n            votersList[electionIdBytes].push(msg.sender);\\n        }else{\\n            require(bytes(_candidateName).length > 0, \\\"Silahkan masukkan nama\\\");\\n            require(!hasVoted[electionIdBytes][msg.sender], \\\"Anda sudah memilih!\\\");\\n            require(election.status == ElectionStatus.Started, \\\"Election is not in progress\\\");\\n\\n            uint8 candidateIDs = uint8(election.candidates.length);\\n            bool candidateExists = false;\\n\\n            // Loop melalui array kandidat untuk mencari nama yang cocok\\n            for (uint256 i = 0; i < election.candidates.length; i++) {\\n                if (\\n                    keccak256(abi.encodePacked(election.candidates[i].candidateName))\\n                    ==\\n                    keccak256(abi.encodePacked(formattedName))) {\\n                    // Jika kandidat ditemukan, tambahkan voteCount\\n                    election.candidates[i].candidateVoteCount += 1;\\n                    candidateExists = true;\\n                    break;\\n                    }\\n            }\\n\\n            // Jika kandidat belum ada, tambahkan kandidat baru ke array\\n            if (!candidateExists) {\\n                CandidateDetail memory newCandidate = CandidateDetail({\\n                    candidateID: candidateIDs,\\n                    candidateName: _candidateName,\\n                    candidateVoteCount: 1\\n                });\\n                election.candidates.push(newCandidate);\\n            }\\n            hasVoted[electionIdBytes][msg.sender] = true;\\n            votersList[electionIdBytes].push(msg.sender);\\n            ++election.totalParticipants;\\n        }\\n\\n    }\\n\\n    function getAllCandidates(string memory _userElectionID) public view returns (CandidateDetail[] memory) {\\n        \\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        // Ambil detail pemilu berdasarkan ID\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n\\n        // Pastikan ada kandidat dalam pemilu\\n        require(election.candidates.length > 0, \\\"No candidates found in this election!\\\");\\n\\n        // Kembalikan array kandidat dari pemilu\\n        return election.candidates;\\n    }\\n\\n    function isVotreXActivated() external view returns (bool) {\\n        return VotreXActivated;\\n    }\\n\\n    function getTotalOrganization() external virtual view returns (uint256) {\\n        return organizationsCounter;\\n    }\\n\\n    function getElectionInfo(string memory _userElectionID)\\n        external\\n        view\\n        returns(\\n            bytes32 electionID,\\n            string memory electionName,\\n            uint256 waveNumber,\\n            uint256 totalCandidates,\\n            uint8[] memory candidateIDs, // Added\\n            string[] memory candidateNames,\\n            uint256[] memory voteCounts,\\n            uint256 totalParticipants,\\n            ElectionStatus statusElection,\\n            bool isHaveCandidateMode\\n        )\\n    {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        require(\\n            bytes32(election.electionID).length > 0\\n        );\\n\\n        electionID = election.electionID;\\n        electionName = string(abi.encodePacked(election.electionName));\\n        waveNumber = election.waveNumber;\\n        totalCandidates = election.candidates.length;\\n        candidateIDs = new uint8[](totalCandidates); // Initialized\\n        candidateNames = new string[](totalCandidates);\\n        voteCounts = new uint256[](totalCandidates);\\n        totalParticipants = election.totalParticipants;\\n        statusElection = electionInfo[userElectionID].status;\\n        isHaveCandidateMode = electionInfo[userElectionID].isHaveCandidateMode;\\n\\n        for (uint256 i = 0; i < totalCandidates; ++i) {\\n            candidateIDs[i] = election.candidates[i].candidateID; // Added\\n            candidateNames[i] = election.candidates[i].candidateName;\\n            voteCounts[i] = election.candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            electionID,\\n            electionName,\\n            waveNumber,\\n            totalCandidates,\\n            candidateIDs,\\n            candidateNames,\\n            voteCounts,\\n            totalParticipants,\\n            statusElection,\\n            isHaveCandidateMode\\n        );\\n    }\\n\\n    function getCandidateResult(string memory _electionID) \\n        public \\n        view \\n        returns (\\n            uint8[] memory candidateID,\\n            string[] memory candidateName,\\n            uint256[] memory candidateVoteCount\\n        ) \\n    {\\n\\n        uint totalCandidates = electionResults[_electionID].candidates.length;\\n\\n        uint8[] memory candidateIDs = new uint8[](totalCandidates);\\n        string[] memory candidateNames = new string[](totalCandidates);\\n        uint256[] memory candidateVoteCounts = new uint256[](totalCandidates);\\n\\n        for (uint i = 0; i < totalCandidates; i++) {\\n            candidateIDs[i] = electionResults[_electionID].candidates[i].candidateID;\\n            candidateNames[i] = electionResults[_electionID].candidates[i].candidateName;\\n            candidateVoteCounts[i] = electionResults[_electionID].candidates[i].candidateVoteCount;\\n        }\\n\\n        return (\\n            candidateIDs,\\n            candidateNames,\\n            candidateVoteCounts\\n        );\\n    }\\n\\n    function getUserInfo() external view returns (\\n        bool isRegistered,\\n        bool isAdmin,\\n        address userAddress,\\n        string memory userName,\\n        string[] memory registeredOrgList,\\n        string[] memory voterIDList\\n    ) {\\n        userAddress = msg.sender;\\n\\n        bool isAdminRole = admin[userAddress].isRegistered;\\n        bool isVoterRole = voters[userAddress].isRegistered;\\n\\n        // \\u2705 Initialize arrays before assigning values\\n        string[] memory RegisteredOrgIDList = new string[](2);\\n        string[] memory RegisteredVoterIDList = new string[](2);\\n        string memory combinedName = \\\"\\\"; // Store either admin or voter name\\n\\n        // \\u2705 If user is an Admin, fill RegisteredOrgIDList & VoterIDList\\n        if (isAdminRole) {\\n            ElectionAdmins storage adminInfo = admin[userAddress];\\n\\n            RegisteredOrgIDList[0] = adminInfo.RegisteredOrgID1;\\n            RegisteredOrgIDList[1] = adminInfo.RegisteredOrgID2;\\n\\n            RegisteredVoterIDList[0] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg1));\\n            RegisteredVoterIDList[1] = string(abi.encodePacked(adminInfo.AdminVoterIDOrg2));\\n\\n            combinedName = string(abi.encodePacked(adminInfo.adminName));\\n        }\\n\\n        // \\u2705 If user is a Voter, ensure the data is merged properly\\n        if (isVoterRole) {\\n            Voter storage voter = voters[userAddress];\\n\\n            if (!isAdminRole) {\\n                // \\u2705 If user is ONLY a voter, store voter info directly\\n                RegisteredOrgIDList[0] = voter.RegisteredOrgID1;\\n                RegisteredOrgIDList[1] = voter.RegisteredOrgID2;\\n\\n                RegisteredVoterIDList[0] = string(abi.encodePacked(voter.VoterIDOrg1));\\n                RegisteredVoterIDList[1] = string(abi.encodePacked(voter.VoterIDOrg2));\\n\\n                combinedName = voter.VoterName;\\n            } else {\\n                // \\u2705 If user is BOTH Admin & Voter, merge voter data without overwriting Admin data\\n                if (bytes(RegisteredOrgIDList[1]).length == 0) {\\n                    RegisteredOrgIDList[1] = voter.RegisteredOrgID1;\\n                }\\n\\n                if (bytes(RegisteredVoterIDList[1]).length == 0) {\\n                    RegisteredVoterIDList[1] = string(abi.encodePacked(voter.VoterIDOrg1));\\n                }\\n            }\\n        }\\n\\n        return (\\n            isAdminRole || isVoterRole, // \\u2705 isRegistered (true if either role exists)\\n            isAdminRole, // \\u2705 isAdmin (true only if Admin)\\n            userAddress,\\n            combinedName, // \\u2705 Stores either Admin name or Voter name\\n            RegisteredOrgIDList, // \\u2705 List of registered OrgIDs\\n            RegisteredVoterIDList  // \\u2705 List of voter IDs\\n        );\\n    }\\n\\n\\n    function ElectionActiveCheck(string memory _orgID) private view returns (uint256) {\\n\\n        return organizationData[_orgID].activeElectionCounter;\\n    \\n    }\\n\\n    function determineWinner(string memory _userElectionID) private view returns (string memory) {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        ElectionDetail storage election = electionInfo[userElectionID];\\n        string memory winner = \\\"\\\";\\n        uint256 maxVotes = 0;\\n        for (uint8 i = 0; i < election.candidates.length; ++i) {\\n            if (election.candidates[i].candidateVoteCount > maxVotes) {\\n                maxVotes = election.candidates[i].candidateVoteCount;\\n                winner = election.candidates[i].candidateName;\\n            }\\n        }\\n\\n        return winner;\\n    }\\n    \\n    // function generateUniqueVoterID(string memory _orgID) public view returns (string memory) {\\n    //     uint256 CurrentID = organizationData[_orgID].totalMembers;\\n    //     uint256 nextID = ++CurrentID;\\n\\n    //     return string(abi.encodePacked(_orgID, \\\"-\\\", UtilityLibrary.uint2str(nextID)));\\n    // }\\n\\n    function isVoterChecked(string memory _userElectionID) public view returns (bool) {\\n        bytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n        bytes32 electionName = electionInfo[userElectionID].electionName;\\n        bytes32 electionIdBytes = keccak256(abi.encodePacked(userElectionID, \\\"-\\\", electionName));\\n        return hasVoted[electionIdBytes][msg.sender];\\n    }\\n\\n    function getOrgIDHash(string memory _orgID) external pure returns (bytes32) {\\n        bytes32 orgIDHash = keccak256(abi.encodePacked(_orgID));\\n\\n        return (orgIDHash);\\n    }\\n}\\n\",\"keccak256\":\"0x5e07e89cb5743bd8d3af8022e4d9cd95313cf4a304f77df835e865f5f19373e8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346079576341546f6d60e01b602082019081526004825260408201916001600160401b038311818410176063576040839052519020600355600280546001600160a01b031916331790556001805460ff1916811790556156e4908161007f8239f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd1461464c57508063145ef6e914610f33578063158058f61461433a578063162442e2146141d95780631df3739a146141a85780632c2032c0146139895780633d2acf831461325f57806342b7fa1c1461323c5780634313c4cc146126e35780635398690b1461261d5780635d8d15851461232c57806363a846f81461226857806365c6c43914611b6a578063695c2d241461128e5780637149d8ba1461111a5780637217fcfd146110fc578063800912861461105e57806381929bac14610f515780638783cc8a14610f33578063a3ec138d14610e6e578063a43064cc14610e25578063a9c63aa014610e07578063aadc3b7214610db5578063b205436514610cdf578063b684f78d146107c1578063e0428cf3146105f9578063f544bed8146101be5763f6246dcb1461015357600080fd5b346101b95760203660031901126101b9576004356001600160401b0381116101b95761018560209136906004016146fd565b6040516101ae8382816101a1818301968781519384920161477b565b81010380845201826146c1565b519020604051908152f35b600080fd5b346101b9576020806003193601126101b9576004356001600160401b0381116101b9576101ef9036906004016146fd565b61029c61029660003360005260068552600460406000200190604051918261021a888201809361497c565b039261022e601f19948581018352826146c1565b51902091604051928784018751946102508a82818c01986101a181878c61477b565b5190201480156105af575b156104dd57505061026c6001614a23565b61027884511515614a5b565b6102918560405180936101a1885180928585019061477b565b614a00565b9161513f565b9080600052600a83526040600020805460ff811660048110156104c75761048257600160ff8260181c16151514610436575b60059142830180841161042057600792600291600384015560ff1916178155016102f88154614e16565b905561037a60405192600285519487818189019761031781838b61477b565b8101878152030190200161032b8154614e16565b905560016040518781885161034181838b61477b565b810187815203019020016103558154615023565b905560076040518781885161036b81838b61477b565b810187815203019020016153da565b9260076040518681845161038f81838a61477b565b81018681520301902001548410156103e657936009926103be926103cd9660405194859384925192839161477b565b82019081520301902001615003565b81549060031b9060ff6002831b921b1916179055600080f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600882015460ff8260081c1603156102ce5760405162461bcd60e51b815260048101869052601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b336000526006875261051161050561029160046040600020016040519283918c83019061497c565b038481018352826146c1565b61052b6040516102918a828b516101a1818484018c61477b565b1490811591610556575b50610544575b61026c90614a23565b5061054e8461513f565b50600161053b565b61058d9150610291610581913360005260068a5260056040600020016040519384918c83019061497c565b039081018352826146c1565b6105a760405161029189828a516101a1818484018b61477b565b141587610535565b50336000526006875260056040600020016040516105d4816105058b8201809561497c565b519020604051888101906105f08a828b516101a181878c61477b565b5190201461025b565b346101b95760203660031901126101b9576004356001600160401b0381116101b95761062c6106489136906004016146fd565b6102916020604051836101a1829551809285808601910161477b565b80600052600a6020526040600020906001820154906002926002810154936040519460208601526020855261067c8561468b565b600782015460088301549061069082614c4f565b61069983614cb6565b926106a381614c4f565b94600687015497600052600a6020526040600020549660ff9160005b84811061075257505050509261071060ff96959361071e9361072c966106f86040519d8e9d8e610140918152816020820152019061479e565b9260408d015260608c01528a820360808c0152614744565b9088820360a08a01526147c3565b9086820360c0880152614820565b9260e08501526107426101008501838316614854565b60181c1615156101208301520390f35b808461076360019360088701614a93565b5054166107708289614d1d565b52610789836107828360088801614a93565b500161489b565b610793828b614d1d565b5261079e818a614d1d565b50816107ad8260088701614a93565b5001546107ba828c614d1d565b52016106bf565b346101b95760803660031901126101b9576001600160401b036004358181116101b9576107f29036906004016146fd565b9060ff60243516602435036101b9576044359081116101b9576108199036906004016146fd565b6064359182151583036101b957610838600160ff815416151514614dba565b61090b6108448261513f565b33600052600660205261086b6108796004604060002001604051928391602083019061497c565b03601f1981018352826146c1565b6020815191012060405190602082018351926108a0602082818801966101a181878a61477b565b51902014918215610c8f575b33600052600760205260036040600020016040516108d28161086b60208201809561497c565b51902060405160208101906108f060208286516101a181878b61477b565b51902014918215610c3b575b50508115610c33575b50614a23565b61092860405161029160208285516101a181848401858a0161477b565b9081600052600a60205260406000209160029061086b6109576002860154604051928391602083019586614e25565b5190209360016109668261548a565b96151503610a7957505061097f91929350511515614e3f565b6008810190815460ff602435161015610a3d5760ff8154169160048310156104c7576109e56001916109b56002600696146150b8565b8560005260096020526040600020336000526020526109dc60ff6040600020541615615076565b60243590614a93565b50016109f18154614e16565b9055016109fe8154614e16565b90558060005260096020526040600020336000526020526040600020600160ff198254161790556000526008602052610a3b336040600020615104565b005b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b80919492505115610bf557816000526009602052604060002033600052602052610aab60ff6040600020541615615076565b60ff83541660048110156104c7576002610ac591146150b8565b600883019460ff8654169060009560009060208301915b8954811015610be4578161086b610b0a610af6848e614a93565b50604051928391602083019586910161497c565b5190206040516020810190610b2860208289516101a181878c61477b565b51902014610b3857600101610adc565b9150506001929394959650610b4e915087614a93565b500194855460018101809111610420576006965560015b15610bb8575b5050508060005260096020526040600020336000526020526040600020600160ff198254161790556000526008602052610ba9336040600020615104565b01610bb48154614e16565b9055005b610bdc9260405192610bc984614670565b8352600160208401526040830152614b21565b838080610b6b565b505050509091929394600695610b65565b60405162461bcd60e51b815260206004820152601660248201527553696c61686b616e206d6173756b6b616e206e616d6160501b6044820152606490fd5b905085610905565b9091503360005260076020526004604060002001604051610c648161086b60208201809561497c565b51902091610c84602060405180936101a18383019687925192839161477b565b5190201486806108fc565b91503360005260066020526005604060002001604051610cb78161086b60208201809561497c565b5190206040516020810190610cd560208287516101a181878a61477b565b51902014916108ac565b346101b95760203660031901126101b9576004356001600160401b0381116101b9576020610d14610d279236906004016146fd565b816040519382858094519384920161477b565b81016005815203019020805460ff81166001830154926002810154936003820154916004810154610d5f60066005840154930161489b565b93604051976101009460028810156104c7578998610db1988a5260018060a01b039060081c1660208a015260408901526060880152608087015260a086015260c08501528060e085015283019061479e565b0390f35b346101b95760403660031901126101b9576024356001600160a01b038116908190036101b9576004356000526009602052604060002090600052602052602060ff604060002054166040519015158152f35b346101b95760003660031901126101b9576020600454604051908152f35b346101b95760003660031901126101b957610e4b60018060a01b03600254163314614d31565b60015460ff8116610e6557506001805460ff191681179055005b60ff1916600155005b346101b95760203660031901126101b9576001600160a01b0380610e90614940565b1660005260076020526040600020610db1815491610f25600182015491610f17610ebc6002830161489b565b610ed46004610ecd6003860161489b565b940161489b565b94604051988860ff8b9a1615158a5260081c16602089015260018060801b031990818160801b1660408a015216606088015260e0608088015260e087019061479e565b9085820360a087015261479e565b9083820360c085015261479e565b346101b95760003660031901126101b9576020600354604051908152f35b346101b95760203660031901126101b9576004356001600160401b0381116101b957610f886020610d1460609336906004016146fd565b8101600b815203019020610db1815461104f60018401549361104060028201549360038301549060048401546005850154600686015490600787015492610fd16008890161489b565b95610fea600a610fe360098c0161489b565b9a0161489b565b9a6040519e8f9e8f906101809960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015260e08a01526101008901528061012089015287019061479e565b9085820361014087015261479e565b9083820361016085015261479e565b346101b9576020806003193601126101b9576004356001600160401b0381116101b9576110926110ad9136906004016146fd565b61029183604051836101a1829551809285808601910161477b565b80600052600a825261086b6110d46002604060002001546040519283918683019586614e25565b51902060005260098152604060002033600052815260ff604060002054166040519015158152f35b346101b95760003660031901126101b9576020600054604051908152f35b346101b9576020806003193601126101b9576004356001600160401b0381116101b95761109261114e9136906004016146fd565b600052600a81526008604060002001805490811561123b57611171829392614c38565b9261117f60405194856146c1565b8084528284018092600052836000206000915b8383106112185750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106111cd5785850386f35b909192938280611208600193603f198a82030186528851604060609160ff81511684528581015186850152015191816040820152019061479e565b96019201960195929190926111c0565b60038660019261122a859a999a614fd1565b815201920192019190959495611192565b60405162461bcd60e51b815260048101849052602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b60803660031901126101b9576004356001600160401b0381116101b9576112b99036906004016146fd565b6024356001600160401b0381116101b9576112d89036906004016146fd565b6044356001600160401b0381116101b9576112f79036906004016146fd565b90600260643510156101b9573360005260066020526002604060002001544310611b3a5761132d600160ff815416151514614dba565b336000526006602052604060002091617d006000541015611b0a57600560405183519061135e82826020880161477b565b0152611399604051835161137681836020880161477b565b600590820190815281900360200190205460081c6001600160a01b031615614a5b565b6113a2826152f4565b15611ad9576113b384511515614a5b565b602084511015611aa8576001815111156101b957815160038114908115611a9d575b8115611a92575b5015611a4d576113eb82615449565b611a085733600052600660205260046040600020016040516114158161086b60208201809561497c565b519020604051602081019061143560208287516101a18187858c0161477b565b5190201415806119b7575b1561197c57604051602081845161145a818385890161477b565b810160058152030190208251946001600160401b0386116117835761148f866114866006850154614861565b60068501614adc565b602095601f811160011461190557600492916114cb826114ec9360019798999a6000916118fa575b508160011b916000199060031b1c19161790565b60068401556102916020604051836101a1829551809285808601910161477b565b600582015560ff1981541660ff6064351617815561150a3382614df1565b60006002820155015560405191602083019261155a602682845161153281896020890161477b565b8101602d60f81b60208201526420b236b4b760d91b60218201520360068101845201826146c1565b5192516001600160b01b031981169390600a82106118da575b505033600052600660205261158f600460406000200154614861565b611799573360005260066020526004604060002001908051906001600160401b038211611783576115ca826115c48554614861565b85614adc565b602090601f831160011461171457918061160192611669969594600092611709575b50508160011b916000199060031b1c19161790565b90555b336000526006602052604060002080546bffffffffffffffffffff00008560a01c16906bffffffffffffffffffff000019161790555b600184013360018060a01b03198254161790556102916020604051836101a1829551809285808601910161477b565b60038301556116a061168a60ff600181198654161780865560081c16615065565b835461ff00191660089190911b61ff0016178355565b33600052600e6020526040600020600160ff1982541617905560018060b01b031916600052600d6020526040600020600160ff1982541617905543603201908160321161042057600201556116f6600054614e16565b600055611704600454614e16565b600455005b0151905088806115ec565b908360005260206000209160005b601f198516811061176b5750918391600193611669979695601f19811610611752575b505050811b019055611604565b015160001960f88460031b161c19169055878080611745565b91926020600181928685015181550194019201611722565b634e487b7160e01b600052604160045260246000fd5b3360005260066020526117b3600560406000200154614861565b156117c3575b506116699061163a565b3360005260066020526005604060002001908051906001600160401b038211611783576117f4826115c48554614861565b602090601f831160011461186b57918061182a926116699695946000926117095750508160011b916000199060031b1c19161790565b90555b336000908152600660205260409020805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b16179055906117b9565b908360005260206000209160005b601f19851681106118c25750918391600193611669979695601f198116106118a9575b505050811b01905561182d565b015160001960f88460031b161c1916905587808061189c565b91926020600181928685015181550194019201611879565b6001600160b01b0319600a9290920360031b82901b161692508480611573565b90508901518b6114b7565b60068301600052602060002060005b601f198316811061196457509160018260049594829798999a6114ec95601f1981161061194b575b5050811b01600684015561062c565b8a015160001960f88460031b161c191690558a8061193c565b86890151825560209889019860019092019101611914565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600660205260056040600020016040516119de8161086b60208201809561497c565b51902060405160208101906119fe60208287516101a18187858c0161477b565b5190201415611440565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b6005915014856113dc565b6004811491506113d5565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101b95760a03660031901126101b9576004356001600160401b0381116101b957611b9a9036906004016146fd565b6024356001600160401b0381116101b957611bb99036906004016146fd565b6044356001600160401b0381116101b957611bd89036906004016146fd565b60ff60643516606435036101b9576084359182151583036101b957611c05600160ff815416151514614dba565b600033600052600660205261086b611c2e6004604060002001604051928391602083019061497c565b60208151910120604051611c5060208289516101a1818c85808601910161477b565b60208151910120148015612216575b156121555750611c6f6001614a23565b611c9c60066040516020818851611c898183858d0161477b565b6005818301528101030190200154614861565b156101b957600181511115612124576005815110156120e457815160018111156101b957601911156120a357600a60026040516020818851611ce18183858d0161477b565b810160058152030190200154101561206557611d4290610291602160405180938851611d14816020850160208d0161477b565b8201602d60f81b6020820152611d33825180936020878501910161477b565b010360018101845201826146c1565b9182600052600c60205260ff6040600020541661202b5782600052600a60205260406000209284516001600160401b03811161178357611d9281611d896005880154614861565b60058801614adc565b6020601f8211600114611fbf579080611dc092600091611fb457508160011b916000199060031b1c19161790565b60058501555b806001850155611de960405161029160208287516101a181848401858c0161477b565b600285015560ff1980855416855581600052600c6020526040600020600182825416179055600183151514600014611f9e57600160ff606435161115611f6157845461ff00191660643560081b61ff0016178555611ee594611e9d935b63ff000000825491151560181b169063ff000000191617905581600052600c602052600160406000209182541617905560076040516020818851611e8d8183858d0161477b565b8101600581520301902001615030565b611edf60086040516020818751611eb78183858c0161477b565b8101600581520301902001916102916020604051836101a1829551809285808601910161477b565b90615030565b60096040516020818451611efc818385890161477b565b81016005815203019020018054600160401b81101561178357600192611f2c82611f4c9486602095018155615003565b60ff82549160031b1b19169055816040519382858094519384920161477b565b8101600581520301902001610bb48154614e16565b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b845461ff0019168555611ee594611e9d93611e46565b9050870151886114b7565b906005860160005260206000206000925b601f1983168410612013576001935082601f19811610611ffa575b5050811b016005850155611dc6565b88015160001960f88460031b161c191690558780611feb565b88810151825560209384019360019092019101611fd0565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b33600052600660205261217f61086b6102916004604060002001604051928391602083019061497c565b61219d6040516102916020828a516101a1818d85808601910161477b565b148015906121c6575b6121b4575b611c6f90614a23565b506121be8461513f565b5060016121ab565b503360005260066020526121f161086b6102916005604060002001604051928391602083019061497c565b61220f6040516102916020828a516101a1818d85808601910161477b565b14156121a6565b50336000526006602052600560406000200160405161223d8161086b60208201809561497c565b519020604051602081019061225f602082816101a18c8781519384920161477b565b51902014611c5f565b346101b95760203660031901126101b9576001600160a01b038061228a614940565b166000526006602052604060002090610db1825461231d60018060b01b0319936001860154169460028101549260038201546122cd6005610ecd6004860161489b565b946040519889986101209460ff811615158b5260ff8160081c1660208c0152818160a01b1660408c015260501b1660608a0152608089015260a088015260c08701528060e087015285019061479e565b9083820361010085015261479e565b346101b95760003660031901126101b9573360005260206006815260ff60406000205416906007815260ff6040600020541691612367614c81565b61236f614c81565b90828560405161237e816146a6565b6000815291612547575b6123f0575b831595866123e6575b50906123ca6123d892610db1959660405198899815158952159088015233604088015260c0606088015260c087019061479e565b9085820360808701526147c3565b9083820360a08501526147c3565b93506123ca612396565b336000526007855260406000209084156000146124ba575060028161241a60036124b5940161489b565b61242385614d00565b5261242d84614d00565b5061243a6004820161489b565b61244385614d0d565b5261244d84614d0d565b5060018101546040516001600160801b0319608083901b81168a83015260108252906124788161468b565b61248188614d00565b5261248b87614d00565b50604051911688820152601081526124a28161468b565b6124ab86614d0d565b5261078285614d0d565b61238d565b906124c483614d0d565b515115612522575b6124d584614d0d565b5151156124e3575b5061238d565b6001015460801b6040519060018060801b03191686820152601081526125088161468b565b61251184614d0d565b5261251b83614d0d565b50866124dd565b61252e6003820161489b565b61253784614d0d565b5261254183614d0d565b506124cc565b5050336000526006845284600360406000206125656004820161489b565b61256e85614d00565b5261257884614d00565b506125856005820161489b565b61258e85614d0d565b5261259884614d0d565b5080546040516001600160b01b031960a083901b81168a830152600a8252906125c08161468b565b6125c988614d00565b526125d387614d00565b506040519160501b1688820152600a81526125ed8161468b565b6125f686614d0d565b5261260085614d0d565b50015460405190868201528581526126178161468b565b90612388565b346101b95760203660031901126101b957600435600052600a60205260406000208054906001810154906002810154926126d26003830154916004840154906126686005860161489b565b91600760068701549601549460405198899860ff6101609561268c8c838316614854565b818160081c1660208d0152818160101c16151560408d015260181c16151560608b015260808a015260a089015260c088015260e08701528061010087015285019061479e565b916101208401526101408301520390f35b346101b95760803660031901126101b9576004356001600160401b0381116101b9576127139036906004016146fd565b60443580151581036101b957600033600052600660205260046040600020016040516127478161086b60208201809561497c565b51902060405161276460208287516101a181848401858c0161477b565b602081519101201480156131ec575b1561312d57506127836001614a23565b6127a060405161029160208286516101a181848401858b0161477b565b80600052600a6020526040600020906127cc60405161029160208288516101a181848401858d0161477b565b61086b6127e86002850154604051928391602083019586614e25565b519020926127f58561513f565b93336000526006602052600360406000200154916040519260208401526020835261281f8361468b565b8651156130f25761283287511515614e3f565b83600052600a602052845460ff8160101c166130b957600460ff821610156104c75760ff600291160361307a57600685015460046128776128728a61513f565b614956565b015460011c6001019081600111610420571115613035571515600103612dab57506002600884015403612d71576128c260405161029160208289516101a1818c85808601910161477b565b600052600a60205260406000206040516128db816146a6565b60008082526008830154919290805b8360ff821610612d18575050505042600a01600a11610420576129356020600486019742600a0189556201000362ff00ff19885416178755816040519382858094519384920161477b565b8101600b81520301902095600160ff198854161787556006850154600488015561295f3388614df1565b6003850154600288015554600387015560243560078701556129876005850160088801614e98565b82600587015560078401546001870155600284015460068701558051906001600160401b038211611783576129cc826129c360098a0154614861565b60098a01614adc565b602090601f8311600114612ca6576129fc9291600091836117095750508160011b916000199060031b1c19161790565b60098601555b8051906001600160401b03821161178357612a2d82612a24600a890154614861565b600a8901614adc565b602090601f8311600114612c3457612a5d929160009183612c295750508160011b916000199060031b1c19161790565b600a8501555b60005b6008830154811015612ac65780612ac0612a8e612a8860019460088801614a93565b50614fd1565b60ff815116906020604082015191015160405192612aab84614670565b835260208301526040820152600b8801614b21565b01612a66565b5092505081600052600a602052600860406000206000815560006001820155600060028201556000600382015560006004820155612b0660058201614f70565b6000600682015560006007820155018054906000815581612be6575b50506020600292612bd192612b81612b5d604051936007845195878181880198612b4d81838c61477b565b81016005815203019020016153da565b600960405186818651612b7181838b61477b565b8101600581520301902001615003565b81549060031b9060ff6003831b921b1916179055600360405184818451612ba981838961477b565b8101600581520301902001612bbe8154614e16565b905560405193849283925192839161477b565b8101600581520301902001610bb48154615023565b81600302916003830403610420576000526020600020908101905b81811015612b22578060006003925560006001820155612c2360028201614f70565b01612c01565b0151905087806115ec565b9190600a87016000526020600020906000935b601f1984168510612c8b576001945083601f19811610612c72575b505050811b01600a850155612a63565b015160001960f88460031b161c19169055868080612c62565b81810151835560209485019460019093019290910190612c47565b9190600988016000526020600020906000935b601f1984168510612cfd576001945083601f19811610612ce4575b505050811b016009860155612a02565b015160001960f88460031b161c19169055878080612cd4565b81810151835560209485019460019093019290910190612cb9565b816001612d288360088701614a93565b50015411612d3f575b612d3a90615065565b6128ea565b9350506001612d518460088401614a93565b500154612d3a612d6960026107828760088701614a93565b949050612d31565b60405162461bcd60e51b81526020600482015260126024820152716e65656420322063616e646964617465732160701b6044820152606490fd5b935050509150600260088301541115612ff05760005b600883015480821015612ed057612ddb8260088601614a93565b50600101546064351115612ec1576000199080820190811161042057612e049060088601614a93565b50612e128360088701614a93565b612e6757818103612e93575b505060088401548015612e7d57612e3a82820160088701614a93565b612e67576002816000612e5593556000600182015501614f70565b01600884015560006006840155612dc1565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6002808360ff612eba95541660ff1985541617845560018101546001850155019101614e98565b8480612e1e565b50612ecb90614e16565b612dc1565b505060005b6008830154811015612efd578060006001612ef4819460088801614a93565b50015501612ed5565b508060005260086020526040600020805415612fb65760005b8154811015612f61576001908360005260096020526040600020612f3a8285614fb9565b848060a01b0391549060031b1c16600052602052604060002060ff19815416905501612f16565b50506000526008602052604060002080546000825580612f9a575b505060078101612f8c8154614e16565b9055805462ff000019169055005b612faf91600052602060002090810190614ac5565b8180612f7c565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d9bdd195c9cc81d1bc81c995cd95d60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4d6f7265207468616e20322063616e64696461746573207265717569726564006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b33600052600660205261315761086b6102916004604060002001604051928391602083019061497c565b61317460405161029160208288516101a181848401858d0161477b565b1480159061319d575b61318b575b61278390614a23565b506131958261513f565b506001613182565b503360005260066020526131c861086b6102916005604060002001604051928391602083019061497c565b6131e560405161029160208288516101a181848401858d0161477b565b141561317d565b5033600052600660205260056040600020016040516132138161086b60208201809561497c565b519020604051602081019061323360208288516101a18187858d0161477b565b51902014612773565b346101b95760003660031901126101b957602060ff600154166040519015158152f35b60603660031901126101b9576004356001600160401b0381116101b95761328a9036906004016146fd565b602480356001600160401b0381116101b9576132aa9036906004016146fd565b906132bd600160ff815416151514614dba565b3360005260076020526040600020906040519060208201916044358352602081526132e78161468b565b5191516001600160801b03198116929060108210613969575b50506113886004604051602081885161331c8183858d0161477b565b8101600581520301902001541015613925576001855111156138e85760188551101561389a5733600052600760205260036040600020016040516133688161086b60208201809561497c565b519020604051602081019061338a602082816101a18b8781519384920161477b565b519020141580613847575b8061382e575b156137ea57600160026133ad86614956565b015410156137ae576133e0600660405160208188516133cf8183858d0161477b565b810160058152030190200154614861565b1561376a576133f26003840154614861565b6136515783516001600160401b03811161363c57613420816134176003870154614861565b60038701614adc565b6020601f82116001146135d057908061344e926000916135c557508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b6134773384614df1565b8451906001600160401b0382116135b157506134a38161349a6002860154614861565b60028601614adc565b6020601f821160011461353857916134dd8260209593611f4c979560049960009261352d5750508160011b916000199060031b1c19161790565b60028301555b60ff199160018382541617905560018060801b031916600052600d835260016040600020918254161790556135188454614e16565b8455816040519382858094519384920161477b565b0151905089806115ec565b6002840160005260206000209560005b601f1984168110613599575082600497611f4c97959360019360209896601f19811610613580575b505050811b0160028301556134e3565b015160001960f88460031b161c19169055888080613570565b82820151885560019097019660209283019201613548565b634e487b7160e01b60009081526041600452fd5b9050860151886114b7565b906003850160005260206000206000925b601f1983168410613624576001935082601f1981161061360b575b5050811b016003840155613454565b87015160001960f88460031b161c1916905587806135fc565b878101518255602093840193600190920191016135e1565b50634e487b7160e01b60009081526041600452fd5b600483015461365f81614861565b1561366b575b5061346d565b8451906001600160401b038211613755578161368961369292614861565b60048701614adc565b6020601f82116001146136e95790806136c0926000916135c557508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b0319841617905585613665565b906004850160005260206000206000925b601f198316841061373d576001935082601f19811610613724575b5050811b0160048401556136c6565b87015160001960f88460031b161c191690558780613715565b878101518255602093840193600190920191016136fa565b82634e487b7160e01b60005260416004526000fd5b606490601b6040519162461bcd60e51b8352602060048401528201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152fd5b60649060156040519162461bcd60e51b83526020600484015282015274456c656374696f6e20696e2070726f67726573732160581b6044820152fd5b606490601a6040519162461bcd60e51b8352602060048401528201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152fd5b5033600052600e60205260ff604060002054161561339b565b50336000526007602052600460406000200160405161386e8161086b60208201809561497c565b5190206040516020810190613890602082816101a18b8781519384920161477b565b5190201415613395565b60849060216040519162461bcd60e51b8352602060048401528201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152fd5b60649060166040519162461bcd60e51b83526020600484015282015275506c656173652066696c6c20566f746572204e616d6560501b6044820152fd5b606490601c6040519162461bcd60e51b8352602060048401528201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152fd5b6001600160801b031960109290920360031b82901b161691508580613300565b346101b9576020806003193601126101b9576004356001600160401b0381116101b95781610d146139be9236906004016146fd565b810160058152030190209060086009830191806139e960086139e260078801614d69565b9601614d69565b604051938485918488549283815201918298600052856000206000925b82601f850110613f35575092613b579594928792613b3695549184828210613f1b575b828210613efe575b828210613ee1575b828210613ec4575b828210613ea8575b828210613e8b575b828210613e6e575b828210613e51575b828210613e34575b828210613e17575b828210613dfa575b828210613ddd575b828210613dc0575b828210613da3575b828210613d86575b828210613d69575b828210613d4c575b828210613d2f575b828210613d12575b828210613cf5575b828210613cd8575b828210613cbb575b828210613c9e575b828210613c81575b828210613c64575b828210613c47575b828210613c2a575b828210613c0d575b828210613bf0575b828210613bd3575b828210613bb6575b5010613ba0575b50613b4a9a9998965094939291909403856146c1565b604051978897606089526060890190614820565b9087820384890152614820565b918583036040870152519182815201929160005b828110613b7a57505050500390f35b9193839550908082613b90600194839751614854565b0195019101918594939192613b6b565b81613bad9160f81c614854565b0185908b613b20565b84613bca6001939660ff8760f01c16614854565b01930184613b19565b84613be76001939660ff8760e81c16614854565b01930184613b11565b84613c046001939660ff8760e01c16614854565b01930184613b09565b84613c216001939660ff8760d81c16614854565b01930184613b01565b84613c3e6001939660ff8760d01c16614854565b01930184613af9565b84613c5b6001939660ff8760c81c16614854565b01930184613af1565b84613c786001939660ff8760c01c16614854565b01930184613ae9565b84613c956001939660ff8760b81c16614854565b01930184613ae1565b84613cb26001939660ff8760b01c16614854565b01930184613ad9565b84613ccf6001939660ff8760a81c16614854565b01930184613ad1565b84613cec6001939660ff8760a01c16614854565b01930184613ac9565b84613d096001939660ff8760981c16614854565b01930184613ac1565b84613d266001939660ff8760901c16614854565b01930184613ab9565b84613d436001939660ff8760881c16614854565b01930184613ab1565b84613d606001939660ff8760801c16614854565b01930184613aa9565b84613d7d6001939660ff8760781c16614854565b01930184613aa1565b84613d9a6001939660ff8760701c16614854565b01930184613a99565b84613db76001939660ff8760681c16614854565b01930184613a91565b84613dd46001939660ff8760601c16614854565b01930184613a89565b84613df16001939660ff8760581c16614854565b01930184613a81565b84613e0e6001939660ff8760501c16614854565b01930184613a79565b84613e2b6001939660ff8760481c16614854565b01930184613a71565b84613e486001939660ff8760401c16614854565b01930184613a69565b84613e656001939660ff8760381c16614854565b01930184613a61565b84613e826001939660ff8760301c16614854565b01930184613a59565b84613e9f6001939660ff8760281c16614854565b01930184613a51565b84613ebb6001939660ff87851c16614854565b01930184613a49565b84613ed86001939660ff8760181c16614854565b01930184613a41565b84613ef56001939660ff8760101c16614854565b01930184613a39565b84613f126001939660ff8760081c16614854565b01930184613a31565b84613f2c6001939660ff8716614854565b01930184613a29565b945094959092610400600191614196885461418860ff613f5785828516614854565b613f67858901848d1c8316614854565b613f7960408601828560101c16614854565b614119856140d16060613f93818401868960181c16614854565b6140898c613faa608091888b848901921c16614854565b61404160a093613fc18588018a8d60281c16614854565b888b61018060c099613fda8b8201858560301c16614854565b613fec60e08201858560381c16614854565b613fff6101008201858560401c16614854565b6140126101208201858560481c16614854565b6140256101408201858560501c16614854565b6140386101608201858560581c16614854565b01921c16614854565b6140546101a08c01888b60681c16614854565b6140676101c08c01888b60701c16614854565b61407a6101e08c01888b60781c16614854565b86896102008d01921c16614854565b61409c6102208a01868960881c16614854565b6140af6102408a01868960901c16614854565b6140c26102608a01868960981c16614854565b84876102808b01921c16614854565b6140e46102a08801848760a81c16614854565b6140f76102c08801848760b01c16614854565b61410a6102e08801848760b81c16614854565b82856103008901921c16614854565b61412c6103208601828560c81c16614854565b61413f6103408601828560d01c16614854565b6141526103608601828560d81c16614854565b6141656103808601828560e01c16614854565b6141786103a08601828560e81c16614854565b6103c08501908360f01c16614854565b6103e083019060f81c614854565b01950191019091869594928894613a06565b346101b95760003660031901126101b9576141ce60018060a01b03600254163314614d31565b602047604051908152f35b346101b9576020806003193601126101b9576004356001600160401b0381116101b95761420a9036906004016146fd565b6040519080518382019061421f81858461477b565b83018385600b95838780955203019020015461423a81614c4f565b9361424482614cb6565b9261424e83614c4f565b9460005b8481106142955761427a88610db1896142878d8b604051968796606088526060880190614744565b91868303908701526147c3565b908382036040850152614820565b806142f5600261078283888e8e6142e08460ff6142d760019c8f8f888a926142c89260405193849283925192839161477b565b81018481520301902001614a93565b50541692614d1d565b526040519081806142c88d8d5192839161477b565b6142ff8289614d1d565b5261430a8188614d1d565b508161432682878d6040519081806142c88c8c5192839161477b565b500154614333828a614d1d565b5201614252565b346101b95760403660031901126101b9576001600160401b036004358181116101b95761436b9036906004016146fd565b906024359081116101b9576143849036906004016146fd565b90600091336000526144036020936006855260046040600020019060405191826143b1888201809361497c565b03926143c5601f19948581018352826146c1565b51902091604051928784018751946143e78a82818c01986101a181878c61477b565b519020148015614602575b156145485750506102786001614a23565b600052600a835260406000209151156101b957600882019060ff8254935460081c1683101561450957805180156101b9576018106144c857614444816152f4565b1561446e576000610a3b9460ff6040519561445e87614670565b1685528401526040830152614b21565b60405162461bcd60e51b815260048101859052602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526004810185905260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260048101859052601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b336000526006875261457061050561029160046040600020016040519283918c83019061497c565b61458a6040516102918a828b516101a1818484018c61477b565b14908115916145b5575b506145a3575b61027890614a23565b506145ad8461513f565b50600161459a565b6145e09150610291610581913360005260068a5260056040600020016040519384918c83019061497c565b6145fa60405161029189828a516101a1818484018b61477b565b141587614594565b5033600052600687526005604060002001604051614627816105058b8201809561497c565b519020604051888101906146438a828b516101a181878c61477b565b519020146143f2565b346101b95760003660031901126101b9576002546001600160a01b03168152602090f35b606081019081106001600160401b0382111761178357604052565b604081019081106001600160401b0382111761178357604052565b602081019081106001600160401b0382111761178357604052565b90601f801991011681019081106001600160401b0382111761178357604052565b6001600160401b03811161178357601f01601f191660200190565b81601f820112156101b957803590614714826146e2565b9261472260405194856146c1565b828452602083830101116101b957816000926020809301838601378301015290565b90815180825260208080930193019160005b828110614764575050505090565b835160ff1685529381019392810192600101614756565b60005b83811061478e5750506000910152565b818101518382015260200161477e565b906020916147b78151809281855285808601910161477b565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106147f25750505050505090565b9091929394958480614810600193601f198682030187528a5161479e565b98019301930191949392906147e2565b90815180825260208080930193019160005b828110614840575050505090565b835185529381019392810192600101614832565b9060048210156104c75752565b90600182811c92168015614891575b602083101461487b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614870565b906040519182600082546148ae81614861565b9081845260209460019160018116908160001461491e57506001146148df575b5050506148dd925003836146c1565b565b600090815285812095935091905b8183106149065750506148dd93508201013880806148ce565b855488840185015294850194879450918301916148ed565b925050506148dd94925060ff191682840152151560051b8201013880806148ce565b600435906001600160a01b03821682036101b957565b602061496f91816040519382858094519384920161477b565b8101600581520301902090565b60009291815461498b81614861565b926001918083169081156149e557506001146149a8575b50505050565b9091929394506000526020906020600020906000915b8583106149d457505050500190388080806149a2565b8054858401529183019181016149be565b60ff19168452505050811515909102019150388080806149a2565b602081519101519060208110614a14575090565b6000199060200360031b1b1690565b15614a2a57565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b15614a6257565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015614aaf576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b818110614ad0575050565b60008155600101614ac5565b9190601f8111614aeb57505050565b6148dd926000526020600020906020601f840160051c83019310614b17575b601f0160051c0190614ac5565b9091508190614b0a565b91908254600160401b81101561178357614b4390600194600182018155614a93565b612e675760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b03831161178357614b9083614b8a8654614861565b86614adc565b602091601f8411600114614bd35750508190614bc4939495600092614bc85750508160011b916000199060031b1c19161790565b9055565b0151905038806115ec565b600085815260208120601f1986169890949390925b898310614c215750505083600195969710614c08575b505050811b019055565b015160001960f88460031b161c19169055388080614bfe565b838501518655948501949381019391810191614be8565b6001600160401b0381116117835760051b60200190565b90614c5982614c38565b614c6660405191826146c1565b8281528092614c77601f1991614c38565b0190602036910137565b60409060405191614c9183614670565b600283528260005b828110614ca557505050565b806060602080938501015201614c99565b90614cc082614c38565b614ccd60405191826146c1565b8281528092614cde601f1991614c38565b019060005b828110614cef57505050565b806060602080938501015201614ce3565b805115614aaf5760200190565b805160011015614aaf5760400190565b8051821015614aaf5760209160051b010190565b15614d3857565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210614da0575050506148dd925003836146c1565b855484526001958601958895509381019390910190614d8a565b15614dc157565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b60001981146104205760010190565b90916041928252602d60f81b602083015260218201520190565b15614e4657565b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b9190820391821161042057565b90808214614f6c57614eaa8154614861565b906001600160401b03821161178357614ec7826115c48554614861565b600090601f8311600114614f0257614bc4929160009183614ef75750508160011b916000199060031b1c19161790565b0154905038806115ec565b815260208082208483528183209291601f1985169083905b828210614f53575050908460019594939210614f3a57505050811b019055565b015460001960f88460031b161c19169055388080614bfe565b8495819295850154815560018091019601940190614f1a565b5050565b614f7a8154614861565b9081614f84575050565b81601f60009311600114614f96575055565b908083918252614fb5601f60208420940160051c840160018501614ac5565b5555565b8054821015614aaf5760005260206000200190600090565b90604051614fde81614670565b6040614ffe6002839560ff8154168552600181015460208601520161489b565b910152565b9190918054831015614aaf57600052601f60206000208360051c01921690565b8015610420576000190190565b8054600160401b8110156117835761504d91600182018155614fb9565b819291549060031b91821b91600019901b1916179055565b60ff1660ff81146104205760010190565b1561507d57565b60405162461bcd60e51b8152602060048201526013602482015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b156150bf57565b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b8054600160401b8110156117835761512191600182018155614fb9565b60018060a09493941b038084549260031b9316831b921b1916179055565b60405161514b8161468b565b60019182825260208201602d60f81b815283846000905b615291575b5061517190614cb6565b93600091600094826000905b61520c575b5050505081615197916151a8949351916155d1565b6151a18285614d1d565b5282614d1d565b508051156151bd576151b990614d00565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b855181101561528c576001600160f81b03198061522983896152e3565b511690835115614aaf5784511614615244575b83018361517d565b95938661525491879493946155d1565b61525e8589614d1d565b526152698488614d1d565b50828601918287116104205783615281819496614e16565b97919293505061523c565b615182565b83518110156152de576001600160f81b031990816152af82876152e3565b5116865115614aaf578792855116146152cb575b810190615162565b916152d68291614e16565b9290506152c3565b615167565b908151811015614aaf570160200190565b6000805b82518110156153d25761530b81846152e3565b51603060f891821c1015806153bb575b801561538c575b801561535d575b15908115615345575b5061533f576001016152f8565b50905090565b6020915061535383866152e3565b51901c1438615332565b50606161536a83866152e3565b51821c101580156153295750607a61538283866152e3565b51821c1115615329565b50604161539983866152e3565b51821c101580156153225750605a6153b183866152e3565b51821c1115615322565b5060396153c883866152e3565b51821c111561531b565b505050600190565b9060005b825481101561540c57816153f28285614fb9565b90549060031b1c14615406576001016153de565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b60005b815181101561548357600160fd1b6001600160f81b031961546d83856152e3565b51161461547c5760010161544c565b5050600190565b5050600090565b8051156155bd57805115614aaf57602081810180516001600160f81b0319929190606160f81b9084161015806155a4575b615575575b506001918291825b6154d4575b5050505090565b8451831015615570578392604160f81b836154ef83896152e3565b5116101580615556575b615506575b8301926154c8565b925061551283866152e3565b51928160f894851c019060ff8211615541578386959286931b1660001a61553982896152e3565b5390506154fe565b60246000634e487b7160e01b81526011600452fd5b50602d60f91b8361556783896152e3565b511611156154f9565b6154cd565b835115614aaf57805160f81c601f190160ff811161042057845115614aaf5760f81b831660001a9053386154c0565b50835115614aaf578051603d60f91b90841611156154bb565b506040516155ca816146a6565b6000815290565b929180821115806156a3575b15615662576155ec8282614e8b565b916155f6836146e2565b9261560460405194856146c1565b808452615613601f19916146e2565b01366020850137805b82811061562b57509193505050565b6001906001600160f81b031961564182896152e3565b511661565b6156508584614e8b565b9160001a91876152e3565b530161561c565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156155dd56fea2646970667358221220e96d529163cc275b583d084429f02fca2a25110e3fb21e566abf01fc4676fb2c64736f6c63430008190033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd1461464c57508063145ef6e914610f33578063158058f61461433a578063162442e2146141d95780631df3739a146141a85780632c2032c0146139895780633d2acf831461325f57806342b7fa1c1461323c5780634313c4cc146126e35780635398690b1461261d5780635d8d15851461232c57806363a846f81461226857806365c6c43914611b6a578063695c2d241461128e5780637149d8ba1461111a5780637217fcfd146110fc578063800912861461105e57806381929bac14610f515780638783cc8a14610f33578063a3ec138d14610e6e578063a43064cc14610e25578063a9c63aa014610e07578063aadc3b7214610db5578063b205436514610cdf578063b684f78d146107c1578063e0428cf3146105f9578063f544bed8146101be5763f6246dcb1461015357600080fd5b346101b95760203660031901126101b9576004356001600160401b0381116101b95761018560209136906004016146fd565b6040516101ae8382816101a1818301968781519384920161477b565b81010380845201826146c1565b519020604051908152f35b600080fd5b346101b9576020806003193601126101b9576004356001600160401b0381116101b9576101ef9036906004016146fd565b61029c61029660003360005260068552600460406000200190604051918261021a888201809361497c565b039261022e601f19948581018352826146c1565b51902091604051928784018751946102508a82818c01986101a181878c61477b565b5190201480156105af575b156104dd57505061026c6001614a23565b61027884511515614a5b565b6102918560405180936101a1885180928585019061477b565b614a00565b9161513f565b9080600052600a83526040600020805460ff811660048110156104c75761048257600160ff8260181c16151514610436575b60059142830180841161042057600792600291600384015560ff1916178155016102f88154614e16565b905561037a60405192600285519487818189019761031781838b61477b565b8101878152030190200161032b8154614e16565b905560016040518781885161034181838b61477b565b810187815203019020016103558154615023565b905560076040518781885161036b81838b61477b565b810187815203019020016153da565b9260076040518681845161038f81838a61477b565b81018681520301902001548410156103e657936009926103be926103cd9660405194859384925192839161477b565b82019081520301902001615003565b81549060031b9060ff6002831b921b1916179055600080f35b60405162461bcd60e51b8152600481018690526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600882015460ff8260081c1603156102ce5760405162461bcd60e51b815260048101869052601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260048101869052601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b336000526006875261051161050561029160046040600020016040519283918c83019061497c565b038481018352826146c1565b61052b6040516102918a828b516101a1818484018c61477b565b1490811591610556575b50610544575b61026c90614a23565b5061054e8461513f565b50600161053b565b61058d9150610291610581913360005260068a5260056040600020016040519384918c83019061497c565b039081018352826146c1565b6105a760405161029189828a516101a1818484018b61477b565b141587610535565b50336000526006875260056040600020016040516105d4816105058b8201809561497c565b519020604051888101906105f08a828b516101a181878c61477b565b5190201461025b565b346101b95760203660031901126101b9576004356001600160401b0381116101b95761062c6106489136906004016146fd565b6102916020604051836101a1829551809285808601910161477b565b80600052600a6020526040600020906001820154906002926002810154936040519460208601526020855261067c8561468b565b600782015460088301549061069082614c4f565b61069983614cb6565b926106a381614c4f565b94600687015497600052600a6020526040600020549660ff9160005b84811061075257505050509261071060ff96959361071e9361072c966106f86040519d8e9d8e610140918152816020820152019061479e565b9260408d015260608c01528a820360808c0152614744565b9088820360a08a01526147c3565b9086820360c0880152614820565b9260e08501526107426101008501838316614854565b60181c1615156101208301520390f35b808461076360019360088701614a93565b5054166107708289614d1d565b52610789836107828360088801614a93565b500161489b565b610793828b614d1d565b5261079e818a614d1d565b50816107ad8260088701614a93565b5001546107ba828c614d1d565b52016106bf565b346101b95760803660031901126101b9576001600160401b036004358181116101b9576107f29036906004016146fd565b9060ff60243516602435036101b9576044359081116101b9576108199036906004016146fd565b6064359182151583036101b957610838600160ff815416151514614dba565b61090b6108448261513f565b33600052600660205261086b6108796004604060002001604051928391602083019061497c565b03601f1981018352826146c1565b6020815191012060405190602082018351926108a0602082818801966101a181878a61477b565b51902014918215610c8f575b33600052600760205260036040600020016040516108d28161086b60208201809561497c565b51902060405160208101906108f060208286516101a181878b61477b565b51902014918215610c3b575b50508115610c33575b50614a23565b61092860405161029160208285516101a181848401858a0161477b565b9081600052600a60205260406000209160029061086b6109576002860154604051928391602083019586614e25565b5190209360016109668261548a565b96151503610a7957505061097f91929350511515614e3f565b6008810190815460ff602435161015610a3d5760ff8154169160048310156104c7576109e56001916109b56002600696146150b8565b8560005260096020526040600020336000526020526109dc60ff6040600020541615615076565b60243590614a93565b50016109f18154614e16565b9055016109fe8154614e16565b90558060005260096020526040600020336000526020526040600020600160ff198254161790556000526008602052610a3b336040600020615104565b005b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b80919492505115610bf557816000526009602052604060002033600052602052610aab60ff6040600020541615615076565b60ff83541660048110156104c7576002610ac591146150b8565b600883019460ff8654169060009560009060208301915b8954811015610be4578161086b610b0a610af6848e614a93565b50604051928391602083019586910161497c565b5190206040516020810190610b2860208289516101a181878c61477b565b51902014610b3857600101610adc565b9150506001929394959650610b4e915087614a93565b500194855460018101809111610420576006965560015b15610bb8575b5050508060005260096020526040600020336000526020526040600020600160ff198254161790556000526008602052610ba9336040600020615104565b01610bb48154614e16565b9055005b610bdc9260405192610bc984614670565b8352600160208401526040830152614b21565b838080610b6b565b505050509091929394600695610b65565b60405162461bcd60e51b815260206004820152601660248201527553696c61686b616e206d6173756b6b616e206e616d6160501b6044820152606490fd5b905085610905565b9091503360005260076020526004604060002001604051610c648161086b60208201809561497c565b51902091610c84602060405180936101a18383019687925192839161477b565b5190201486806108fc565b91503360005260066020526005604060002001604051610cb78161086b60208201809561497c565b5190206040516020810190610cd560208287516101a181878a61477b565b51902014916108ac565b346101b95760203660031901126101b9576004356001600160401b0381116101b9576020610d14610d279236906004016146fd565b816040519382858094519384920161477b565b81016005815203019020805460ff81166001830154926002810154936003820154916004810154610d5f60066005840154930161489b565b93604051976101009460028810156104c7578998610db1988a5260018060a01b039060081c1660208a015260408901526060880152608087015260a086015260c08501528060e085015283019061479e565b0390f35b346101b95760403660031901126101b9576024356001600160a01b038116908190036101b9576004356000526009602052604060002090600052602052602060ff604060002054166040519015158152f35b346101b95760003660031901126101b9576020600454604051908152f35b346101b95760003660031901126101b957610e4b60018060a01b03600254163314614d31565b60015460ff8116610e6557506001805460ff191681179055005b60ff1916600155005b346101b95760203660031901126101b9576001600160a01b0380610e90614940565b1660005260076020526040600020610db1815491610f25600182015491610f17610ebc6002830161489b565b610ed46004610ecd6003860161489b565b940161489b565b94604051988860ff8b9a1615158a5260081c16602089015260018060801b031990818160801b1660408a015216606088015260e0608088015260e087019061479e565b9085820360a087015261479e565b9083820360c085015261479e565b346101b95760003660031901126101b9576020600354604051908152f35b346101b95760203660031901126101b9576004356001600160401b0381116101b957610f886020610d1460609336906004016146fd565b8101600b815203019020610db1815461104f60018401549361104060028201549360038301549060048401546005850154600686015490600787015492610fd16008890161489b565b95610fea600a610fe360098c0161489b565b9a0161489b565b9a6040519e8f9e8f906101809960ff81161515835260018060a01b039060081c1660208301526040820152015260808d015260a08c015260c08b015260e08a01526101008901528061012089015287019061479e565b9085820361014087015261479e565b9083820361016085015261479e565b346101b9576020806003193601126101b9576004356001600160401b0381116101b9576110926110ad9136906004016146fd565b61029183604051836101a1829551809285808601910161477b565b80600052600a825261086b6110d46002604060002001546040519283918683019586614e25565b51902060005260098152604060002033600052815260ff604060002054166040519015158152f35b346101b95760003660031901126101b9576020600054604051908152f35b346101b9576020806003193601126101b9576004356001600160401b0381116101b95761109261114e9136906004016146fd565b600052600a81526008604060002001805490811561123b57611171829392614c38565b9261117f60405194856146c1565b8084528284018092600052836000206000915b8383106112185750505050604051918083019381845251809452604083019360408160051b85010192916000955b8287106111cd5785850386f35b909192938280611208600193603f198a82030186528851604060609160ff81511684528581015186850152015191816040820152019061479e565b96019201960195929190926111c0565b60038660019261122a859a999a614fd1565b815201920192019190959495611192565b60405162461bcd60e51b815260048101849052602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b60803660031901126101b9576004356001600160401b0381116101b9576112b99036906004016146fd565b6024356001600160401b0381116101b9576112d89036906004016146fd565b6044356001600160401b0381116101b9576112f79036906004016146fd565b90600260643510156101b9573360005260066020526002604060002001544310611b3a5761132d600160ff815416151514614dba565b336000526006602052604060002091617d006000541015611b0a57600560405183519061135e82826020880161477b565b0152611399604051835161137681836020880161477b565b600590820190815281900360200190205460081c6001600160a01b031615614a5b565b6113a2826152f4565b15611ad9576113b384511515614a5b565b602084511015611aa8576001815111156101b957815160038114908115611a9d575b8115611a92575b5015611a4d576113eb82615449565b611a085733600052600660205260046040600020016040516114158161086b60208201809561497c565b519020604051602081019061143560208287516101a18187858c0161477b565b5190201415806119b7575b1561197c57604051602081845161145a818385890161477b565b810160058152030190208251946001600160401b0386116117835761148f866114866006850154614861565b60068501614adc565b602095601f811160011461190557600492916114cb826114ec9360019798999a6000916118fa575b508160011b916000199060031b1c19161790565b60068401556102916020604051836101a1829551809285808601910161477b565b600582015560ff1981541660ff6064351617815561150a3382614df1565b60006002820155015560405191602083019261155a602682845161153281896020890161477b565b8101602d60f81b60208201526420b236b4b760d91b60218201520360068101845201826146c1565b5192516001600160b01b031981169390600a82106118da575b505033600052600660205261158f600460406000200154614861565b611799573360005260066020526004604060002001908051906001600160401b038211611783576115ca826115c48554614861565b85614adc565b602090601f831160011461171457918061160192611669969594600092611709575b50508160011b916000199060031b1c19161790565b90555b336000526006602052604060002080546bffffffffffffffffffff00008560a01c16906bffffffffffffffffffff000019161790555b600184013360018060a01b03198254161790556102916020604051836101a1829551809285808601910161477b565b60038301556116a061168a60ff600181198654161780865560081c16615065565b835461ff00191660089190911b61ff0016178355565b33600052600e6020526040600020600160ff1982541617905560018060b01b031916600052600d6020526040600020600160ff1982541617905543603201908160321161042057600201556116f6600054614e16565b600055611704600454614e16565b600455005b0151905088806115ec565b908360005260206000209160005b601f198516811061176b5750918391600193611669979695601f19811610611752575b505050811b019055611604565b015160001960f88460031b161c19169055878080611745565b91926020600181928685015181550194019201611722565b634e487b7160e01b600052604160045260246000fd5b3360005260066020526117b3600560406000200154614861565b156117c3575b506116699061163a565b3360005260066020526005604060002001908051906001600160401b038211611783576117f4826115c48554614861565b602090601f831160011461186b57918061182a926116699695946000926117095750508160011b916000199060031b1c19161790565b90555b336000908152600660205260409020805469ffffffffffffffffffff60601b1916605085901c69ffffffffffffffffffff60601b16179055906117b9565b908360005260206000209160005b601f19851681106118c25750918391600193611669979695601f198116106118a9575b505050811b01905561182d565b015160001960f88460031b161c1916905587808061189c565b91926020600181928685015181550194019201611879565b6001600160b01b0319600a9290920360031b82901b161692508480611573565b90508901518b6114b7565b60068301600052602060002060005b601f198316811061196457509160018260049594829798999a6114ec95601f1981161061194b575b5050811b01600684015561062c565b8a015160001960f88460031b161c191690558a8061193c565b86890151825560209889019860019092019101611914565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600660205260056040600020016040516119de8161086b60208201809561497c565b51902060405160208101906119fe60208287516101a18187858c0161477b565b5190201415611440565b60405162461bcd60e51b815260206004820152601c60248201527f73706163657320696e204f7267204944206e6f7420616c6c6f776564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b6005915014856113dc565b6004811491506113d5565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101b95760a03660031901126101b9576004356001600160401b0381116101b957611b9a9036906004016146fd565b6024356001600160401b0381116101b957611bb99036906004016146fd565b6044356001600160401b0381116101b957611bd89036906004016146fd565b60ff60643516606435036101b9576084359182151583036101b957611c05600160ff815416151514614dba565b600033600052600660205261086b611c2e6004604060002001604051928391602083019061497c565b60208151910120604051611c5060208289516101a1818c85808601910161477b565b60208151910120148015612216575b156121555750611c6f6001614a23565b611c9c60066040516020818851611c898183858d0161477b565b6005818301528101030190200154614861565b156101b957600181511115612124576005815110156120e457815160018111156101b957601911156120a357600a60026040516020818851611ce18183858d0161477b565b810160058152030190200154101561206557611d4290610291602160405180938851611d14816020850160208d0161477b565b8201602d60f81b6020820152611d33825180936020878501910161477b565b010360018101845201826146c1565b9182600052600c60205260ff6040600020541661202b5782600052600a60205260406000209284516001600160401b03811161178357611d9281611d896005880154614861565b60058801614adc565b6020601f8211600114611fbf579080611dc092600091611fb457508160011b916000199060031b1c19161790565b60058501555b806001850155611de960405161029160208287516101a181848401858c0161477b565b600285015560ff1980855416855581600052600c6020526040600020600182825416179055600183151514600014611f9e57600160ff606435161115611f6157845461ff00191660643560081b61ff0016178555611ee594611e9d935b63ff000000825491151560181b169063ff000000191617905581600052600c602052600160406000209182541617905560076040516020818851611e8d8183858d0161477b565b8101600581520301902001615030565b611edf60086040516020818751611eb78183858c0161477b565b8101600581520301902001916102916020604051836101a1829551809285808601910161477b565b90615030565b60096040516020818451611efc818385890161477b565b81016005815203019020018054600160401b81101561178357600192611f2c82611f4c9486602095018155615003565b60ff82549160031b1b19169055816040519382858094519384920161477b565b8101600581520301902001610bb48154614e16565b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b845461ff0019168555611ee594611e9d93611e46565b9050870151886114b7565b906005860160005260206000206000925b601f1983168410612013576001935082601f19811610611ffa575b5050811b016005850155611dc6565b88015160001960f88460031b161c191690558780611feb565b88810151825560209384019360019092019101611fd0565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b33600052600660205261217f61086b6102916004604060002001604051928391602083019061497c565b61219d6040516102916020828a516101a1818d85808601910161477b565b148015906121c6575b6121b4575b611c6f90614a23565b506121be8461513f565b5060016121ab565b503360005260066020526121f161086b6102916005604060002001604051928391602083019061497c565b61220f6040516102916020828a516101a1818d85808601910161477b565b14156121a6565b50336000526006602052600560406000200160405161223d8161086b60208201809561497c565b519020604051602081019061225f602082816101a18c8781519384920161477b565b51902014611c5f565b346101b95760203660031901126101b9576001600160a01b038061228a614940565b166000526006602052604060002090610db1825461231d60018060b01b0319936001860154169460028101549260038201546122cd6005610ecd6004860161489b565b946040519889986101209460ff811615158b5260ff8160081c1660208c0152818160a01b1660408c015260501b1660608a0152608089015260a088015260c08701528060e087015285019061479e565b9083820361010085015261479e565b346101b95760003660031901126101b9573360005260206006815260ff60406000205416906007815260ff6040600020541691612367614c81565b61236f614c81565b90828560405161237e816146a6565b6000815291612547575b6123f0575b831595866123e6575b50906123ca6123d892610db1959660405198899815158952159088015233604088015260c0606088015260c087019061479e565b9085820360808701526147c3565b9083820360a08501526147c3565b93506123ca612396565b336000526007855260406000209084156000146124ba575060028161241a60036124b5940161489b565b61242385614d00565b5261242d84614d00565b5061243a6004820161489b565b61244385614d0d565b5261244d84614d0d565b5060018101546040516001600160801b0319608083901b81168a83015260108252906124788161468b565b61248188614d00565b5261248b87614d00565b50604051911688820152601081526124a28161468b565b6124ab86614d0d565b5261078285614d0d565b61238d565b906124c483614d0d565b515115612522575b6124d584614d0d565b5151156124e3575b5061238d565b6001015460801b6040519060018060801b03191686820152601081526125088161468b565b61251184614d0d565b5261251b83614d0d565b50866124dd565b61252e6003820161489b565b61253784614d0d565b5261254183614d0d565b506124cc565b5050336000526006845284600360406000206125656004820161489b565b61256e85614d00565b5261257884614d00565b506125856005820161489b565b61258e85614d0d565b5261259884614d0d565b5080546040516001600160b01b031960a083901b81168a830152600a8252906125c08161468b565b6125c988614d00565b526125d387614d00565b506040519160501b1688820152600a81526125ed8161468b565b6125f686614d0d565b5261260085614d0d565b50015460405190868201528581526126178161468b565b90612388565b346101b95760203660031901126101b957600435600052600a60205260406000208054906001810154906002810154926126d26003830154916004840154906126686005860161489b565b91600760068701549601549460405198899860ff6101609561268c8c838316614854565b818160081c1660208d0152818160101c16151560408d015260181c16151560608b015260808a015260a089015260c088015260e08701528061010087015285019061479e565b916101208401526101408301520390f35b346101b95760803660031901126101b9576004356001600160401b0381116101b9576127139036906004016146fd565b60443580151581036101b957600033600052600660205260046040600020016040516127478161086b60208201809561497c565b51902060405161276460208287516101a181848401858c0161477b565b602081519101201480156131ec575b1561312d57506127836001614a23565b6127a060405161029160208286516101a181848401858b0161477b565b80600052600a6020526040600020906127cc60405161029160208288516101a181848401858d0161477b565b61086b6127e86002850154604051928391602083019586614e25565b519020926127f58561513f565b93336000526006602052600360406000200154916040519260208401526020835261281f8361468b565b8651156130f25761283287511515614e3f565b83600052600a602052845460ff8160101c166130b957600460ff821610156104c75760ff600291160361307a57600685015460046128776128728a61513f565b614956565b015460011c6001019081600111610420571115613035571515600103612dab57506002600884015403612d71576128c260405161029160208289516101a1818c85808601910161477b565b600052600a60205260406000206040516128db816146a6565b60008082526008830154919290805b8360ff821610612d18575050505042600a01600a11610420576129356020600486019742600a0189556201000362ff00ff19885416178755816040519382858094519384920161477b565b8101600b81520301902095600160ff198854161787556006850154600488015561295f3388614df1565b6003850154600288015554600387015560243560078701556129876005850160088801614e98565b82600587015560078401546001870155600284015460068701558051906001600160401b038211611783576129cc826129c360098a0154614861565b60098a01614adc565b602090601f8311600114612ca6576129fc9291600091836117095750508160011b916000199060031b1c19161790565b60098601555b8051906001600160401b03821161178357612a2d82612a24600a890154614861565b600a8901614adc565b602090601f8311600114612c3457612a5d929160009183612c295750508160011b916000199060031b1c19161790565b600a8501555b60005b6008830154811015612ac65780612ac0612a8e612a8860019460088801614a93565b50614fd1565b60ff815116906020604082015191015160405192612aab84614670565b835260208301526040820152600b8801614b21565b01612a66565b5092505081600052600a602052600860406000206000815560006001820155600060028201556000600382015560006004820155612b0660058201614f70565b6000600682015560006007820155018054906000815581612be6575b50506020600292612bd192612b81612b5d604051936007845195878181880198612b4d81838c61477b565b81016005815203019020016153da565b600960405186818651612b7181838b61477b565b8101600581520301902001615003565b81549060031b9060ff6003831b921b1916179055600360405184818451612ba981838961477b565b8101600581520301902001612bbe8154614e16565b905560405193849283925192839161477b565b8101600581520301902001610bb48154615023565b81600302916003830403610420576000526020600020908101905b81811015612b22578060006003925560006001820155612c2360028201614f70565b01612c01565b0151905087806115ec565b9190600a87016000526020600020906000935b601f1984168510612c8b576001945083601f19811610612c72575b505050811b01600a850155612a63565b015160001960f88460031b161c19169055868080612c62565b81810151835560209485019460019093019290910190612c47565b9190600988016000526020600020906000935b601f1984168510612cfd576001945083601f19811610612ce4575b505050811b016009860155612a02565b015160001960f88460031b161c19169055878080612cd4565b81810151835560209485019460019093019290910190612cb9565b816001612d288360088701614a93565b50015411612d3f575b612d3a90615065565b6128ea565b9350506001612d518460088401614a93565b500154612d3a612d6960026107828760088701614a93565b949050612d31565b60405162461bcd60e51b81526020600482015260126024820152716e65656420322063616e646964617465732160701b6044820152606490fd5b935050509150600260088301541115612ff05760005b600883015480821015612ed057612ddb8260088601614a93565b50600101546064351115612ec1576000199080820190811161042057612e049060088601614a93565b50612e128360088701614a93565b612e6757818103612e93575b505060088401548015612e7d57612e3a82820160088701614a93565b612e67576002816000612e5593556000600182015501614f70565b01600884015560006006840155612dc1565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6002808360ff612eba95541660ff1985541617845560018101546001850155019101614e98565b8480612e1e565b50612ecb90614e16565b612dc1565b505060005b6008830154811015612efd578060006001612ef4819460088801614a93565b50015501612ed5565b508060005260086020526040600020805415612fb65760005b8154811015612f61576001908360005260096020526040600020612f3a8285614fb9565b848060a01b0391549060031b1c16600052602052604060002060ff19815416905501612f16565b50506000526008602052604060002080546000825580612f9a575b505060078101612f8c8154614e16565b9055805462ff000019169055005b612faf91600052602060002090810190614ac5565b8180612f7c565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d9bdd195c9cc81d1bc81c995cd95d60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f4d6f7265207468616e20322063616e64696461746573207265717569726564006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f6e6565642035302520746f74616c206d656d62657220746f2066696e697368006044820152606490fd5b60405162461bcd60e51b8152602060048201526017602482015276115b1958dd1a5bdb881a5cc81b9bdd081cdd185c9d1959604a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b33600052600660205261315761086b6102916004604060002001604051928391602083019061497c565b61317460405161029160208288516101a181848401858d0161477b565b1480159061319d575b61318b575b61278390614a23565b506131958261513f565b506001613182565b503360005260066020526131c861086b6102916005604060002001604051928391602083019061497c565b6131e560405161029160208288516101a181848401858d0161477b565b141561317d565b5033600052600660205260056040600020016040516132138161086b60208201809561497c565b519020604051602081019061323360208288516101a18187858d0161477b565b51902014612773565b346101b95760003660031901126101b957602060ff600154166040519015158152f35b60603660031901126101b9576004356001600160401b0381116101b95761328a9036906004016146fd565b602480356001600160401b0381116101b9576132aa9036906004016146fd565b906132bd600160ff815416151514614dba565b3360005260076020526040600020906040519060208201916044358352602081526132e78161468b565b5191516001600160801b03198116929060108210613969575b50506113886004604051602081885161331c8183858d0161477b565b8101600581520301902001541015613925576001855111156138e85760188551101561389a5733600052600760205260036040600020016040516133688161086b60208201809561497c565b519020604051602081019061338a602082816101a18b8781519384920161477b565b519020141580613847575b8061382e575b156137ea57600160026133ad86614956565b015410156137ae576133e0600660405160208188516133cf8183858d0161477b565b810160058152030190200154614861565b1561376a576133f26003840154614861565b6136515783516001600160401b03811161363c57613420816134176003870154614861565b60038701614adc565b6020601f82116001146135d057908061344e926000916135c557508160011b916000199060031b1c19161790565b60038401555b6001830180546001600160801b031916608084901c1790555b6134773384614df1565b8451906001600160401b0382116135b157506134a38161349a6002860154614861565b60028601614adc565b6020601f821160011461353857916134dd8260209593611f4c979560049960009261352d5750508160011b916000199060031b1c19161790565b60028301555b60ff199160018382541617905560018060801b031916600052600d835260016040600020918254161790556135188454614e16565b8455816040519382858094519384920161477b565b0151905089806115ec565b6002840160005260206000209560005b601f1984168110613599575082600497611f4c97959360019360209896601f19811610613580575b505050811b0160028301556134e3565b015160001960f88460031b161c19169055888080613570565b82820151885560019097019660209283019201613548565b634e487b7160e01b60009081526041600452fd5b9050860151886114b7565b906003850160005260206000206000925b601f1983168410613624576001935082601f1981161061360b575b5050811b016003840155613454565b87015160001960f88460031b161c1916905587806135fc565b878101518255602093840193600190920191016135e1565b50634e487b7160e01b60009081526041600452fd5b600483015461365f81614861565b1561366b575b5061346d565b8451906001600160401b038211613755578161368961369292614861565b60048701614adc565b6020601f82116001146136e95790806136c0926000916135c557508160011b916000199060031b1c19161790565b60048401555b6001830180546001600160801b03166001600160801b0319841617905585613665565b906004850160005260206000206000925b601f198316841061373d576001935082601f19811610613724575b5050811b0160048401556136c6565b87015160001960f88460031b161c191690558780613715565b878101518255602093840193600190920191016136fa565b82634e487b7160e01b60005260416004526000fd5b606490601b6040519162461bcd60e51b8352602060048401528201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152fd5b60649060156040519162461bcd60e51b83526020600484015282015274456c656374696f6e20696e2070726f67726573732160581b6044820152fd5b606490601a6040519162461bcd60e51b8352602060048401528201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152fd5b5033600052600e60205260ff604060002054161561339b565b50336000526007602052600460406000200160405161386e8161086b60208201809561497c565b5190206040516020810190613890602082816101a18b8781519384920161477b565b5190201415613395565b60849060216040519162461bcd60e51b8352602060048401528201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152fd5b60649060166040519162461bcd60e51b83526020600484015282015275506c656173652066696c6c20566f746572204e616d6560501b6044820152fd5b606490601c6040519162461bcd60e51b8352602060048401528201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152fd5b6001600160801b031960109290920360031b82901b161691508580613300565b346101b9576020806003193601126101b9576004356001600160401b0381116101b95781610d146139be9236906004016146fd565b810160058152030190209060086009830191806139e960086139e260078801614d69565b9601614d69565b604051938485918488549283815201918298600052856000206000925b82601f850110613f35575092613b579594928792613b3695549184828210613f1b575b828210613efe575b828210613ee1575b828210613ec4575b828210613ea8575b828210613e8b575b828210613e6e575b828210613e51575b828210613e34575b828210613e17575b828210613dfa575b828210613ddd575b828210613dc0575b828210613da3575b828210613d86575b828210613d69575b828210613d4c575b828210613d2f575b828210613d12575b828210613cf5575b828210613cd8575b828210613cbb575b828210613c9e575b828210613c81575b828210613c64575b828210613c47575b828210613c2a575b828210613c0d575b828210613bf0575b828210613bd3575b828210613bb6575b5010613ba0575b50613b4a9a9998965094939291909403856146c1565b604051978897606089526060890190614820565b9087820384890152614820565b918583036040870152519182815201929160005b828110613b7a57505050500390f35b9193839550908082613b90600194839751614854565b0195019101918594939192613b6b565b81613bad9160f81c614854565b0185908b613b20565b84613bca6001939660ff8760f01c16614854565b01930184613b19565b84613be76001939660ff8760e81c16614854565b01930184613b11565b84613c046001939660ff8760e01c16614854565b01930184613b09565b84613c216001939660ff8760d81c16614854565b01930184613b01565b84613c3e6001939660ff8760d01c16614854565b01930184613af9565b84613c5b6001939660ff8760c81c16614854565b01930184613af1565b84613c786001939660ff8760c01c16614854565b01930184613ae9565b84613c956001939660ff8760b81c16614854565b01930184613ae1565b84613cb26001939660ff8760b01c16614854565b01930184613ad9565b84613ccf6001939660ff8760a81c16614854565b01930184613ad1565b84613cec6001939660ff8760a01c16614854565b01930184613ac9565b84613d096001939660ff8760981c16614854565b01930184613ac1565b84613d266001939660ff8760901c16614854565b01930184613ab9565b84613d436001939660ff8760881c16614854565b01930184613ab1565b84613d606001939660ff8760801c16614854565b01930184613aa9565b84613d7d6001939660ff8760781c16614854565b01930184613aa1565b84613d9a6001939660ff8760701c16614854565b01930184613a99565b84613db76001939660ff8760681c16614854565b01930184613a91565b84613dd46001939660ff8760601c16614854565b01930184613a89565b84613df16001939660ff8760581c16614854565b01930184613a81565b84613e0e6001939660ff8760501c16614854565b01930184613a79565b84613e2b6001939660ff8760481c16614854565b01930184613a71565b84613e486001939660ff8760401c16614854565b01930184613a69565b84613e656001939660ff8760381c16614854565b01930184613a61565b84613e826001939660ff8760301c16614854565b01930184613a59565b84613e9f6001939660ff8760281c16614854565b01930184613a51565b84613ebb6001939660ff87851c16614854565b01930184613a49565b84613ed86001939660ff8760181c16614854565b01930184613a41565b84613ef56001939660ff8760101c16614854565b01930184613a39565b84613f126001939660ff8760081c16614854565b01930184613a31565b84613f2c6001939660ff8716614854565b01930184613a29565b945094959092610400600191614196885461418860ff613f5785828516614854565b613f67858901848d1c8316614854565b613f7960408601828560101c16614854565b614119856140d16060613f93818401868960181c16614854565b6140898c613faa608091888b848901921c16614854565b61404160a093613fc18588018a8d60281c16614854565b888b61018060c099613fda8b8201858560301c16614854565b613fec60e08201858560381c16614854565b613fff6101008201858560401c16614854565b6140126101208201858560481c16614854565b6140256101408201858560501c16614854565b6140386101608201858560581c16614854565b01921c16614854565b6140546101a08c01888b60681c16614854565b6140676101c08c01888b60701c16614854565b61407a6101e08c01888b60781c16614854565b86896102008d01921c16614854565b61409c6102208a01868960881c16614854565b6140af6102408a01868960901c16614854565b6140c26102608a01868960981c16614854565b84876102808b01921c16614854565b6140e46102a08801848760a81c16614854565b6140f76102c08801848760b01c16614854565b61410a6102e08801848760b81c16614854565b82856103008901921c16614854565b61412c6103208601828560c81c16614854565b61413f6103408601828560d01c16614854565b6141526103608601828560d81c16614854565b6141656103808601828560e01c16614854565b6141786103a08601828560e81c16614854565b6103c08501908360f01c16614854565b6103e083019060f81c614854565b01950191019091869594928894613a06565b346101b95760003660031901126101b9576141ce60018060a01b03600254163314614d31565b602047604051908152f35b346101b9576020806003193601126101b9576004356001600160401b0381116101b95761420a9036906004016146fd565b6040519080518382019061421f81858461477b565b83018385600b95838780955203019020015461423a81614c4f565b9361424482614cb6565b9261424e83614c4f565b9460005b8481106142955761427a88610db1896142878d8b604051968796606088526060880190614744565b91868303908701526147c3565b908382036040850152614820565b806142f5600261078283888e8e6142e08460ff6142d760019c8f8f888a926142c89260405193849283925192839161477b565b81018481520301902001614a93565b50541692614d1d565b526040519081806142c88d8d5192839161477b565b6142ff8289614d1d565b5261430a8188614d1d565b508161432682878d6040519081806142c88c8c5192839161477b565b500154614333828a614d1d565b5201614252565b346101b95760403660031901126101b9576001600160401b036004358181116101b95761436b9036906004016146fd565b906024359081116101b9576143849036906004016146fd565b90600091336000526144036020936006855260046040600020019060405191826143b1888201809361497c565b03926143c5601f19948581018352826146c1565b51902091604051928784018751946143e78a82818c01986101a181878c61477b565b519020148015614602575b156145485750506102786001614a23565b600052600a835260406000209151156101b957600882019060ff8254935460081c1683101561450957805180156101b9576018106144c857614444816152f4565b1561446e576000610a3b9460ff6040519561445e87614670565b1685528401526040830152614b21565b60405162461bcd60e51b815260048101859052602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526004810185905260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260048101859052601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b336000526006875261457061050561029160046040600020016040519283918c83019061497c565b61458a6040516102918a828b516101a1818484018c61477b565b14908115916145b5575b506145a3575b61027890614a23565b506145ad8461513f565b50600161459a565b6145e09150610291610581913360005260068a5260056040600020016040519384918c83019061497c565b6145fa60405161029189828a516101a1818484018b61477b565b141587614594565b5033600052600687526005604060002001604051614627816105058b8201809561497c565b519020604051888101906146438a828b516101a181878c61477b565b519020146143f2565b346101b95760003660031901126101b9576002546001600160a01b03168152602090f35b606081019081106001600160401b0382111761178357604052565b604081019081106001600160401b0382111761178357604052565b602081019081106001600160401b0382111761178357604052565b90601f801991011681019081106001600160401b0382111761178357604052565b6001600160401b03811161178357601f01601f191660200190565b81601f820112156101b957803590614714826146e2565b9261472260405194856146c1565b828452602083830101116101b957816000926020809301838601378301015290565b90815180825260208080930193019160005b828110614764575050505090565b835160ff1685529381019392810192600101614756565b60005b83811061478e5750506000910152565b818101518382015260200161477e565b906020916147b78151809281855285808601910161477b565b601f01601f1916010190565b90808251908181526020809101926020808460051b8301019501936000915b8483106147f25750505050505090565b9091929394958480614810600193601f198682030187528a5161479e565b98019301930191949392906147e2565b90815180825260208080930193019160005b828110614840575050505090565b835185529381019392810192600101614832565b9060048210156104c75752565b90600182811c92168015614891575b602083101461487b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691614870565b906040519182600082546148ae81614861565b9081845260209460019160018116908160001461491e57506001146148df575b5050506148dd925003836146c1565b565b600090815285812095935091905b8183106149065750506148dd93508201013880806148ce565b855488840185015294850194879450918301916148ed565b925050506148dd94925060ff191682840152151560051b8201013880806148ce565b600435906001600160a01b03821682036101b957565b602061496f91816040519382858094519384920161477b565b8101600581520301902090565b60009291815461498b81614861565b926001918083169081156149e557506001146149a8575b50505050565b9091929394506000526020906020600020906000915b8583106149d457505050500190388080806149a2565b8054858401529183019181016149be565b60ff19168452505050811515909102019150388080806149a2565b602081519101519060208110614a14575090565b6000199060200360031b1b1690565b15614a2a57565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b15614a6257565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015614aaf576000526003602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b818110614ad0575050565b60008155600101614ac5565b9190601f8111614aeb57505050565b6148dd926000526020600020906020601f840160051c83019310614b17575b601f0160051c0190614ac5565b9091508190614b0a565b91908254600160401b81101561178357614b4390600194600182018155614a93565b612e675760ff82511660ff19825416178155604060026020926020850151600182015501920151938451916001600160401b03831161178357614b9083614b8a8654614861565b86614adc565b602091601f8411600114614bd35750508190614bc4939495600092614bc85750508160011b916000199060031b1c19161790565b9055565b0151905038806115ec565b600085815260208120601f1986169890949390925b898310614c215750505083600195969710614c08575b505050811b019055565b015160001960f88460031b161c19169055388080614bfe565b838501518655948501949381019391810191614be8565b6001600160401b0381116117835760051b60200190565b90614c5982614c38565b614c6660405191826146c1565b8281528092614c77601f1991614c38565b0190602036910137565b60409060405191614c9183614670565b600283528260005b828110614ca557505050565b806060602080938501015201614c99565b90614cc082614c38565b614ccd60405191826146c1565b8281528092614cde601f1991614c38565b019060005b828110614cef57505050565b806060602080938501015201614ce3565b805115614aaf5760200190565b805160011015614aaf5760400190565b8051821015614aaf5760209160051b010190565b15614d3857565b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b90604051918281549182825260209260208301916000526020600020936000905b828210614da0575050506148dd925003836146c1565b855484526001958601958895509381019390910190614d8a565b15614dc157565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b60001981146104205760010190565b90916041928252602d60f81b602083015260218201520190565b15614e4657565b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b9190820391821161042057565b90808214614f6c57614eaa8154614861565b906001600160401b03821161178357614ec7826115c48554614861565b600090601f8311600114614f0257614bc4929160009183614ef75750508160011b916000199060031b1c19161790565b0154905038806115ec565b815260208082208483528183209291601f1985169083905b828210614f53575050908460019594939210614f3a57505050811b019055565b015460001960f88460031b161c19169055388080614bfe565b8495819295850154815560018091019601940190614f1a565b5050565b614f7a8154614861565b9081614f84575050565b81601f60009311600114614f96575055565b908083918252614fb5601f60208420940160051c840160018501614ac5565b5555565b8054821015614aaf5760005260206000200190600090565b90604051614fde81614670565b6040614ffe6002839560ff8154168552600181015460208601520161489b565b910152565b9190918054831015614aaf57600052601f60206000208360051c01921690565b8015610420576000190190565b8054600160401b8110156117835761504d91600182018155614fb9565b819291549060031b91821b91600019901b1916179055565b60ff1660ff81146104205760010190565b1561507d57565b60405162461bcd60e51b8152602060048201526013602482015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b156150bf57565b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b8054600160401b8110156117835761512191600182018155614fb9565b60018060a09493941b038084549260031b9316831b921b1916179055565b60405161514b8161468b565b60019182825260208201602d60f81b815283846000905b615291575b5061517190614cb6565b93600091600094826000905b61520c575b5050505081615197916151a8949351916155d1565b6151a18285614d1d565b5282614d1d565b508051156151bd576151b990614d00565b5190565b60405162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b855181101561528c576001600160f81b03198061522983896152e3565b511690835115614aaf5784511614615244575b83018361517d565b95938661525491879493946155d1565b61525e8589614d1d565b526152698488614d1d565b50828601918287116104205783615281819496614e16565b97919293505061523c565b615182565b83518110156152de576001600160f81b031990816152af82876152e3565b5116865115614aaf578792855116146152cb575b810190615162565b916152d68291614e16565b9290506152c3565b615167565b908151811015614aaf570160200190565b6000805b82518110156153d25761530b81846152e3565b51603060f891821c1015806153bb575b801561538c575b801561535d575b15908115615345575b5061533f576001016152f8565b50905090565b6020915061535383866152e3565b51901c1438615332565b50606161536a83866152e3565b51821c101580156153295750607a61538283866152e3565b51821c1115615329565b50604161539983866152e3565b51821c101580156153225750605a6153b183866152e3565b51821c1115615322565b5060396153c883866152e3565b51821c111561531b565b505050600190565b9060005b825481101561540c57816153f28285614fb9565b90549060031b1c14615406576001016153de565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b60005b815181101561548357600160fd1b6001600160f81b031961546d83856152e3565b51161461547c5760010161544c565b5050600190565b5050600090565b8051156155bd57805115614aaf57602081810180516001600160f81b0319929190606160f81b9084161015806155a4575b615575575b506001918291825b6154d4575b5050505090565b8451831015615570578392604160f81b836154ef83896152e3565b5116101580615556575b615506575b8301926154c8565b925061551283866152e3565b51928160f894851c019060ff8211615541578386959286931b1660001a61553982896152e3565b5390506154fe565b60246000634e487b7160e01b81526011600452fd5b50602d60f91b8361556783896152e3565b511611156154f9565b6154cd565b835115614aaf57805160f81c601f190160ff811161042057845115614aaf5760f81b831660001a9053386154c0565b50835115614aaf578051603d60f91b90841611156154bb565b506040516155ca816146a6565b6000815290565b929180821115806156a3575b15615662576155ec8282614e8b565b916155f6836146e2565b9261560460405194856146c1565b808452615613601f19916146e2565b01366020850137805b82811061562b57509193505050565b6001906001600160f81b031961564182896152e3565b511661565b6156508584614e8b565b9160001a91876152e3565b530161561c565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156155dd56fea2646970667358221220e96d529163cc275b583d084429f02fca2a25110e3fb21e566abf01fc4676fb2c64736f6c63430008190033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 902,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "organizationsCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 904,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXActivated",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 906,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "previousVotreXOwnerAddress",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 908,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXOwnerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 916,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXOwnerName",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 918,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXUserCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 923,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "organizationData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Organization)1002_storage)"
      },
      {
        "astId": 928,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "admin",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(ElectionAdmins)1021_storage)"
      },
      {
        "astId": 933,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "voters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Voter)1065_storage)"
      },
      {
        "astId": 938,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "votersList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 944,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "hasVoted",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 949,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(ElectionDetail)1093_storage)"
      },
      {
        "astId": 954,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionResults",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)1050_storage)"
      },
      {
        "astId": 958,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionExistanceChecks",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 962,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "votersIDExists",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes16,t_bool)"
      },
      {
        "astId": 966,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "registeredAdmin",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ElectionStatus)971)dyn_storage": {
        "base": "t_enum(ElectionStatus)971",
        "encoding": "dynamic_array",
        "label": "enum TestCompleXA2C.ElectionStatus[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CandidateDetail)1100_storage)dyn_storage": {
        "base": "t_struct(CandidateDetail)1100_storage",
        "encoding": "dynamic_array",
        "label": "struct TestCompleXA2C.CandidateDetail[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes10": {
        "encoding": "inplace",
        "label": "bytes10",
        "numberOfBytes": "10"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ElectionStatus)971": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2C.ElectionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OrganizationType)974": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2C.OrganizationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ElectionAdmins)1021_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2C.ElectionAdmins)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionAdmins)1021_storage"
      },
      "t_mapping(t_address,t_struct(Voter)1065_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2C.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)1065_storage"
      },
      "t_mapping(t_bytes16,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(ElectionDetail)1093_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TestCompleXA2C.ElectionDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionDetail)1093_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)1050_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2C.ElectionResult)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionResult)1050_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Organization)1002_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2C.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)1002_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CandidateDetail)1100_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.CandidateDetail",
        "members": [
          {
            "astId": 1095,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1097,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1099,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElectionAdmins)1021_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionAdmins",
        "members": [
          {
            "astId": 1004,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1006,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminOrgCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1008,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "AdminVoterIDOrg1",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 1010,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "AdminVoterIDOrg2",
            "offset": 12,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 1012,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionAdminAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1014,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "nextOrgCreationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1016,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 1018,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1020,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ElectionDetail)1093_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionDetail",
        "members": [
          {
            "astId": 1068,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ElectionStatus)971"
          },
          {
            "astId": 1070,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateList",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1072,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isFinished",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1074,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isHaveCandidateMode",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1076,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1078,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1080,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1082,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1084,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1086,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalParticipants",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1088,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "waveNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1092,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidates",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(CandidateDetail)1100_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(ElectionResult)1050_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionResult",
        "members": [
          {
            "astId": 1023,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isPruned",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1025,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1027,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "waveNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1029,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1031,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1033,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalVoter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1035,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionID",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 1037,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionName",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 1039,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "digitalSignature",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 1041,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "registeredOrganization",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 1043,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionWinner",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 1045,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "signedBy",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 1049,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidates",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(CandidateDetail)1100_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Organization)1002_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.Organization",
        "members": [
          {
            "astId": 977,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrganizationType)974"
          },
          {
            "astId": 979,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionAdminAddresses",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 981,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "onPreparationElectionCounter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 983,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "activeElectionCounter",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 985,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "archivedElectionCounter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 987,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalMembers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgName",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 991,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgID",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 994,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionIDs",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 997,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "ElectionName",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1001,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_enum(ElectionStatus)971)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Voter)1065_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.Voter",
        "members": [
          {
            "astId": 1052,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1054,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1056,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterIDOrg1",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 1058,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterIDOrg2",
            "offset": 16,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 1060,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1062,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1064,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
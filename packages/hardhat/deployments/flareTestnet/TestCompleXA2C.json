{
  "address": "0x3F24b69c0fB562F806adE84680CAF758b777C8fF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeOffset",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "electionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "candidateName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "name": "CandidateStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VotreXOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        }
      ],
      "name": "addCandidateDetail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "admin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "adminOrgCount",
          "type": "uint8"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg1",
          "type": "bytes10"
        },
        {
          "internalType": "bytes10",
          "name": "AdminVoterIDOrg2",
          "type": "bytes10"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nextOrgCreationBlock",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "adminName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "userBirthDate",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeSystemState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_candidateCount",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "_isHaveCandidateMode",
          "type": "bool"
        }
      ],
      "name": "createElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "electionInfo",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "candidateList",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isFinished",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isHaveCandidateMode",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTiedVoting",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "electionResults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPruned",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "adminAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVoter",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "electionName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "digitalSignature",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "registeredOrganization",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "electionWinner",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "signedBy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "finishElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getAllCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "candidateID",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "candidateVoteCount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "candidateName",
              "type": "string"
            }
          ],
          "internalType": "struct TestCompleXA2C.CandidateDetail[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionID",
          "type": "string"
        }
      ],
      "name": "getCandidateResult",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "candidateID",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateName",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "candidateVoteCount",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "getElectionInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "electionID",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "electionName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "waveNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCandidates",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "candidateIDs",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "voteCounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalParticipants",
          "type": "uint256"
        },
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus",
          "name": "statusElection",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isHaveCandidateMode",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "candidateLimit",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "name": "getElectionListInOrg",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum TestCompleXA2C.ElectionStatus[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        }
      ],
      "name": "getOrgIDHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalOrganization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "userName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "registeredOrgList",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "voterIDList",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "isVoterChecked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVotreXActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "organizationData",
      "outputs": [
        {
          "internalType": "enum TestCompleXA2C.OrganizationType",
          "name": "orgType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "electionAdminAddresses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "onPreparationElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "archivedElectionCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMembers",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "orgName",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "orgID",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_orgName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_adminName",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_userBirthDate",
          "type": "bytes32"
        },
        {
          "internalType": "enum TestCompleXA2C.OrganizationType",
          "name": "_orgType",
          "type": "uint8"
        }
      ],
      "name": "registerOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_voterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_orgID",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_userBirthDate",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "uniqueVoterID",
          "type": "bytes32"
        }
      ],
      "name": "registerVoter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        }
      ],
      "name": "startElection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "temporalCandidates",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "candidateVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "candidateName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_userElectionID",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "candidateID",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_candidateName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isModeHaveCandidate",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "VoterAddress",
          "type": "address"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg1",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "VoterIDOrg2",
          "type": "bytes16"
        },
        {
          "internalType": "string",
          "name": "VoterName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID1",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "RegisteredOrgID2",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "userBirthDate",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
  "receipt": {
    "to": null,
    "from": "0xe3c5Fd667F54BCdF1910cFe61fC39c3F490cbba7",
    "contractAddress": "0x3F24b69c0fB562F806adE84680CAF758b777C8fF",
    "transactionIndex": 0,
    "gasUsed": "5122264",
    "logsBloom": "0x
    "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51",
    "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000c738fdcde9cd2fbd72618d36ed71008b8d001ba4000000000000000000000000000000000000000000000000000000000000421a",
        "logIndex": 0,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d000000000000000000000000000000000000000000000000000000000000795e",
        "logIndex": 1,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d",
        "logIndex": 2,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008688",
        "logIndex": 3,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000a90db6d10f856799b10ef2a77ebcbf460ac71e5200000000000000000000000000000000000000000000000000000000000024f3",
        "logIndex": 4,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17378164,
        "transactionHash": "0xbced85ae7cb42211b0829c5a5b64034243ee5b6fa08cfd4f61eeaedd2bc7c13f",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000000b162ca3acf3482d3357972e12d794434085d8390000000000000000000000000000000000000000000000000000000000012263",
        "logIndex": 5,
        "blockHash": "0x4a2d51fdd84df6045a29317bfb04adedcadf45f47c653d2c115e750216853e51"
      }
    ],
    "blockNumber": 17378164,
    "cumulativeGasUsed": "5122264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "14515200"
  ],
  "numDeployments": 5,
  "solcInputHash": "e8214b3e937a27f6da50d2363d6a2998",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"electionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"name\":\"CandidateStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VotreXOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"}],\"name\":\"addCandidateDetail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"adminOrgCount\",\"type\":\"uint8\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg1\",\"type\":\"bytes10\"},{\"internalType\":\"bytes10\",\"name\":\"AdminVoterIDOrg2\",\"type\":\"bytes10\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nextOrgCreationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"adminName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userBirthDate\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSystemState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_electionName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_candidateCount\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isHaveCandidateMode\",\"type\":\"bool\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"electionInfo\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2C.ElectionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"candidateList\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isHaveCandidateMode\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTiedVoting\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"electionResults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPruned\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoter\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"electionName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"digitalSignature\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"registeredOrganization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"electionWinner\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signedBy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"finishElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getAllCandidates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"}],\"internalType\":\"struct TestCompleXA2C.CandidateDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_electionID\",\"type\":\"string\"}],\"name\":\"getCandidateResult\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"candidateID\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateName\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"candidateVoteCount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"getElectionInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"electionID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"electionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"waveNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCandidates\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"candidateIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"candidateNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"voteCounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"enum TestCompleXA2C.ElectionStatus\",\"name\":\"statusElection\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isHaveCandidateMode\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"candidateLimit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"name\":\"getElectionListInOrg\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum TestCompleXA2C.ElectionStatus[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"}],\"name\":\"getOrgIDHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalOrganization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"userName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"registeredOrgList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"voterIDList\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"isVoterChecked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVotreXActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"organizationData\",\"outputs\":[{\"internalType\":\"enum TestCompleXA2C.OrganizationType\",\"name\":\"orgType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"electionAdminAddresses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"onPreparationElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"archivedElectionCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMembers\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orgName\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"orgID\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_adminName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_userBirthDate\",\"type\":\"bytes32\"},{\"internalType\":\"enum TestCompleXA2C.OrganizationType\",\"name\":\"_orgType\",\"type\":\"uint8\"}],\"name\":\"registerOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_voterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgID\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_userBirthDate\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"uniqueVoterID\",\"type\":\"bytes32\"}],\"name\":\"registerVoter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"}],\"name\":\"startElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"temporalCandidates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"candidateVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"candidateName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userElectionID\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"candidateID\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_candidateName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isModeHaveCandidate\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"VoterAddress\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg1\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"VoterIDOrg2\",\"type\":\"bytes16\"},{\"internalType\":\"string\",\"name\":\"VoterName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RegisteredOrgID2\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"userBirthDate\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VotreXSystemRC2C.sol\":\"TestCompleXA2C\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/UtilityLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.7.0;\\n\\nlibrary UtilityLibrary {\\n\\tfunction calculateAge(\\n\\t\\tbytes32 encryptedDate,\\n\\t\\tint256 timeOffset\\n\\t) internal view returns (int256) {\\n\\t\\tuint256 SECONDS_PER_YEAR = 31556952;\\n\\t\\t// Step 1: convert encryptedDate (bytes32) \\u2192 int256\\n\\t\\tint256 rawEpoch = int256(uint256(encryptedDate)); // unwrap from bytes32\\n\\n\\t\\t// Step 2: remove offset to get real epoch time\\n\\t\\tint256 birthEpoch = rawEpoch - timeOffset;\\n\\n\\t\\t// Step 3: now use current time (block.timestamp) which is uint256 \\u2192 cast to int256\\n\\t\\tint256 nowEpoch = int256(block.timestamp);\\n\\n\\t\\t// Step 4: handle negative (invalid future date)\\n\\t\\tif (birthEpoch > nowEpoch) return -1;\\n\\n\\t\\tint256 age = (nowEpoch - birthEpoch) / int256(SECONDS_PER_YEAR);\\n\\t\\treturn age;\\n\\t}\\n\\n\\tfunction isOver60Years(\\n\\t\\tbytes32 birthDate,\\n\\t\\tint256 timeOffset\\n\\t) internal view returns (bool) {\\n\\t\\tint256 age = calculateAge(birthDate, timeOffset);\\n\\t\\treturn age >= 60;\\n\\t}\\n\\n\\tfunction extractOrgId(\\n\\t\\tstring memory _userElectionID\\n\\t) internal pure returns (string memory) {\\n\\t\\tstring[] memory parts = UtilityLibrary.splitString(\\n\\t\\t\\t_userElectionID,\\n\\t\\t\\t\\\"-\\\"\\n\\t\\t);\\n\\t\\trequire(parts.length > 0, \\\"Invalid custom election ID format\\\");\\n\\n\\t\\treturn parts[0];\\n\\t}\\n\\n\\tfunction decodeBytes10(bytes10 data) internal pure returns (string memory) {\\n\\t\\tstring memory decodedString = new string(10);\\n\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(decodedString, 32), data)\\n\\t\\t}\\n\\n\\t\\treturn decodedString;\\n\\t}\\n\\n\\tfunction capitalizeFirstLetter(\\n\\t\\tstring memory str\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tif (bStr.length == 0) return \\\"\\\"; // Return empty string if no input\\n\\n\\t\\t// \\u2705 Convert first letter to uppercase\\n\\t\\tif (bStr[0] >= 0x61 && bStr[0] <= 0x7A) {\\n\\t\\t\\t// Check if lowercase a-z\\n\\t\\t\\tbStr[0] = bytes1(uint8(bStr[0]) - 32);\\n\\t\\t}\\n\\n\\t\\t// \\u2705 Convert the rest to lowercase\\n\\t\\tfor (uint256 i = 1; i < bStr.length; i++) {\\n\\t\\t\\tif (bStr[i] >= 0x41 && bStr[i] <= 0x5A) {\\n\\t\\t\\t\\t// Check if uppercase A-Z\\n\\t\\t\\t\\tbStr[i] = bytes1(uint8(bStr[i]) + 32); // Convert to lowercase\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn string(bStr);\\n\\t}\\n\\n\\tfunction arrayContains(\\n\\t\\tstring[] storage array,\\n\\t\\tstring memory element\\n\\t) internal view returns (bool) {\\n\\t\\tfor (uint256 i = 0; i < array.length; ++i) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(array[i])) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(element))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction onlyAlphanumericCharacters(\\n\\t\\tstring memory _input\\n\\t) internal pure returns (bool) {\\n\\t\\tbytes memory b = bytes(_input);\\n\\t\\tfor (uint i = 0; i < b.length; ++i) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\n\\t\\t\\t\\t\\t(uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\n\\t\\t\\t\\t\\t(uint8(b[i]) >= 97 && uint8(b[i]) <= 122)) // a-z\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowWhiteSpace(\\n\\t\\tstring memory _input\\n\\t) internal pure returns (bool) {\\n\\t\\tbytes memory b = bytes(_input);\\n\\t\\tfor (uint i = 0; i < b.length; ++i) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!((uint8(b[i]) >= 48 && uint8(b[i]) <= 57) || // 0-9\\n\\t\\t\\t\\t\\t(uint8(b[i]) >= 65 && uint8(b[i]) <= 90) || // A-Z\\n\\t\\t\\t\\t\\t(uint8(b[i]) >= 97 && uint8(b[i]) <= 122)) || // a-z\\n\\t\\t\\t\\tuint8(b[i]) == 32 // Space\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction appendToStringArray(\\n\\t\\tstring[] memory array,\\n\\t\\tstring memory newValue\\n\\t) internal pure returns (string[] memory) {\\n\\t\\tstring[] memory newArray = new string[](array.length + 1);\\n\\n\\t\\tfor (uint32 i = 0; i < array.length; ++i) {\\n\\t\\t\\tnewArray[i] = array[i];\\n\\t\\t}\\n\\n\\t\\tnewArray[array.length] = newValue;\\n\\n\\t\\treturn newArray;\\n\\t}\\n\\n\\tfunction uintToString(uint48 value) internal pure returns (string memory) {\\n\\t\\tif (value == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\tuint48 temp = value;\\n\\t\\tuint48 length;\\n\\t\\twhile (temp != 0) {\\n\\t\\t\\tlength++;\\n\\t\\t\\ttemp /= 10;\\n\\t\\t}\\n\\n\\t\\tbytes memory buffer = new bytes(length);\\n\\t\\tuint48 i = length - 1;\\n\\t\\twhile (value != 0) {\\n\\t\\t\\tbuffer[i] = bytes1(uint8(48 + (value % 10)));\\n\\t\\t\\tvalue /= 10;\\n\\t\\t\\ti--;\\n\\t\\t}\\n\\n\\t\\treturn string(buffer);\\n\\t}\\n\\n\\tfunction uint2str(\\n\\t\\tuint _i\\n\\t) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\t++len;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k - 1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction compareStrings(\\n\\t\\tstring memory a,\\n\\t\\tstring memory b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn (keccak256(abi.encodePacked(a)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(b)));\\n\\t}\\n\\n\\tfunction splitString(\\n\\t\\tstring memory str,\\n\\t\\tstring memory delimiter\\n\\t) internal pure returns (string[] memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory delimiterBytes = bytes(delimiter);\\n\\n\\t\\tuint delimiterCount = 1;\\n\\t\\tfor (uint i = 0; i < strBytes.length; ++i) {\\n\\t\\t\\tif (strBytes[i] == delimiterBytes[0]) {\\n\\t\\t\\t\\t++delimiterCount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tstring[] memory parts = new string[](delimiterCount);\\n\\n\\t\\tuint partStart = 0;\\n\\t\\tuint partIndex = 0;\\n\\t\\tfor (uint i = 0; i < strBytes.length; ++i) {\\n\\t\\t\\tif (strBytes[i] == delimiterBytes[0]) {\\n\\t\\t\\t\\tparts[partIndex] = substring(str, partStart, i);\\n\\t\\t\\t\\tpartStart = i + 1;\\n\\t\\t\\t\\tpartIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Add the last part\\n\\t\\tparts[partIndex] = substring(str, partStart, strBytes.length);\\n\\n\\t\\treturn parts;\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tuint startIndex,\\n\\t\\tuint endIndex\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\trequire(\\n\\t\\t\\tstartIndex <= endIndex && endIndex <= strBytes.length,\\n\\t\\t\\t\\\"Invalid substring indices\\\"\\n\\t\\t);\\n\\n\\t\\tbytes memory result = new bytes(endIndex - startIndex);\\n\\t\\tfor (uint i = startIndex; i < endIndex; ++i) {\\n\\t\\t\\tresult[i - startIndex] = strBytes[i];\\n\\t\\t}\\n\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\tfunction extractOrgIdFromElectionId(\\n\\t\\tstring memory _userElectionID\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory orgIdBytes = bytes(_userElectionID);\\n\\n\\t\\t// Split the input string at the hyphen ('-')\\n\\t\\tuint8 i = 0;\\n\\t\\twhile (i < orgIdBytes.length && orgIdBytes[i] != \\\"-\\\") {\\n\\t\\t\\t// ASCII code for hyphen '-'\\n\\t\\t\\t++i;\\n\\t\\t}\\n\\n\\t\\t// If a hyphen is found, extract the organization ID\\n\\t\\tif (i < orgIdBytes.length) {\\n\\t\\t\\tbytes memory extractedBytes = new bytes(i);\\n\\t\\t\\tfor (uint8 j = 0; j < i; ++j) {\\n\\t\\t\\t\\textractedBytes[j] = orgIdBytes[j];\\n\\t\\t\\t}\\n\\t\\t\\treturn string(extractedBytes);\\n\\t\\t}\\n\\n\\t\\treturn \\\"\\\";\\n\\t}\\n\\n\\tfunction concat(\\n\\t\\tstring memory _a,\\n\\t\\tstring memory _b\\n\\t) internal pure returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(bytes(_a), bytes(_b)));\\n\\t}\\n}\\n\",\"keccak256\":\"0x502f8fde6cc04cd1b0ee935f1bdd9266d27628338ce0f3371e24f16966358efa\",\"license\":\"MIT\"},\"contracts/VotreXSystemRC2C.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma abicoder v2;\\npragma solidity ^0.8.24;\\n\\nimport \\\"./UtilityLibrary.sol\\\";\\n\\ncontract TestCompleXA2C {\\n\\tusing UtilityLibrary for *;\\n\\n\\tconstructor(uint256 _timeOffset) {\\n\\t\\tVotreXOwnerAddress = msg.sender;\\n\\t\\tVotreXActivated = true;\\n\\t\\tTime_Offset = _timeOffset;\\n\\t}\\n\\n\\tuint256 private organizationsCounter;\\n\\tbool private VotreXActivated;\\n\\taddress private VotreXOwnerAddress;\\n\\tbytes32 public VotreXOwnerName = keccak256(abi.encodePacked(\\\"ATom\\\"));\\n\\tuint256 private VotreXUserCounter;\\n\\tuint256 private immutable Time_Offset;\\n\\n\\tmapping(string => Organization) public organizationData;\\n\\tmapping(address => ElectionAdmins) public admin;\\n\\tmapping(address => Voter) public voters;\\n\\tmapping(bytes32 => address[]) private voterAddrList;\\n\\tmapping(bytes32 => string[]) private voterNameList;\\n\\tmapping(string => bytes32) private voterBirthDateByName;\\n\\tmapping(bytes32 => mapping(address => bool)) public hasVoted;\\n\\tmapping(bytes32 => mapping(string => CandidateDetail))\\n\\t\\tpublic temporalCandidates;\\n\\tmapping(bytes32 => ElectionDetail) public electionInfo;\\n\\tmapping(string => ElectionResult) public electionResults;\\n\\tmapping(bytes32 => bool) private electionExistanceChecks;\\n\\tmapping(bytes16 => bool) private votersIDExists;\\n\\tmapping(address => bool) private registeredAdmin;\\n\\n\\tenum ElectionStatus {\\n\\t\\tPreparation,\\n\\t\\tStarted,\\n\\t\\tHeadToHeadWave,\\n\\t\\tFinished,\\n\\t\\tFailed\\n\\t}\\n\\n\\tenum OrganizationType {\\n\\t\\tOrganization,\\n\\t\\tChurches,\\n\\t\\tCorporate\\n\\t}\\n\\n\\tstruct Organization {\\n\\t\\tOrganizationType orgType;\\n\\t\\taddress electionAdminAddresses;\\n\\t\\tuint256 onPreparationElectionCounter;\\n\\t\\tuint256 activeElectionCounter;\\n\\t\\tuint256 archivedElectionCounter;\\n\\t\\tuint256 totalMembers;\\n\\t\\tbytes32 orgName;\\n\\t\\tstring orgID;\\n\\t\\tbytes32[] electionIDs;\\n\\t\\tbytes32[] ElectionName;\\n\\t\\tElectionStatus[] electionStatus;\\n\\t}\\n\\n\\tstruct ElectionAdmins {\\n\\t\\tbool isRegistered;\\n\\t\\tuint8 adminOrgCount;\\n\\t\\tbytes10 AdminVoterIDOrg1;\\n\\t\\tbytes10 AdminVoterIDOrg2;\\n\\t\\taddress electionAdminAddress;\\n\\t\\tuint256 nextOrgCreationBlock;\\n\\t\\tbytes32 adminName;\\n\\t\\tbytes32 userBirthDate;\\n\\t\\tstring RegisteredOrgID1;\\n\\t\\tstring RegisteredOrgID2;\\n\\t}\\n\\n\\tstruct ElectionResult {\\n\\t\\tbool isPruned;\\n\\t\\taddress adminAddress;\\n\\t\\tuint256 waveNumber;\\n\\t\\tuint startTime;\\n\\t\\tuint endTime;\\n\\t\\tuint totalVoter;\\n\\t\\tbytes32 electionID;\\n\\t\\tbytes32 electionName;\\n\\t\\tbytes32 digitalSignature;\\n\\t\\tstring registeredOrganization;\\n\\t\\tstring electionWinner;\\n\\t\\tstring signedBy;\\n\\t\\tCandidateDetail[] candidates;\\n\\t}\\n\\n\\tstruct Voter {\\n\\t\\tbool isRegistered;\\n\\t\\taddress VoterAddress;\\n\\t\\tbytes16 VoterIDOrg1;\\n\\t\\tbytes16 VoterIDOrg2;\\n\\t\\tstring VoterName;\\n\\t\\tstring RegisteredOrgID1;\\n\\t\\tstring RegisteredOrgID2;\\n\\t\\tbytes32 userBirthDate;\\n\\t}\\n\\n\\tstruct ElectionDetail {\\n\\t\\tElectionStatus status;\\n\\t\\tuint8 candidateList;\\n\\t\\tbool isFinished;\\n\\t\\tbool isHaveCandidateMode;\\n\\t\\tbytes32 electionID;\\n\\t\\tbytes32 electionName;\\n\\t\\tuint startTime;\\n\\t\\tuint endTime;\\n\\t\\tstring orgID;\\n\\t\\tuint256 totalParticipants;\\n\\t\\tuint256 waveNumber;\\n\\t\\tCandidateDetail[] candidates;\\n\\t\\tbool isTiedVoting;\\n\\t}\\n\\n\\tstruct CandidateDetail {\\n\\t\\tuint8 candidateID;\\n\\t\\tuint256 candidateVoteCount;\\n\\t\\tstring candidateName;\\n\\t}\\n\\n\\tmodifier onlyOrgAdmin(string memory _IDParameters) {\\n\\t\\tbool isAdminRegisteredForOrg = false;\\n\\t\\tif (\\n\\t\\t\\tkeccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(_IDParameters)) ||\\n\\t\\t\\tkeccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2)) ==\\n\\t\\t\\tkeccak256(abi.encodePacked(_IDParameters))\\n\\t\\t) {\\n\\t\\t\\tisAdminRegisteredForOrg = true;\\n\\t\\t} else if (\\n\\t\\t\\tbytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID1)) !=\\n\\t\\t\\tbytes32(abi.encodePacked(_IDParameters)) ||\\n\\t\\t\\tbytes32(abi.encodePacked(admin[msg.sender].RegisteredOrgID2)) !=\\n\\t\\t\\tbytes32(abi.encodePacked(_IDParameters))\\n\\t\\t) {\\n\\t\\t\\tstring memory orgID = UtilityLibrary.extractOrgId(_IDParameters);\\n\\t\\t\\tisAdminRegisteredForOrg = true;\\n\\t\\t}\\n\\n\\t\\trequire(isAdminRegisteredForOrg, \\\"error:31a\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuthorizedMember(string memory _userElectionID) {\\n\\t\\tstring memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n\\t\\tbool isAdminRegisteredForOrg = (keccak256(\\n\\t\\t\\tabi.encodePacked(admin[msg.sender].RegisteredOrgID1)\\n\\t\\t) == keccak256(abi.encodePacked(orgID))) ||\\n\\t\\t\\t(keccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID2)) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(orgID)));\\n\\n\\t\\tbool isVoterRegisteredForOrg = (keccak256(\\n\\t\\t\\tabi.encodePacked(voters[msg.sender].RegisteredOrgID1)\\n\\t\\t) == keccak256(abi.encodePacked(orgID))) ||\\n\\t\\t\\t(keccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID2)) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(orgID)));\\n\\n\\t\\trequire(\\n\\t\\t\\tisAdminRegisteredForOrg || isVoterRegisteredForOrg,\\n\\t\\t\\t// error 31a = Incorrect access control\\n\\t\\t\\t\\\"error:31a\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier canCreateOrg() {\\n\\t\\trequire(\\n\\t\\t\\tblock.number >= admin[msg.sender].nextOrgCreationBlock,\\n\\t\\t\\t// error 32 = error Block await for 2nd Admin Org Registration\\n\\t\\t\\t\\\"error:32\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyVotreXOwner() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == VotreXOwnerAddress,\\n\\t\\t\\t// error 31b = errror Owner access\\n\\t\\t\\t\\\"error:31b\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyWhenActivated() {\\n\\t\\trequire(\\n\\t\\t\\tVotreXActivated == true,\\n\\t\\t\\t// error 33 = error system still disabled\\n\\t\\t\\t\\\"error:33\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction changeSystemState() external onlyVotreXOwner {\\n\\t\\tif (VotreXActivated == false) {\\n\\t\\t\\tVotreXActivated = true;\\n\\t\\t} else {\\n\\t\\t\\tVotreXActivated = false;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction registerOrganization(\\n\\t\\tstring memory _orgName,\\n\\t\\tstring memory _orgID,\\n\\t\\tstring memory _adminName,\\n\\t\\tbytes32 _userBirthDate,\\n\\t\\tOrganizationType _orgType\\n\\t) external canCreateOrg onlyWhenActivated {\\n\\t\\tElectionAdmins storage AdminInfo = admin[msg.sender];\\n\\t\\trequire(\\n\\t\\t\\torganizationsCounter < 32000,\\n\\t\\t\\t// error 35 = error limit reached\\n\\t\\t\\t\\\"error:35\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes32(organizationData[_orgID].orgName).length > 0,\\n\\t\\t\\t// error 36a = error incorrect null value\\n\\t\\t\\t\\\"error:36a\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\torganizationData[_orgID].electionAdminAddresses == address(0),\\n\\t\\t\\t// error 36a = error incorrect null value\\n\\t\\t\\t\\\"error:36a\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tUtilityLibrary.onlyAlphanumericCharacters(_orgID),\\n\\t\\t\\t// error36b = Only Alpha Numeric character allowed\\n\\t\\t\\t\\\"error:36b\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_orgName).length > 0,\\n\\t\\t\\t// error 36a = error incorrect null value\\n\\t\\t\\t\\\"error:36a\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_orgName).length < 32,\\n\\t\\t\\t// error 36c = error character length limit\\n\\n\\t\\t\\t\\\"error:36c\\\"\\n\\t\\t);\\n\\n\\t\\trequire(bytes(_adminName).length > 1);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_orgID).length == 3 ||\\n\\t\\t\\t\\tbytes(_orgID).length == 4 ||\\n\\t\\t\\t\\tbytes(_orgID).length == 5,\\n\\t\\t\\t\\\"Org ID should 3 - 5 characters\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tkeccak256(abi.encodePacked(admin[msg.sender].RegisteredOrgID1)) !=\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_orgID)) &&\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(admin[msg.sender].RegisteredOrgID2)\\n\\t\\t\\t\\t) !=\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_orgID)),\\n\\t\\t\\t\\\"Admin is registered\\\"\\n\\t\\t);\\n\\n\\t\\tOrganization storage newOrg = organizationData[_orgID];\\n\\t\\tnewOrg.orgID = _orgID;\\n\\t\\tnewOrg.orgName = bytes32(abi.encodePacked(_orgName));\\n\\t\\tnewOrg.orgType = _orgType;\\n\\t\\tnewOrg.electionAdminAddresses = msg.sender;\\n\\t\\tnewOrg.activeElectionCounter = 0;\\n\\t\\tnewOrg.totalMembers = 1;\\n\\n\\t\\tbytes10 UniqueAdminvoterID = bytes10(\\n\\t\\t\\tabi.encodePacked(_orgID, \\\"-\\\", \\\"Admin\\\")\\n\\t\\t);\\n\\n\\t\\tif (bytes(admin[msg.sender].RegisteredOrgID1).length == 0) {\\n\\t\\t\\tadmin[msg.sender].RegisteredOrgID1 = _orgID;\\n\\t\\t\\tadmin[msg.sender].AdminVoterIDOrg1 = UniqueAdminvoterID;\\n\\t\\t} else if (bytes(admin[msg.sender].RegisteredOrgID2).length == 0) {\\n\\t\\t\\tadmin[msg.sender].RegisteredOrgID2 = _orgID;\\n\\t\\t\\tadmin[msg.sender].AdminVoterIDOrg2 = UniqueAdminvoterID;\\n\\t\\t}\\n\\n\\t\\tAdminInfo.electionAdminAddress = msg.sender;\\n\\t\\tAdminInfo.adminName = bytes32(abi.encodePacked(_adminName));\\n\\t\\tAdminInfo.userBirthDate = _userBirthDate;\\n\\t\\tvoterBirthDateByName[_adminName] = _userBirthDate;\\n\\t\\tAdminInfo.isRegistered = true;\\n\\n\\t\\t++AdminInfo.adminOrgCount;\\n\\n\\t\\tregisteredAdmin[msg.sender] = true;\\n\\t\\tvotersIDExists[UniqueAdminvoterID] = true;\\n\\n\\t\\tAdminInfo.nextOrgCreationBlock = 50 + block.number;\\n\\n\\t\\t++organizationsCounter;\\n\\t\\t++VotreXUserCounter;\\n\\t}\\n\\n\\tfunction registerVoter(\\n\\t\\tstring memory _voterName,\\n\\t\\tstring memory _orgID,\\n\\t\\tbytes32 _userBirthDate,\\n\\t\\tbytes32 uniqueVoterID\\n\\t) external payable onlyWhenActivated {\\n\\t\\tVoter storage voter = voters[msg.sender];\\n\\t\\tbytes16 VoterID16 = bytes16(abi.encodePacked(uniqueVoterID));\\n\\t\\tbytes32 _orgID32 = bytes32(abi.encodePacked(_orgID));\\n\\n\\t\\trequire(\\n\\t\\t\\torganizationData[_orgID].totalMembers < 5000,\\n\\t\\t\\t\\\"Maximum member limit reached\\\"\\n\\t\\t);\\n\\n\\t\\trequire(bytes(_voterName).length > 1, \\\"Please fill Voter Name\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_voterName).length < 24,\\n\\t\\t\\t\\\"Voter name limit is 24 characters\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tkeccak256(abi.encodePacked(voters[msg.sender].RegisteredOrgID1)) !=\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_orgID)) &&\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\tabi.encodePacked(voters[msg.sender].RegisteredOrgID2)\\n\\t\\t\\t\\t) !=\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_orgID)) &&\\n\\t\\t\\t\\t!registeredAdmin[msg.sender],\\n\\t\\t\\t\\\"Voter is registered in Org\\\"\\n\\t\\t);\\n\\n\\t\\trequire(ElectionActiveCheck(_orgID) < 1, \\\"Election in progress!\\\");\\n\\n\\t\\trequire(bytes16(uniqueVoterID).length > 0);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(organizationData[_orgID].orgID).length != 0,\\n\\t\\t\\t\\\"Organization does not exist\\\"\\n\\t\\t);\\n\\n\\t\\tif (bytes(voter.RegisteredOrgID1).length == 0) {\\n\\t\\t\\tvoter.RegisteredOrgID1 = _orgID;\\n\\t\\t\\tvoter.VoterIDOrg1 = VoterID16;\\n\\t\\t} else if (bytes(voter.RegisteredOrgID2).length == 0) {\\n\\t\\t\\tvoter.RegisteredOrgID2 = _orgID;\\n\\t\\t\\tvoter.VoterIDOrg2 = VoterID16;\\n\\t\\t}\\n\\n\\t\\tvoter.VoterAddress = msg.sender;\\n\\t\\tvoter.VoterName = _voterName;\\n\\t\\tvoter.isRegistered = true;\\n\\t\\tvoter.userBirthDate = _userBirthDate;\\n\\t\\tvoterNameList[_orgID32].push(_voterName);\\n\\t\\tvoterBirthDateByName[_voterName] = _userBirthDate;\\n\\t\\tvotersIDExists[VoterID16] = true;\\n\\t\\t++VotreXUserCounter;\\n\\t\\t++organizationData[_orgID].totalMembers;\\n\\t}\\n\\n\\tfunction createElection(\\n\\t\\tstring memory _orgID,\\n\\t\\tstring memory _userElectionID,\\n\\t\\tstring memory _electionName,\\n\\t\\tuint8 _candidateCount,\\n\\t\\tbool _isHaveCandidateMode\\n\\t) external onlyWhenActivated onlyOrgAdmin(_orgID) {\\n\\t\\trequire(bytes(organizationData[_orgID].orgID).length > 0);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_userElectionID).length > 1,\\n\\t\\t\\t// error 36a = error incorrect null value\\n\\t\\t\\t\\\"error 36a\\\"\\n\\t\\t);\\n\\n\\t\\trequire(bytes(_userElectionID).length < 5, \\\"ID should < 5 characters\\\");\\n\\n\\t\\trequire(bytes(_electionName).length > 1);\\n\\n\\t\\trequire(bytes(_electionName).length < 25, \\\"Election name should < 25\\\");\\n\\n\\t\\trequire(\\n\\t\\t\\torganizationData[_orgID].activeElectionCounter < 10,\\n\\t\\t\\t\\\"Maximum events reached\\\"\\n\\t\\t);\\n\\n\\t\\tbytes32 generatedElectionID = bytes32(\\n\\t\\t\\tabi.encodePacked(_orgID, \\\"-\\\", _userElectionID)\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t!electionExistanceChecks[generatedElectionID],\\n\\t\\t\\t\\\"Election ID exists\\\"\\n\\t\\t);\\n\\n\\t\\tElectionDetail storage newElection = electionInfo[generatedElectionID];\\n\\t\\tnewElection.orgID = _orgID;\\n\\t\\tnewElection.electionID = generatedElectionID;\\n\\t\\tnewElection.electionName = bytes32(abi.encodePacked(_electionName));\\n\\t\\tnewElection.status = ElectionStatus.Preparation;\\n\\t\\telectionExistanceChecks[generatedElectionID] = true;\\n\\n\\t\\tif (_isHaveCandidateMode == true) {\\n\\t\\t\\trequire(_candidateCount > 1, \\\"Minimum 2 candidates!\\\");\\n\\n\\t\\t\\tnewElection.candidateList = _candidateCount;\\n\\t\\t} else {\\n\\t\\t\\tnewElection.candidateList = 0;\\n\\t\\t}\\n\\n\\t\\tnewElection.isHaveCandidateMode = _isHaveCandidateMode;\\n\\t\\telectionExistanceChecks[generatedElectionID] = true;\\n\\t\\torganizationData[_orgID].electionIDs.push(generatedElectionID);\\n\\t\\torganizationData[_orgID].ElectionName.push(\\n\\t\\t\\tbytes32(abi.encodePacked(_electionName))\\n\\t\\t);\\n\\t\\torganizationData[_orgID].electionStatus.push(\\n\\t\\t\\tElectionStatus.Preparation\\n\\t\\t);\\n\\t\\t++organizationData[_orgID].onPreparationElectionCounter;\\n\\t}\\n\\n\\tfunction startElection(\\n\\t\\tstring memory _userElectionID\\n\\t) external onlyOrgAdmin(_userElectionID) {\\n\\t\\t// error 36a = error incorrect null value\\n\\t\\trequire(bytes(_userElectionID).length > 0, \\\"error:36a\\\");\\n\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tstring memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\t\\trequire(bytes16(election.electionID).length > 0, \\\"Invalid election ID\\\");\\n\\t\\trequire(\\n\\t\\t\\telection.status == ElectionStatus.Preparation,\\n\\t\\t\\t\\\"Election is not in preparation\\\"\\n\\t\\t);\\n\\n\\t\\tif (election.isHaveCandidateMode == true) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\telection.candidateList == election.candidates.length,\\n\\t\\t\\t\\t\\\"Candidate Not full\\\"\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\telection.startTime = 5 + block.timestamp;\\n\\t\\telection.status = ElectionStatus.Started;\\n\\t\\t++election.waveNumber;\\n\\t\\t++organizationData[orgIDs].activeElectionCounter;\\n\\t\\t--organizationData[orgIDs].onPreparationElectionCounter;\\n\\t\\tuint256 index = findElectionIndex(\\n\\t\\t\\torganizationData[orgIDs].electionIDs,\\n\\t\\t\\tuserElectionID\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tindex < organizationData[orgIDs].electionIDs.length,\\n\\t\\t\\t\\\"Election not found\\\"\\n\\t\\t);\\n\\t\\torganizationData[orgIDs].electionStatus[index] = ElectionStatus.Started;\\n\\t}\\n\\n\\tfunction findElectionIndex(\\n\\t\\tbytes32[] storage array,\\n\\t\\tbytes32 electionID\\n\\t) internal view returns (uint256) {\\n\\t\\tfor (uint256 i = 0; i < array.length; i++) {\\n\\t\\t\\tif (array[i] == electionID) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trevert(\\\"Election ID not found\\\");\\n\\t}\\n\\n\\tevent CandidateStored(\\n\\t\\tbytes32 indexed electionId,\\n\\t\\tstring candidateName,\\n\\t\\tuint256 voteCount\\n\\t);\\n\\n\\tfunction finishElection(\\n\\t\\tstring memory _userElectionID,\\n\\t\\tbytes32 _dataHash,\\n\\t\\tuint256 _threshold\\n\\t) external {\\n\\t\\tstring memory orgIDs = UtilityLibrary.extractOrgId(_userElectionID);\\n\\t\\tbytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage election = electionInfo[packedElectionID];\\n\\t\\tstring memory electionName = string(\\n\\t\\t\\tabi.encodePacked(election.electionName)\\n\\t\\t);\\n\\t\\tbytes32 electionIdBytes = keccak256(\\n\\t\\t\\tabi.encodePacked(_userElectionID, \\\"-\\\", electionName)\\n\\t\\t);\\n\\n\\t\\t// Cache storage in memory to reduce storage reads\\n\\t\\tElectionDetail storage elections = electionInfo[packedElectionID];\\n\\n\\t\\t// Validation checks\\n\\t\\trequire(\\n\\t\\t\\telections.status == ElectionStatus.Started,\\n\\t\\t\\t\\\"Election is not active\\\"\\n\\t\\t);\\n\\t\\trequire(!elections.isFinished, \\\"Election finished\\\");\\n\\t\\trequire(bytes(_userElectionID).length > 0, \\\"Invalid election ID\\\");\\n\\t\\trequire(_dataHash.length > 0, \\\"Invalid data hash\\\");\\n\\n\\t\\tuint256 candidatesLength = elections.candidates.length;\\n\\t\\trequire(candidatesLength >= 2, \\\"Not enough candidates\\\");\\n\\n\\t\\t// Calculate quorum threshold once\\n\\t\\tuint256 quorumThreshold = calculateValidElection(_userElectionID);\\n\\n\\t\\t// Memory array to avoid repeated storage reads\\n\\t\\tCandidateDetail[] memory candidatesMem = new CandidateDetail[](\\n\\t\\t\\tcandidatesLength\\n\\t\\t);\\n\\t\\tfor (uint256 i = 0; i < candidatesLength; i++) {\\n\\t\\t\\tcandidatesMem[i] = elections.candidates[i];\\n\\t\\t}\\n\\n\\t\\t// Check for immediate quorum - scan once to find winning candidate\\n\\t\\tbool quorumReached = false;\\n\\t\\tuint256 winningCandidateIndex;\\n\\t\\tbool kisquosientMode = false;\\n\\t\\tuint256 passedCandidateCount = 0;\\n\\n\\t\\t// Combined loop to check all conditions at once\\n\\t\\tfor (uint256 i = 0; i < candidatesLength; ++i) {\\n\\t\\t\\tuint256 voteCount = candidatesMem[i].candidateVoteCount;\\n\\n\\t\\t\\tif (voteCount > quorumThreshold) {\\n\\t\\t\\t\\tquorumReached = true;\\n\\t\\t\\t\\twinningCandidateIndex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (voteCount > _threshold) {\\n\\t\\t\\t\\t\\tkisquosientMode = true;\\n\\t\\t\\t\\t\\t++passedCandidateCount;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (quorumReached) {\\n\\t\\t\\t// Quorum reached - handle winning case\\n\\t\\t\\t_finalizeElection(\\n\\t\\t\\t\\t_userElectionID,\\n\\t\\t\\t\\tpackedElectionID,\\n\\t\\t\\t\\torgIDs,\\n\\t\\t\\t\\t_dataHash,\\n\\t\\t\\t\\twinningCandidateIndex\\n\\t\\t\\t);\\n\\t\\t\\treturn;\\n\\t\\t} else if (!quorumReached && kisquosientMode == true) {\\n\\t\\t\\t// Handle threshold-passing candidates\\n\\t\\t\\t_handleThresholdCandidates(\\n\\t\\t\\t\\t_userElectionID,\\n\\t\\t\\t\\telectionIdBytes,\\n\\t\\t\\t\\tpassedCandidateCount,\\n\\t\\t\\t\\t_threshold,\\n\\t\\t\\t\\tpackedElectionID\\n\\t\\t\\t);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\trevert(\\\"No candidates passed threshold\\\");\\n\\t}\\n\\n\\t// Internal function to finalize an election\\n\\tfunction _finalizeElection(\\n\\t\\tstring memory _userElectionID,\\n\\t\\tbytes32 packedElectionID,\\n\\t\\tstring memory orgIDs,\\n\\t\\tbytes32 _dataHash,\\n\\t\\tuint256 winningCandidateIndex\\n\\t) internal {\\n\\t\\tElectionDetail storage elections = electionInfo[packedElectionID];\\n\\n\\t\\t// Cache winner name\\n\\t\\tstring memory electionWinner = elections\\n\\t\\t\\t.candidates[winningCandidateIndex]\\n\\t\\t\\t.candidateName;\\n\\t\\tstring memory adminName = getAdminName(msg.sender);\\n\\n\\t\\t// Create result record\\n\\t\\tElectionResult storage newElectionResult = electionResults[\\n\\t\\t\\t_userElectionID\\n\\t\\t];\\n\\t\\tnewElectionResult.isPruned = true;\\n\\t\\tnewElectionResult.totalVoter = elections.totalParticipants;\\n\\t\\tnewElectionResult.adminAddress = msg.sender;\\n\\t\\tnewElectionResult.startTime = elections.startTime;\\n\\t\\tnewElectionResult.endTime = elections.endTime;\\n\\t\\tnewElectionResult.digitalSignature = _dataHash;\\n\\t\\tnewElectionResult.registeredOrganization = elections.orgID;\\n\\t\\tnewElectionResult.electionID = packedElectionID;\\n\\t\\tnewElectionResult.waveNumber = elections.waveNumber;\\n\\t\\tnewElectionResult.electionName = elections.electionName;\\n\\t\\tnewElectionResult.electionWinner = electionWinner;\\n\\t\\tnewElectionResult.signedBy = adminName;\\n\\n\\t\\t// Mark election as finished\\n\\t\\telections.isFinished = true;\\n\\t\\telections.status = ElectionStatus.Finished;\\n\\n\\t\\t// Store candidates in result\\n\\t\\tuint256 candidatesLength = elections.candidates.length;\\n\\t\\tfor (uint256 i = 0; i < candidatesLength; ++i) {\\n\\t\\t\\tCandidateDetail storage candidate = elections.candidates[i];\\n\\t\\t\\tnewElectionResult.candidates.push(\\n\\t\\t\\t\\tCandidateDetail({\\n\\t\\t\\t\\t\\tcandidateID: candidate.candidateID,\\n\\t\\t\\t\\t\\tcandidateName: candidate.candidateName,\\n\\t\\t\\t\\t\\tcandidateVoteCount: candidate.candidateVoteCount\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// Update organization data\\n\\t\\tuint256 index = findElectionIndex(\\n\\t\\t\\torganizationData[orgIDs].electionIDs,\\n\\t\\t\\tpackedElectionID\\n\\t\\t);\\n\\n\\t\\torganizationData[orgIDs].electionStatus[index] = ElectionStatus\\n\\t\\t\\t.Finished;\\n\\n\\t\\t// Use unchecked for simple increment/decrement\\n\\t\\t++organizationData[orgIDs].archivedElectionCounter;\\n\\t\\t--organizationData[orgIDs].activeElectionCounter;\\n\\t}\\n\\n\\t// Internal function to handle threshold-passing candidates\\n\\tfunction _handleThresholdCandidates(\\n\\t\\tstring memory _userElectionID,\\n\\t\\tbytes32 electionIdBytes,\\n\\t\\tuint256 passedCandidateCount,\\n\\t\\tuint256 _threshold,\\n\\t\\tbytes32 packedElectionID\\n\\t) internal {\\n\\t\\tElectionDetail storage elections = electionInfo[packedElectionID];\\n\\n\\t\\tif (passedCandidateCount < 2) {\\n\\t\\t\\t// Single candidate passing threshold\\n\\t\\t\\t_handleSinglePassedCandidate(\\n\\t\\t\\t\\telectionIdBytes,\\n\\t\\t\\t\\telections,\\n\\t\\t\\t\\t_threshold\\n\\t\\t\\t);\\n\\t\\t\\treturn;\\n\\t\\t} else if (passedCandidateCount > 2) {\\n\\t\\t\\t// Multiple candidates passing threshold\\n\\n\\t\\t\\tuint256[] memory lowestIndices = _findLowestVoteCandidate(\\n\\t\\t\\t\\telections.candidates\\n\\t\\t\\t);\\n\\t\\t\\t_removeCandidate(elections.candidates, lowestIndices);\\n\\n\\t\\t\\t_resetElectionRound(_userElectionID);\\n\\t\\t\\tdelete voterAddrList[electionIdBytes];\\n\\t\\t\\treturn;\\n\\t\\t} else {\\n\\t\\t\\t// Exactly 2 candidates passing threshold\\n\\t\\t\\tif (elections.waveNumber <= 2) {\\n\\t\\t\\t\\t// Early wave (waveNumber 1)\\n\\t\\t\\t\\tfor (uint256 k = 0; k < elections.candidates.length; ++k) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\telections.candidates[k].candidateVoteCount > _threshold\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\ttemporalCandidates[electionIdBytes][\\n\\t\\t\\t\\t\\t\\t\\telections.candidates[k].candidateName\\n\\t\\t\\t\\t\\t\\t].candidateName = elections.candidates[k].candidateName;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuint256[] memory lowestIndices = _findLowestVoteCandidate(\\n\\t\\t\\t\\t\\telections.candidates\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t_removeCandidate(elections.candidates, lowestIndices);\\n\\n\\t\\t\\t\\t// Reset for next round\\n\\t\\t\\t\\t_resetElectionRound(_userElectionID);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// Final wave (waveNumber = 2)\\n\\t\\t\\t\\tuint256 winnerIndex;\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\telections.candidates[0].candidateVoteCount >\\n\\t\\t\\t\\t\\telections.candidates[1].candidateVoteCount\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\twinnerIndex = 0;\\n\\t\\t\\t\\t} else if (\\n\\t\\t\\t\\t\\telections.candidates[1].candidateVoteCount >\\n\\t\\t\\t\\t\\telections.candidates[0].candidateVoteCount\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\twinnerIndex = 1;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\telections.isTiedVoting = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Finalize election\\n\\t\\t\\t\\t_finalizeElection(\\n\\t\\t\\t\\t\\t_userElectionID,\\n\\t\\t\\t\\t\\telectionIdBytes,\\n\\t\\t\\t\\t\\telections.orgID,\\n\\t\\t\\t\\t\\tbytes32(0),\\n\\t\\t\\t\\t\\twinnerIndex\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\n\\t// Internal function to find the candidate with lowest votes\\n\\tfunction _findLowestVoteCandidate(\\n\\t\\tCandidateDetail[] storage candidates\\n\\t) internal view returns (uint256[] memory) {\\n\\t\\trequire(candidates.length > 0, \\\"No candidates to evaluate\\\");\\n\\n\\t\\t// First find the lowest vote count\\n\\t\\tuint256 lowestVotes = type(uint256).max;\\n\\t\\tfor (uint256 i = 0; i < candidates.length; ++i) {\\n\\t\\t\\tif (candidates[i].candidateVoteCount < lowestVotes) {\\n\\t\\t\\t\\tlowestVotes = candidates[i].candidateVoteCount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Count how many candidates have the lowest vote\\n\\t\\tuint256 lowestCount = 0;\\n\\t\\tfor (uint256 i = 0; i < candidates.length; ++i) {\\n\\t\\t\\tif (candidates[i].candidateVoteCount == lowestVotes) {\\n\\t\\t\\t\\tlowestCount++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Create array to store indices of candidates with lowest votes\\n\\t\\tuint256[] memory lowestIndices = new uint256[](lowestCount);\\n\\t\\tuint256 arrayIndex = 0;\\n\\n\\t\\t// Fill array with indices\\n\\t\\tfor (uint256 i = 0; i < candidates.length; ++i) {\\n\\t\\t\\tif (candidates[i].candidateVoteCount == lowestVotes) {\\n\\t\\t\\t\\tlowestIndices[arrayIndex] = i;\\n\\t\\t\\t\\tarrayIndex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn lowestIndices;\\n\\t}\\n\\n\\t// Internal function to find the candidate with highest votes that passes a threshold\\n\\tfunction _findHighestVoteCandidateAboveThreshold(\\n\\t\\tCandidateDetail[] storage candidates,\\n\\t\\tuint256 threshold\\n\\t) internal view returns (uint256) {\\n\\t\\tuint256 highestVotes = 0;\\n\\t\\tuint256 highestIndex = type(uint256).max; // Invalid index to detect no matches\\n\\t\\tuint256 candidatesLength = candidates.length;\\n\\n\\t\\tfor (uint256 k = 0; k < candidatesLength; ++k) {\\n\\t\\t\\tuint256 currentVotes = candidates[k].candidateVoteCount;\\n\\t\\t\\tif (currentVotes > threshold && currentVotes > highestVotes) {\\n\\t\\t\\t\\thighestVotes = currentVotes;\\n\\t\\t\\t\\thighestIndex = k;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\thighestIndex != type(uint256).max,\\n\\t\\t\\t\\\"No candidate above threshold\\\"\\n\\t\\t);\\n\\t\\treturn highestIndex;\\n\\t}\\n\\n\\tfunction _handleSinglePassedCandidate(\\n\\t\\tbytes32 electionIdBytes,\\n\\t\\tElectionDetail storage elections,\\n\\t\\tuint256 _threshold\\n\\t) internal {\\n\\t\\t// Find the candidate that passed the threshold (should be the highest vote candidate)\\n\\t\\tuint256 highestIndex = _findHighestVoteCandidateAboveThreshold(\\n\\t\\t\\telections.candidates,\\n\\t\\t\\t_threshold\\n\\t\\t);\\n\\t\\tCandidateDetail storage thresholdCandidate = elections.candidates[\\n\\t\\t\\thighestIndex\\n\\t\\t];\\n\\n\\t\\t// Save candidate to temporal storage\\n\\t\\ttemporalCandidates[electionIdBytes][\\n\\t\\t\\tthresholdCandidate.candidateName\\n\\t\\t] = CandidateDetail({\\n\\t\\t\\tcandidateID: thresholdCandidate.candidateID,\\n\\t\\t\\tcandidateName: thresholdCandidate.candidateName,\\n\\t\\t\\tcandidateVoteCount: thresholdCandidate.candidateVoteCount\\n\\t\\t});\\n\\n\\t\\t// Find and remove lowest candidate\\n\\t\\tuint256[] memory lowestIndices = _findLowestVoteCandidate(\\n\\t\\t\\telections.candidates\\n\\t\\t);\\n\\t\\t_removeCandidate(elections.candidates, lowestIndices);\\n\\n\\t\\t// Reset votes for next round\\n\\t\\tfor (uint256 m = 0; m < elections.candidates.length; ++m) {\\n\\t\\t\\telections.candidates[m].candidateVoteCount = 0;\\n\\t\\t}\\n\\n\\t\\t// Reset voter states\\n\\t\\taddress[] storage voterStorage = voterAddrList[electionIdBytes];\\n\\t\\tfor (uint256 n = 0; n < voterStorage.length; ++n) {\\n\\t\\t\\thasVoted[electionIdBytes][voterStorage[n]] = false;\\n\\t\\t}\\n\\t\\tdelete voterAddrList[electionIdBytes];\\n\\n\\t\\telections.totalParticipants = 0;\\n\\t\\t++elections.waveNumber;\\n\\t\\telections.isFinished = false;\\n\\t\\temit CandidateStored(\\n\\t\\t\\telectionIdBytes,\\n\\t\\t\\tthresholdCandidate.candidateName,\\n\\t\\t\\tthresholdCandidate.candidateVoteCount\\n\\t\\t);\\n\\t}\\n\\n\\t// Internal function to reset for next election round\\n\\tfunction _resetElectionRound(string memory _userElectionID) internal {\\n\\t\\tbytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage elections = electionInfo[packedElectionID];\\n\\t\\tstring memory electionName = string(\\n\\t\\t\\tabi.encodePacked(elections.electionName)\\n\\t\\t);\\n\\t\\tbytes32 electionIdBytes = keccak256(\\n\\t\\t\\tabi.encodePacked(_userElectionID, \\\"-\\\", electionName)\\n\\t\\t);\\n\\n\\t\\t// Reset votes for all candidates\\n\\t\\tuint256 candidatesLength = elections.candidates.length;\\n\\t\\tfor (uint256 i = 0; i < candidatesLength; ++i) {\\n\\t\\t\\telections.candidates[i].candidateVoteCount = 0;\\n\\t\\t}\\n\\n\\t\\t// Reset voter states\\n\\t\\taddress[] storage voterStorage = voterAddrList[electionIdBytes];\\n\\t\\tuint256 votersLength = voterStorage.length;\\n\\t\\tfor (uint256 j = 0; j < votersLength; ++j) {\\n\\t\\t\\thasVoted[electionIdBytes][voterStorage[j]] = false;\\n\\t\\t}\\n\\t\\tdelete voterAddrList[electionIdBytes];\\n\\n\\t\\t// Update election\\n\\t\\telections.totalParticipants = 0;\\n\\t\\t++elections.waveNumber;\\n\\t\\telections.isFinished = false;\\n\\t}\\n\\n\\t// Internal function to remove a candidate at specified index\\n\\tfunction _removeCandidate(\\n\\t\\tCandidateDetail[] storage candidates,\\n\\t\\tuint256[] memory indices\\n\\t) internal {\\n\\t\\trequire(indices.length > 0, \\\"No candidates to remove\\\");\\n\\n\\t\\t// Sort indices in descending order to avoid array shifting issues\\n\\t\\tfor (uint256 i = 0; i < indices.length; i++) {\\n\\t\\t\\tfor (uint256 j = i + 1; j < indices.length; j++) {\\n\\t\\t\\t\\tif (indices[i] < indices[j]) {\\n\\t\\t\\t\\t\\tuint256 temp = indices[i];\\n\\t\\t\\t\\t\\tindices[i] = indices[j];\\n\\t\\t\\t\\t\\tindices[j] = temp;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Remove candidates from highest index to lowest\\n\\t\\tfor (uint256 i = 0; i < indices.length; i++) {\\n\\t\\t\\tuint256 indexToRemove = indices[i];\\n\\t\\t\\tuint256 lastIndex = candidates.length - 1;\\n\\n\\t\\t\\tif (indexToRemove != lastIndex) {\\n\\t\\t\\t\\tcandidates[indexToRemove] = candidates[lastIndex];\\n\\t\\t\\t}\\n\\t\\t\\tcandidates.pop();\\n\\t\\t}\\n\\t}\\n\\n\\tfunction calculateValidElection(\\n\\t\\tstring memory _userElectionID\\n\\t) private view returns (uint256) {\\n\\t\\tbytes32 packedElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage elections = electionInfo[packedElectionID];\\n\\t\\tuint256 MIN_VOTES_PERCENTAGE = 1 + (elections.totalParticipants / 2);\\n\\n\\t\\treturn MIN_VOTES_PERCENTAGE;\\n\\t}\\n\\n\\tfunction getOwnerAddress() external view returns (address) {\\n\\t\\treturn VotreXOwnerAddress;\\n\\t}\\n\\n\\tfunction getOwnerName() external view returns (bytes32) {\\n\\t\\treturn VotreXOwnerName;\\n\\t}\\n\\n\\tfunction getTotalUser() external view returns (uint256) {\\n\\t\\treturn VotreXUserCounter;\\n\\t}\\n\\n\\tfunction getElectionListInOrg(\\n\\t\\tstring memory orgID\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (bytes32[] memory, bytes32[] memory, ElectionStatus[] memory)\\n\\t{\\n\\t\\tOrganization storage org = organizationData[orgID];\\n\\t\\treturn (org.electionIDs, org.ElectionName, org.electionStatus);\\n\\t}\\n\\n\\tfunction getAdminName(\\n\\t\\taddress adminAddress\\n\\t) private view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(admin[adminAddress].adminName));\\n\\t}\\n\\n\\tfunction addCandidateDetail(\\n\\t\\tstring memory _userElectionID,\\n\\t\\tstring memory _candidateName\\n\\t) external onlyOrgAdmin(_userElectionID) {\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\t\\tstring memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\t\\tbytes32 orgIDBytes = bytes32(abi.encodePacked(orgID));\\n\\n\\t\\trequire(bytes(_userElectionID).length > 0);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes32(electionInfo[userElectionID].electionID).length > 0,\\n\\t\\t\\t// error 36a = error incorrect null value\\n\\t\\t\\t\\\"error:36a\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\telection.candidates.length < election.candidateList,\\n\\t\\t\\t\\\"Candidate limit reached\\\"\\n\\t\\t);\\n\\n\\t\\trequire(bytes(_candidateName).length > 0);\\n\\n\\t\\trequire(\\n\\t\\t\\tbytes(_candidateName).length <= 24,\\n\\t\\t\\t\\\"name limits 24 characters\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tUtilityLibrary.allowWhiteSpace(_candidateName),\\n\\t\\t\\t\\\"Candidate name can only contain alphabetical\\\"\\n\\t\\t);\\n\\n\\t\\tbool isValidVoterName = false;\\n\\n\\t\\tfor (uint i = 0; i < voterNameList[orgIDBytes].length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(voterNameList[orgIDBytes][i])) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(_candidateName))\\n\\t\\t\\t) {\\n\\t\\t\\t\\tisValidVoterName = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(isValidVoterName, \\\"This Candidate is not registered\\\");\\n\\n\\t\\tbytes32 encryptedBirthDate = voterBirthDateByName[_candidateName];\\n\\t\\tbool isOver60Years = UtilityLibrary.isOver60Years(\\n\\t\\t\\tencryptedBirthDate,\\n\\t\\t\\tint256(Time_Offset)\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t!isOver60Years,\\n\\t\\t\\t\\\"Candidate must be under 60 years old and born\\\"\\n\\t\\t);\\n\\n\\t\\tuint8 candidateID = uint8(election.candidates.length);\\n\\n\\t\\telection.candidates.push(\\n\\t\\t\\tCandidateDetail({\\n\\t\\t\\t\\tcandidateID: candidateID,\\n\\t\\t\\t\\tcandidateName: _candidateName,\\n\\t\\t\\t\\tcandidateVoteCount: 0\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\tfunction vote(\\n\\t\\tstring memory _userElectionID,\\n\\t\\tuint8 candidateID,\\n\\t\\tstring memory _candidateName,\\n\\t\\tbool isModeHaveCandidate\\n\\t) external onlyWhenActivated onlyAuthorizedMember(_userElectionID) {\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\t\\tbytes32 electionName = election.electionName;\\n\\t\\tbytes32 electionIdBytes = keccak256(\\n\\t\\t\\tabi.encodePacked(_userElectionID, \\\"-\\\", electionName)\\n\\t\\t);\\n\\t\\tstring memory orgID = UtilityLibrary.extractOrgId(_userElectionID);\\n\\t\\tbytes32 orgIDBytes = bytes32(abi.encodePacked(orgID));\\n\\t\\tstring memory formattedName = UtilityLibrary.capitalizeFirstLetter(\\n\\t\\t\\t_candidateName\\n\\t\\t);\\n\\n\\t\\tbool isValidVoterName = false;\\n\\n\\t\\tif (\\n\\t\\t\\tisModeHaveCandidate == true ||\\n\\t\\t\\telection.status == ElectionStatus.HeadToHeadWave\\n\\t\\t) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tbytes(_userElectionID).length > 0,\\n\\t\\t\\t\\t\\\"Election ID can't be empty\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tcandidateID < election.candidates.length,\\n\\t\\t\\t\\t\\\"Invalid candidate ID\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\telection.status == ElectionStatus.Started,\\n\\t\\t\\t\\t\\\"Election is not in progress\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!hasVoted[electionIdBytes][msg.sender],\\n\\t\\t\\t\\t\\\"Anda sudah memilih!\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t++election.candidates[candidateID].candidateVoteCount;\\n\\t\\t\\t++election.totalParticipants;\\n\\n\\t\\t\\thasVoted[electionIdBytes][msg.sender] = true;\\n\\t\\t\\tvoterAddrList[electionIdBytes].push(msg.sender);\\n\\t\\t} else {\\n\\t\\t\\trequire(bytes(_candidateName).length > 0, \\\"Silahkan masukkan nama\\\");\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!hasVoted[electionIdBytes][msg.sender],\\n\\t\\t\\t\\t\\\"Anda sudah memilih!\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\telection.status == ElectionStatus.Started,\\n\\t\\t\\t\\t\\\"Election is not in progress\\\"\\n\\t\\t\\t);\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tUtilityLibrary.allowWhiteSpace(_candidateName),\\n\\t\\t\\t\\t\\\"Please enter alphabetical Candidate name\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\tuint8 candidateIDs = uint8(election.candidates.length);\\n\\t\\t\\tbool candidateExists = false;\\n\\n\\t\\t\\tfor (uint i = 0; i < voterNameList[orgIDBytes].length; i++) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tkeccak256(abi.encodePacked(voterNameList[orgIDBytes][i])) ==\\n\\t\\t\\t\\t\\tkeccak256(abi.encodePacked(_candidateName))\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tisValidVoterName = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\trequire(isValidVoterName, \\\"This Candidate is not registered\\\");\\n\\n\\t\\t\\tbytes32 encryptedBirthDate = voterBirthDateByName[_candidateName];\\n\\n\\t\\t\\tbool isOver60Years = UtilityLibrary.isOver60Years(\\n\\t\\t\\t\\tencryptedBirthDate,\\n\\t\\t\\t\\tint256(Time_Offset)\\n\\t\\t\\t);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!isOver60Years,\\n\\t\\t\\t\\t\\\"Candidate must be under 60 years old and born\\\"\\n\\t\\t\\t);\\n\\n\\t\\t\\t// Loop melalui array kandidat untuk mencari nama yang cocok\\n\\t\\t\\tfor (uint256 i = 0; i < election.candidates.length; i++) {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(election.candidates[i].candidateName)\\n\\t\\t\\t\\t\\t) == keccak256(abi.encodePacked(formattedName))\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t// Jika kandidat ditemukan, tambahkan voteCount\\n\\t\\t\\t\\t\\telection.candidates[i].candidateVoteCount += 1;\\n\\t\\t\\t\\t\\tcandidateExists = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Jika kandidat belum ada, tambahkan kandidat baru ke array\\n\\t\\t\\tif (!candidateExists) {\\n\\t\\t\\t\\tCandidateDetail memory newCandidate = CandidateDetail({\\n\\t\\t\\t\\t\\tcandidateID: candidateIDs,\\n\\t\\t\\t\\t\\tcandidateName: _candidateName,\\n\\t\\t\\t\\t\\tcandidateVoteCount: 1\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\telection.candidates.push(newCandidate);\\n\\t\\t\\t}\\n\\t\\t\\thasVoted[electionIdBytes][msg.sender] = true;\\n\\t\\t\\tvoterAddrList[electionIdBytes].push(msg.sender);\\n\\t\\t\\t++election.totalParticipants;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getAllCandidates(\\n\\t\\tstring memory _userElectionID\\n\\t) public view returns (CandidateDetail[] memory) {\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\t// Ambil detail pemilu berdasarkan ID\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\n\\t\\t// Pastikan ada kandidat dalam pemilu\\n\\t\\trequire(\\n\\t\\t\\telection.candidates.length > 0,\\n\\t\\t\\t\\\"No candidates found in this election!\\\"\\n\\t\\t);\\n\\n\\t\\t// Kembalikan array kandidat dari pemilu\\n\\t\\treturn election.candidates;\\n\\t}\\n\\n\\tfunction isVotreXActivated() external view returns (bool) {\\n\\t\\treturn VotreXActivated;\\n\\t}\\n\\n\\tfunction getTotalOrganization() external view virtual returns (uint256) {\\n\\t\\treturn organizationsCounter;\\n\\t}\\n\\n\\tfunction getElectionInfo(\\n\\t\\tstring memory _userElectionID\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbytes32 electionID,\\n\\t\\t\\tstring memory electionName,\\n\\t\\t\\tuint256 waveNumber,\\n\\t\\t\\tuint256 totalCandidates,\\n\\t\\t\\tuint8[] memory candidateIDs,\\n\\t\\t\\tstring[] memory candidateNames,\\n\\t\\t\\tuint256[] memory voteCounts,\\n\\t\\t\\tuint256 totalParticipants,\\n\\t\\t\\tElectionStatus statusElection,\\n\\t\\t\\tbool isHaveCandidateMode,\\n\\t\\t\\tuint8 candidateLimit\\n\\t\\t)\\n\\t{\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\t\\trequire(bytes32(election.electionID).length > 0);\\n\\n\\t\\telectionID = election.electionID;\\n\\t\\telectionName = string(abi.encodePacked(election.electionName));\\n\\t\\twaveNumber = election.waveNumber;\\n\\t\\ttotalCandidates = election.candidates.length;\\n\\t\\tcandidateLimit = election.candidateList;\\n\\t\\tcandidateIDs = new uint8[](totalCandidates); // Initialized\\n\\t\\tcandidateNames = new string[](totalCandidates);\\n\\t\\tvoteCounts = new uint256[](totalCandidates);\\n\\t\\ttotalParticipants = election.totalParticipants;\\n\\t\\tstatusElection = electionInfo[userElectionID].status;\\n\\t\\tisHaveCandidateMode = electionInfo[userElectionID].isHaveCandidateMode;\\n\\n\\t\\tfor (uint256 i = 0; i < totalCandidates; ++i) {\\n\\t\\t\\tcandidateIDs[i] = election.candidates[i].candidateID; // Added\\n\\t\\t\\tcandidateNames[i] = election.candidates[i].candidateName;\\n\\t\\t\\tvoteCounts[i] = election.candidates[i].candidateVoteCount;\\n\\t\\t}\\n\\n\\t\\treturn (\\n\\t\\t\\telectionID,\\n\\t\\t\\telectionName,\\n\\t\\t\\twaveNumber,\\n\\t\\t\\ttotalCandidates,\\n\\t\\t\\tcandidateIDs,\\n\\t\\t\\tcandidateNames,\\n\\t\\t\\tvoteCounts,\\n\\t\\t\\ttotalParticipants,\\n\\t\\t\\tstatusElection,\\n\\t\\t\\tisHaveCandidateMode,\\n\\t\\t\\tcandidateLimit\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getCandidateResult(\\n\\t\\tstring memory _electionID\\n\\t)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint8[] memory candidateID,\\n\\t\\t\\tstring[] memory candidateName,\\n\\t\\t\\tuint256[] memory candidateVoteCount\\n\\t\\t)\\n\\t{\\n\\t\\tuint totalCandidates = electionResults[_electionID].candidates.length;\\n\\n\\t\\tuint8[] memory candidateIDs = new uint8[](totalCandidates);\\n\\t\\tstring[] memory candidateNames = new string[](totalCandidates);\\n\\t\\tuint256[] memory candidateVoteCounts = new uint256[](totalCandidates);\\n\\n\\t\\tfor (uint i = 0; i < totalCandidates; i++) {\\n\\t\\t\\tcandidateIDs[i] = electionResults[_electionID]\\n\\t\\t\\t\\t.candidates[i]\\n\\t\\t\\t\\t.candidateID;\\n\\t\\t\\tcandidateNames[i] = electionResults[_electionID]\\n\\t\\t\\t\\t.candidates[i]\\n\\t\\t\\t\\t.candidateName;\\n\\t\\t\\tcandidateVoteCounts[i] = electionResults[_electionID]\\n\\t\\t\\t\\t.candidates[i]\\n\\t\\t\\t\\t.candidateVoteCount;\\n\\t\\t}\\n\\n\\t\\treturn (candidateIDs, candidateNames, candidateVoteCounts);\\n\\t}\\n\\n\\tfunction getUserInfo()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tbool isRegistered,\\n\\t\\t\\tbool isAdmin,\\n\\t\\t\\taddress userAddress,\\n\\t\\t\\tstring memory userName,\\n\\t\\t\\tstring[] memory registeredOrgList,\\n\\t\\t\\tstring[] memory voterIDList\\n\\t\\t)\\n\\t{\\n\\t\\tuserAddress = msg.sender;\\n\\n\\t\\tbool isAdminRole = admin[userAddress].isRegistered;\\n\\t\\tbool isVoterRole = voters[userAddress].isRegistered;\\n\\n\\t\\t// \\u2705 Initialize arrays before assigning values\\n\\t\\tstring[] memory RegisteredOrgIDList = new string[](2);\\n\\t\\tstring[] memory RegisteredVoterIDList = new string[](2);\\n\\t\\tstring memory combinedName = \\\"\\\"; // Store either admin or voter name\\n\\n\\t\\t// \\u2705 If user is an Admin, fill RegisteredOrgIDList & VoterIDList\\n\\t\\tif (isAdminRole) {\\n\\t\\t\\tElectionAdmins storage adminInfo = admin[userAddress];\\n\\n\\t\\t\\tRegisteredOrgIDList[0] = adminInfo.RegisteredOrgID1;\\n\\t\\t\\tRegisteredOrgIDList[1] = adminInfo.RegisteredOrgID2;\\n\\n\\t\\t\\tRegisteredVoterIDList[0] = string(\\n\\t\\t\\t\\tabi.encodePacked(adminInfo.AdminVoterIDOrg1)\\n\\t\\t\\t);\\n\\t\\t\\tRegisteredVoterIDList[1] = string(\\n\\t\\t\\t\\tabi.encodePacked(adminInfo.AdminVoterIDOrg2)\\n\\t\\t\\t);\\n\\n\\t\\t\\tcombinedName = string(abi.encodePacked(adminInfo.adminName));\\n\\t\\t}\\n\\n\\t\\t// \\u2705 If user is a Voter, ensure the data is merged properly\\n\\t\\tif (isVoterRole) {\\n\\t\\t\\tVoter storage voter = voters[userAddress];\\n\\n\\t\\t\\tif (!isAdminRole) {\\n\\t\\t\\t\\t// \\u2705 If user is ONLY a voter, store voter info directly\\n\\t\\t\\t\\tRegisteredOrgIDList[0] = voter.RegisteredOrgID1;\\n\\t\\t\\t\\tRegisteredOrgIDList[1] = voter.RegisteredOrgID2;\\n\\n\\t\\t\\t\\tRegisteredVoterIDList[0] = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(voter.VoterIDOrg1)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tRegisteredVoterIDList[1] = string(\\n\\t\\t\\t\\t\\tabi.encodePacked(voter.VoterIDOrg2)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tcombinedName = voter.VoterName;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// \\u2705 If user is BOTH Admin & Voter, merge voter data without overwriting Admin data\\n\\t\\t\\t\\tif (bytes(RegisteredOrgIDList[1]).length == 0) {\\n\\t\\t\\t\\t\\tRegisteredOrgIDList[1] = voter.RegisteredOrgID1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (bytes(RegisteredVoterIDList[1]).length == 0) {\\n\\t\\t\\t\\t\\tRegisteredVoterIDList[1] = string(\\n\\t\\t\\t\\t\\t\\tabi.encodePacked(voter.VoterIDOrg1)\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (\\n\\t\\t\\tisAdminRole || isVoterRole,\\n\\t\\t\\tisAdminRole,\\n\\t\\t\\tuserAddress,\\n\\t\\t\\tcombinedName,\\n\\t\\t\\tRegisteredOrgIDList,\\n\\t\\t\\tRegisteredVoterIDList\\n\\t\\t);\\n\\t}\\n\\n\\tfunction ElectionActiveCheck(\\n\\t\\tstring memory _orgID\\n\\t) private view returns (uint256) {\\n\\t\\treturn organizationData[_orgID].activeElectionCounter;\\n\\t}\\n\\n\\tfunction determineWinner(\\n\\t\\tstring memory _userElectionID\\n\\t) private view returns (string memory) {\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tElectionDetail storage election = electionInfo[userElectionID];\\n\\t\\tstring memory winner = \\\"\\\";\\n\\t\\tuint256 maxVotes = 0;\\n\\t\\tfor (uint8 i = 0; i < election.candidates.length; ++i) {\\n\\t\\t\\tif (election.candidates[i].candidateVoteCount > maxVotes) {\\n\\t\\t\\t\\tmaxVotes = election.candidates[i].candidateVoteCount;\\n\\t\\t\\t\\twinner = election.candidates[i].candidateName;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn winner;\\n\\t}\\n\\n\\tfunction isVoterChecked(\\n\\t\\tstring memory _userElectionID\\n\\t) external view returns (bool) {\\n\\t\\tbytes32 userElectionID = bytes32(abi.encodePacked(_userElectionID));\\n\\t\\tbytes32 electionName = electionInfo[userElectionID].electionName;\\n\\t\\tbytes32 electionIdBytes = keccak256(\\n\\t\\t\\tabi.encodePacked(_userElectionID, \\\"-\\\", electionName)\\n\\t\\t);\\n\\t\\treturn hasVoted[electionIdBytes][msg.sender];\\n\\t}\\n\\n\\tfunction getOrgIDHash(\\n\\t\\tstring memory _orgID\\n\\t) external pure returns (bytes32) {\\n\\t\\tbytes32 orgIDHash = keccak256(abi.encodePacked(_orgID));\\n\\n\\t\\treturn (orgIDHash);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2c993321ce92b3674ef470dc3370463779de5406ad49aa7d607888f2bd9aa8d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234608757602081615b918038038091601c8285608c565b8339810103126087575160405160208101906341546f6d60e01b8252600481526045602482608c565b519020600255600180546001600160a81b0319163360081b610100600160a81b03161781179055608052604051615acc90816100c58239608051816118350152f35b600080fd5b601f909101601f19168101906001600160401b0382119082101760ae57604052565b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd14613ad857508063145ef6e914611deb578063158058f6146136fc578063162442e2146135945780632c2032c014612d685780633d70afff14612d2857806342b7fa1c14612d055780635398690b14612c295780635d8d1585146128ec57806363a846f8146127f857806365c6c439146121945780637149d8ba1461201f5780637217fcfd146120015780638009128614611f5857806381929bac14611e095780638783cc8a14611deb578063a3ec138d14611cdf578063a43064cc14611c66578063a9c63aa014611c48578063aadc3b7214611bf0578063b205436514611b21578063b684f78d14611411578063b6c4f52914610de4578063bf71053a14610875578063cd74fd7f146107d0578063e0428cf3146105f0578063f544bed8146101c25763f6246dcb1461015357600080fd5b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576101856020913690600401613b56565b6040516101b28382816101a18183019687815193849201613bd4565b81010301601f198101835282613b1a565b519020604051908152f35b600080fd5b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576101f2903690600401613b56565b61029c610296600033815260056020526005604082200160405161022c8161021e602082018095613d89565b03601f198101835282613b1a565b519020906040519160208301865193610250602082818b01976101a181878b613bd4565b5190201480156105a4575b156104ed575061026b6001613e1a565b61027784511515613e52565b610291602060405180936101a18851809285850190613bd4565b613df7565b91614a2f565b81600052600c6020526040600020805460ff811660058110156104d75761049257600160ff8260181c16151514610441575b5042600501908160051161042b576007916003820155600160ff19825416178155016102fa81546142b4565b90556103826040519260028351946020818187019761031a81838b613bd4565b810160048152030190200161032f81546142b4565b90556001604051602081865161034681838b613bd4565b810160048152030190200161035b8154614a22565b90556007604051602081865161037281838b613bd4565b81016004815203019020016154a0565b906007604051602081845161039881838a613bd4565b8101600481520301902001548210156103f1576103c860206103d894600993604051938492839251928391613bd4565b81016004815203019020016148e6565b81549060031b9060ff6001831b921b1916179055600080f35b60405162461bcd60e51b8152602060048201526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60ff60088301549160081c160361045857836102ce565b60405162461bcd60e51b815260206004820152601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b338152600560205261051561021e610291600560408520016040519283916020830190613d89565b6105306040516102916020828a516101a1818484018b613bd4565b14801590610559575b610547575b61026b90613e1a565b5061055184614a2f565b50600161053e565b50338152600560205261058261021e610291600660408520016040519283916020830190613d89565b61059d6040516102916020828a516101a1818484018b613bd4565b1415610539565b503381526005602052600660408220016040516105c98161021e602082018095613d89565b51902060405160208101906105e76020828a516101a181878b613bd4565b5190201461025b565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd5761062361063f913690600401613b56565b6102916020604051836101a18295518092858086019101613bd4565b80600052600c602052604060002060018101549060028101549260405193602085015260208452610671604085613b1a565b600782015490600883019081549360ff815460081c169361069186614148565b61069a876141b5565b9160066106a689614148565b9401546000958652600c6020526040862054909860ff601883901c8116989216969091905b8281106107575750506040519a8b9a8b5260208b0161016090526101608b016106f391613bf7565b9160408b015260608a015288810360808a015261070f91613b9d565b87810360a089015261072091613c1c565b86810360c088015261073191613c75565b9360e0860152610100850161074591613ca9565b15156101208401526101408301520390f35b8060ff61076660019385613f95565b505416610773828861421c565b52600261079b6107838386613f95565b506107946040518094819301613cf0565b0382613b1a565b6107a5828961421c565b526107b0818861421c565b50816107bc8285613f95565b5001546107c9828a61421c565b52016106cb565b346101bd5760403660031901126101bd576024356001600160401b0381116101bd576020610805610827923690600401613b56565b600435600052600b825260406000208260405194838680955193849201613bd4565b82019081520301902060ff81541661087160026108536001850154946107946040518094819301613cf0565b60405193849384526020840152606060408401526060830190613bf7565b0390f35b60803660031901126101bd576004356001600160401b0381116101bd576108a0903690600401613b56565b6024356001600160401b0381116101bd576108bf903690600401613b56565b90604435916108d6600160ff81541615151461487a565b3360005260066020526040600020604051916020830192606435845260208152610901604082613b1a565b5192516001600160801b03198116939060108210610dc4575b50506040519161093d825193610291602082818701976101a1818484018b613bd4565b906113886004604051602081875161095681838c613bd4565b81018481520301902001541015610d7f57600186511115610d4157601886511015610cf25733600052600660205260036040600020016040516109a18161021e602082018095613d89565b51902060405160208101906109bf60208288516101a181878d613bd4565b519020141580610ca3575b80610c8a575b15610c45576001600260405160208187516109ec81838c613bd4565b8101600481520301902001541015610c0857610a2760066040516020818751610a1681838c613bd4565b810160048152030190200154613cb6565b15610bc357600581600389930185610a3f8254613cb6565b610b7857610a4c9161400f565b6001810180546001600160801b031916608089901c1790555b610a6f33826149fd565b610a7c886002830161400f565b805460ff19166001178155015560009081526008602052604090208054600160401b811015610b6257610ab491600182018155613e8a565b939093610b4c57600495610ae5602087610ad2610b3499839961400f565b8160405193828580945193849201613bd4565b600990820190815203019020556001600160801b0319166000908152600f845260409020805460ff19166001179055600354610b20906142b4565b600355604051938492839251928391613bd4565b81018481520301902001610b4881546142b4565b9055005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50506004810185610b898254613cb6565b15610b96575b5050610a65565b610b9f9161400f565b6001810180546001600160801b03166001600160801b031989161790558985610b8f565b60405162461bcd60e51b815260206004820152601b60248201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152606490fd5b5033600052601060205260ff60406000205416156109d0565b503360005260066020526004604060002001604051610cca8161021e602082018095613d89565b5190206040516020810190610ce860208288516101a181878d613bd4565b51902014156109ca565b60405162461bcd60e51b815260206004820152602160248201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152606490fd5b6001600160801b031960109290920360031b82901b16169250858061091a565b346101bd5760a03660031901126101bd576004356001600160401b0381116101bd57610e14903690600401613b56565b6024356001600160401b0381116101bd57610e33903690600401613b56565b6044356001600160401b0381116101bd57610e52903690600401613b56565b916064356084359360038510156101bd5733600052600560205260026040600020015443106113e157610e8d600160ff81541615151461487a565b336000526005602052604060002093617d0060005410156113b157604051600482516020840192610ebf828286613bd4565b0152610ef76040518351610ed4818386613bd4565b600490820190815281900360200190205460081c6001600160a01b031615613e52565b610f00826153e7565b1561138057610f1185511515613e52565b60208551101561134f576001835111156101bd57815160038114908115611344575b8115611339575b50156112f4573360005260056020526005604060002001604051610f668161021e602082018095613d89565b5190206040516020810190610f8460208287516101a181878a613bd4565b5190201415806112a5575b1561126a576001600461100b96610fc96040516020818851610fb281838b613bd4565b81018681520301902091610623876006850161400f565b600582015560009960ff80198354169116178155610fe733826149fd565b8960028201550155611034600660206040518094828201998a918851928391613bd4565b8101602d60f81b838201526420b236b4b760d91b60218201520301601919810184520182613b1a565b5193516001600160b01b031981169490600a8210611249575b505061110e916020913388526005835261106d600560408a200154613cb6565b6111d5576110889033895260058452600560408a200161400f565b338752600582526040872080546bffffffffffffffffffff0000191660a087901c6bffffffffffffffffffff0000161790555b6001860180546001600160a01b03191633179055604051815183830192916110f29161029190869083906101a1818484018a613bd4565b6003880155846004880155604051938492839251928391613bd4565b810160098152030190205560ff600181198454161780845560081c1660ff81146111c157825461ff00191660019190910160081b61ff0016178255338352601060205260408320600160ff1982541617905560018060b01b0319168252600f60205260408220600160ff198254161790554360320190816032116111ad576002015561119a81546142b4565b81556111a76003546142b4565b60035580f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526011600452602484fd5b338852600583526111ec600660408a200154613cb6565b156111f8575b506110bb565b61120f9033895260058452600660408a200161400f565b3387526005825260408720805469ffffffffffffffffffff60601b1916605087901c69ffffffffffffffffffff60601b16179055876111f2565b6001600160b01b0319600a9290920360031b82901b1616935081602061104d565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600560205260066040600020016040516112cc8161021e602082018095613d89565b51902060405160208101906112ea60208287516101a181878a613bd4565b5190201415610f8f565b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b600591501488610f3a565b600481149150610f33565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101bd5760803660031901126101bd576004356001600160401b0381116101bd57611441903690600401613b56565b60243560ff81168082036101bd576044356001600160401b0381116101bd5761146e903690600401613b56565b90606435938415158095036101bd5761148f600160ff81541615151461487a565b61154f61149b82614a2f565b33600052600560205260056040600020016040516114c18161021e602082018095613d89565b51902060405190602082018351926114e4602082818801966101a181878a613bd4565b51902014918215611ad1575b33600052600660205260036040600020016040516115168161021e602082018095613d89565b519020604051602081019061153460208286516101a181878b613bd4565b51902014918215611a7d575b50508115611a75575b50613e1a565b61156c60405161029160208285516101a181848401858a01613bd4565b600052600c60205260406000209260028401546040516115958161021e60208201948786614906565b519020956115a561062384614a2f565b906115af836152a4565b926001600092148015611a4a575b1561170f575050505051156116ca5760088201908154111561168e5760ff82541660058110156104d7576006936001926115fb8461162e9414614970565b86600052600a6020526040600020848060a01b03331660005260205261162960ff604060002054161561492e565b613f95565b500161163a81546142b4565b90550161164781546142b4565b905580600052600a602052604060002060018060a01b0333166000526020526040600020600160ff19825416179055600052600760205261168c3360406000206149bc565b005b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b929793509493509450805115611a0c57818452600a602090815260408086203387529091528420546117449060ff161561492e565b60ff83541660058110156119f857600161175e9114614970565b61176781614bde565b156119a257600883959495019560ff875416908695879060208501915b816000526008602052604060002054811015611983578160005260086020526117b1816040600020613e8a565b506040516117c78161021e602082018095613d89565b51902060405160208101906117e56020828b516101a181878c613bd4565b519020146117f557600101611784565b5050611860919293949596975061185a6118286020603c936118176001613eb8565b604051809381928b51928391613bd4565b81016009815203019020547f000000000000000000000000000000000000000000000000000000000000000090615528565b12613f03565b6020810160005b885481101561197357600261021e611896611882848d613f95565b506040519283916020830195869101613d89565b51902060405160208101906118b460208288516101a181878b613bd4565b519020146118c457600101611867565b905060019293949596506118d9915087613f95565b50019485546001810180911161042b576006965560015b15611947575b50505080600052600a602052604060002060018060a01b0333166000526020526040600020600160ff19825416179055600052600760205261193c3360406000206149bc565b01610b4881546142b4565b61196b926040519261195884613aff565b8352600160208401526040830152614104565b8380806118f6565b50505090919293946006956118f0565b505061185a6118286020603c93611817611860969798999a9b9c613eb8565b60405162461bcd60e51b815260206004820152602860248201527f506c6561736520656e74657220616c7068616265746963616c2043616e646964604482015267617465206e616d6560c01b6064820152608490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152601660248201527553696c61686b616e206d6173756b6b616e206e616d6160501b6044820152606490fd5b5060ff8754166005811015611a61576002146115bd565b634e487b7160e01b83526021600452602483fd5b905087611549565b9091503360005260066020526004604060002001604051611aa68161021e602082018095613d89565b51902091611ac6602060405180936101a183830196879251928391613bd4565b519020148880611540565b91503360005260056020526006604060002001604051611af98161021e602082018095613d89565b5190206040516020810190611b1760208287516101a181878a613bd4565b51902014916114f0565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576020610ad2611b56923690600401613b56565b81016004815203019020805460ff8116600660018401549360028101546003820154600483015491611b9e600585015494611b976040518098819301613cf0565b0386613b1a565b6040519760038710156104d757889761087197895260018060a01b039060081c16602089015260408801526060870152608086015260a085015260c084015261010060e0840152610100830190613bf7565b346101bd5760403660031901126101bd576024356001600160a01b03811681036101bd57600435600052600a60205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bd5760003660031901126101bd576020600354604051908152f35b346101bd5760003660031901126101bd57600154600881901c6001600160a01b03163303611cae5760ff8116611ca557506001805460ff191681179055005b60ff1916600155005b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b346101bd5760203660031901126101bd576001600160a01b03611d00613d73565b16600052600660205260406000208054600182015491611de160405191611d3583611d2e8160028501613cf0565b0384613b1a565b611dd3604051611d4c816107948160038701613cf0565b611dc5600560405194611d6d86611d668160048501613cf0565b0387613b1a565b01546040805160ff8a161515815260089990991c6001600160a01b031660208a015260808a811b6001600160801b0319908116928b019290925299166060890152610100988801899052969788979690880190613bf7565b9086820360a0880152613bf7565b9084820360c0860152613bf7565b9060e08301520390f35b346101bd5760003660031901126101bd576020600254604051908152f35b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57611e526020611e406040933690600401613b56565b81845193828580945193849201613bd4565b8101600d815203019020610871815491611f496009611f3a6008600185015460028601546003870154600488015460058901549160068a01549360078b015495611ead8f611ea68e9151809b819301613cf0565b0389613b1a565b611ec88f611ec18e9151809d819301613cf0565b038b613b1a565b611ee58f611ede600a91519e8f92839101613cf0565b038d613b1a565b8e519e8f9e8f9060ff81161515825260018060a01b039060081c166020820152015260608d015260808c015260a08b015260c08a015260e0890152610100880152610180610120880152610180870190613bf7565b90858203610140870152613bf7565b90838203610160850152613bf7565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57611f88903690600401613b56565b611fa560405161029160208285516101a181848401858a01613bd4565b600052600c60205261021e611fcd600260406000200154604051928391602083019586614906565b519020600052600a602052604060002060018060a01b033316600052602052602060ff604060002054166040519015158152f35b346101bd5760003660031901126101bd576020600054604051908152f35b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57610623612052913690600401613b56565b600052600c602052600860406000200180549081156121415761207482614131565b916120826040519384613b1a565b80835260208301809260005260206000206000915b83831061212357848660405191829160208301906020845251809152604083019060408160051b85010192916000905b8282106120d657505050500390f35b919360019193955060206121138192603f198a8203018652606060408a5160ff815116845285810151868501520151918160408201520190613bf7565b96019201920185949391926120c7565b600360206001926121338561427b565b815201920192019190612097565b60405162461bcd60e51b815260206004820152602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b346101bd5760a03660031901126101bd576004356001600160401b0381116101bd576121c4903690600401613b56565b6024356001600160401b0381116101bd576121e3903690600401613b56565b6044356001600160401b0381116101bd57612202903690600401613b56565b60643560ff8116908181036101bd57608435908115158092036101bd5760015460ff1615156001146122339061487a565b6000943386526005602052604086206005016040518060208101928361225891613d89565b03601f198101825261226a9082613b1a565b519020604051885160208a810199939290810191819061228b81858e613bd4565b81010380825261229e9060200182613b1a565b5190201480156127aa575b156126eb57506122b96001613e1a565b60405187516122d5916006916020908290610a1681838e613bd4565b156101bd576001815111156126ba5760058151101561267a57845160018111156101bd5760191115612639576040518751600a91600291602090829061231c81838e613bd4565b81016004815203019020015410156125fb57612350610291600189602061237f958b60405196879451809285870190613bd4565b8301602d60f81b8382015261236e8251809385602185019101613bd4565b01010301601f198101835282613b1a565b9081600052600e60205260ff604060002054166125c15781600052600c6020526040600020926123b2886005860161400f565b826001850155604051946123da875196610291602082818c019a6101a1818d85850190613bd4565b600286015560ff19855416855583600052600e6020526040600020600160ff1982541617905587896001841460001461259257505060011015612555576124db9561249f6101a194600761248f60208c8e8b839961244f6102919c6124d59f9061ff0082549160081b169061ff001916179055565b63ff00000082549160181b169063ff000000191617905585600052600e83526040600020600160ff19825416179055604051938492839251928391613bd4565b81016004815203019020016148b1565b604051895160089190849082906124b781838f613bd4565b81016004815203019020019560405194859251809285850190613bd4565b906148b1565b600960405160208185516124f0818388613bd4565b810160048152030190200190815490600160401b821015610b62576001936125228361254095876020960181556148e6565b60ff82549160031b1b19169055604051938492839251928391613bd4565b8101600481520301902001610b4881546142b4565b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b61029194506124db98925094600761248f602061249f946101a1996124d59b839961ff0019825416825561244f565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b338152600560205261271361021e610291600560408520016040519283916020830190613d89565b6127326101a161029160208c8c60405194859251809285850190613bd4565b1480159061275b575b612749575b6122b990613e1a565b5061275387614a2f565b506001612740565b50338152600560205261278461021e610291600660408520016040519283916020830190613d89565b6127a36101a161029160208c8c60405194859251809285850190613bd4565b141561273b565b503381526005602052600660408220016040516127cf8161021e602082018095613d89565b519020876040516127ef6020828d6101a183830196879251928391613bd4565b519020146122a9565b346101bd5760203660031901126101bd576001600160a01b03612819613d73565b1660005260056020526040600020805461087160066128dd60018060a01b0360018601541694600281015460038201546004830154916128776040519461286786611d668160058501613cf0565b611d666040518099819301613cf0565b604051988860ff8b9a1615158a5260ff8160081c1660208b015260018060b01b03198160a01b1660408b015260018060b01b03199060501b1660608a0152608089015260a088015260c087015260e0860152610140610100860152610140850190613bf7565b90838203610120850152613bf7565b346101bd5760003660031901126101bd5733600052600560205260ff6040600020541633600052600660205260ff604060002054169061292a61417a565b9061293361417a565b60209282856040516129458782613b1a565b6000815291612b34575b6129b7575b831595866129ad575b509061299161299f92610871959660405198899815158952159088015233604088015260c0606088015260c0870190613bf7565b908582036080870152613c1c565b9083820360a0850152613c1c565b935061299161295d565b33600052600685526040600020908415600014612a9d5750612a986002916040516129e9816107948160038601613cf0565b6129f2856141ff565b526129fc846141ff565b50604051612a11816107948160048601613cf0565b612a1a8561420c565b52612a248461420c565b506001810154604051608082901b6001600160801b0319168982015260108152612a4f603082613b1a565b612a58876141ff565b52612a62866141ff565b506040516001600160801b03199091168882015260108152612a85603082613b1a565b612a8e8661420c565b526107838561420c565b612954565b90612aa78361420c565b515115612b07575b612ab88461420c565b515115612ac6575b50612954565b6001015460801b6040519060018060801b0319168682015260108152612aed603082613b1a565b612af68461420c565b52612b008361420c565b5086612ac0565b604051612b1b816107948160038601613cf0565b612b248461420c565b52612b2e8361420c565b50612aaf565b505033600052600584528460036040600020604051612b5a816107948160058601613cf0565b612b63856141ff565b52612b6d846141ff565b50604051612b82816107948160068601613cf0565b612b8b8561420c565b52612b958461420c565b50805460405160a082901b6001600160b01b03191689820152600a8152612bbd602a82613b1a565b612bc6876141ff565b52612bd0866141ff565b5060405160509190911b6001600160b01b03191688820152600a8152612bf7602a82613b1a565b612c008661420c565b52612c0a8561420c565b5001546040519086820152858152612c23604082613b1a565b9061294f565b346101bd5760203660031901126101bd57600435600052600c60205260ff60406000208054906001810154600282015491612cec6003820154600483015460405191612c7c83611d2e8160058901613cf0565b600685015496896009600788015497015416966040519a8a612ca18d83819e16613ca9565b818160081c1660208d0152818160101c16151560408d015260181c16151560608b015260808a015260a089015260c088015260e0870152610180610100870152610180860190613bf7565b9261012085015261014084015215156101608301520390f35b346101bd5760003660031901126101bd57602060ff600154166040519015158152f35b346101bd5760603660031901126101bd576004356001600160401b0381116101bd57612d5b61168c913690600401613b56565b60443590602435906142c3565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576020610ad2612d9d923690600401613b56565b8101600481520301902060098101612dc36008612dbc60078501614230565b9301614230565b604051908180926020855491828152019081956000526020600020906000915b81601f84011061330b5792612f1092612f3195926020979554918181106132f1575b8181106132d4575b8181106132b7575b81811061329a575b81811061327e575b818110613261575b818110613244575b818110613227575b81811061320a575b8181106131ed575b8181106131d0575b8181106131b3575b818110613196575b818110613179575b81811061315c575b81811061313f575b818110613122575b818110613105575b8181106130e8575b8181106130cb575b8181106130ae575b818110613091575b818110613074575b818110613057575b81811061303a575b81811061301d575b818110613000575b818110612fe3575b818110612fc6575b818110612fa9575b818110612f8c575b10612f76575b5095612f249897969594939291950385613b1a565b604051968796606088526060880190613c75565b9086820384880152613c75565b918483036040860152519182815201919060005b818110612f53575050500390f35b9193509160208082612f686001948851613ca9565b019401910191849392612f45565b90612f8581889360f81c613ca9565b0189612efb565b928881612fa160019360ff8760f01c16613ca9565b019301612ef5565b928881612fbe60019360ff8760e81c16613ca9565b019301612eed565b928881612fdb60019360ff8760e01c16613ca9565b019301612ee5565b928881612ff860019360ff8760d81c16613ca9565b019301612edd565b92888161301560019360ff8760d01c16613ca9565b019301612ed5565b92888161303260019360ff8760c81c16613ca9565b019301612ecd565b92888161304f60019360ff8760c01c16613ca9565b019301612ec5565b92888161306c60019360ff8760b81c16613ca9565b019301612ebd565b92888161308960019360ff8760b01c16613ca9565b019301612eb5565b9288816130a660019360ff8760a81c16613ca9565b019301612ead565b9288816130c360019360ff8760a01c16613ca9565b019301612ea5565b9288816130e060019360ff8760981c16613ca9565b019301612e9d565b9288816130fd60019360ff8760901c16613ca9565b019301612e95565b92888161311a60019360ff8760881c16613ca9565b019301612e8d565b92888161313760019360ff8760801c16613ca9565b019301612e85565b92888161315460019360ff8760781c16613ca9565b019301612e7d565b92888161317160019360ff8760701c16613ca9565b019301612e75565b92888161318e60019360ff8760681c16613ca9565b019301612e6d565b9288816131ab60019360ff8760601c16613ca9565b019301612e65565b9288816131c860019360ff8760581c16613ca9565b019301612e5d565b9288816131e560019360ff8760501c16613ca9565b019301612e55565b92888161320260019360ff8760481c16613ca9565b019301612e4d565b92888161321f60019360ff8760401c16613ca9565b019301612e45565b92888161323c60019360ff8760381c16613ca9565b019301612e3d565b92888161325960019360ff8760301c16613ca9565b019301612e35565b92888161327660019360ff8760281c16613ca9565b019301612e2d565b92888161329260019360ff87851c16613ca9565b019301612e25565b9288816132af60019360ff8760181c16613ca9565b019301612e1d565b9288816132cc60019360ff8760101c16613ca9565b019301612e15565b9288816132e960019360ff8760081c16613ca9565b019301612e0d565b92888161330360019360ff8716613ca9565b019301612e05565b93509091600161040060209261358687546133298360ff8316613ca9565b61333b86840160ff8360081c16613ca9565b61334e6040840160ff8360101c16613ca9565b6133616060840160ff8360181c16613ca9565b6133736080840160ff83891c16613ca9565b61338660a0840160ff8360281c16613ca9565b61339960c0840160ff8360301c16613ca9565b6133ac60e0840160ff8360381c16613ca9565b6133c0610100840160ff8360401c16613ca9565b6133d4610120840160ff8360481c16613ca9565b6133e8610140840160ff8360501c16613ca9565b6133fc610160840160ff8360581c16613ca9565b613410610180840160ff8360601c16613ca9565b6134246101a0840160ff8360681c16613ca9565b6134386101c0840160ff8360701c16613ca9565b61344c6101e0840160ff8360781c16613ca9565b613460610200840160ff8360801c16613ca9565b613474610220840160ff8360881c16613ca9565b613488610240840160ff8360901c16613ca9565b61349c610260840160ff8360981c16613ca9565b6134b0610280840160ff8360a01c16613ca9565b6134c46102a0840160ff8360a81c16613ca9565b6134d86102c0840160ff8360b01c16613ca9565b6134ec6102e0840160ff8360b81c16613ca9565b613500610300840160ff8360c01c16613ca9565b613514610320840160ff8360c81c16613ca9565b613528610340840160ff8360d01c16613ca9565b61353c610360840160ff8360d81c16613ca9565b613550610380840160ff8360e01c16613ca9565b6135646103a0840160ff8360e81c16613ca9565b6135786103c0840160ff8360f01c16613ca9565b6103e083019060f81c613ca9565b019401920190859392612de3565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576135c4903690600401613b56565b60405190600b815192602081818501956135df818389613bd4565b8101600d8152030190200154906135f582614148565b916135ff816141b5565b9061360981614148565b9260005b82811061365057613634866108718761364288604051958695606087526060870190613b9d565b908582036020870152613c1c565b908382036040850152613c75565b8060026136b461078383600b61368960208e8e6136a28660ff6136998f9e60019f61368989898d93604051938492839251928391613bd4565b8101600d81520301902001613f95565b5054169261421c565b52604051809381928d51928391613bd4565b6136be828761421c565b526136c9818661421c565b50816136e882600b61368960208d604051809381928c51928391613bd4565b5001546136f5828861421c565b520161360d565b346101bd5760403660031901126101bd576004356001600160401b0381116101bd5761372c903690600401613b56565b6024356001600160401b0381116101bd5761374b903690600401613b56565b6137b360003381526005602052600560408220016040516137748161021e602082018095613d89565b519020906040519160208301865193613798602082818b01976101a181878b613bd4565b519020148015613a8c575b156139d557506102776001613e1a565b9081600052600c6020526040600020916137cf61062385614a2f565b9351156101bd57600052600c602052600882019060ff8254935460081c1683101561399657805180156101bd576018106139555761380c81614bde565b156138fb576000936020820190855b8160005260086020526040600020548110156138df57816000526008602052613848816040600020613e8a565b5060405161385e8161021e602082018095613d89565b519020604051602081019061387c60208289516101a181878c613bd4565b5190201461388c5760010161381b565b505061168c9450603c61185a61182860206138bc946138ab6001613eb8565b604051809381928951928391613bd4565b60ff604051936138cb85613aff565b168352600060208401526040830152614104565b5050603c61185a61182860206138bc946138ab61168c9a613eb8565b60405162461bcd60e51b815260206004820152602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526020600482015260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b33815260056020526139fd61021e610291600560408520016040519283916020830190613d89565b613a186040516102916020828a516101a1818484018b613bd4565b14801590613a41575b613a2f575b61027790613e1a565b50613a3984614a2f565b506001613a26565b503381526005602052613a6a61021e610291600660408520016040519283916020830190613d89565b613a856040516102916020828a516101a1818484018b613bd4565b1415613a21565b50338152600560205260066040822001604051613ab18161021e602082018095613d89565b5190206040516020810190613acf6020828a516101a181878b613bd4565b519020146137a3565b346101bd5760003660031901126101bd5760015460081c6001600160a01b03168152602090f35b606081019081106001600160401b03821117610b6257604052565b90601f801991011681019081106001600160401b03821117610b6257604052565b6001600160401b038111610b6257601f01601f191660200190565b81601f820112156101bd57803590613b6d82613b3b565b92613b7b6040519485613b1a565b828452602083830101116101bd57816000926020809301838601378301015290565b906020808351928381520192019060005b818110613bbb5750505090565b825160ff16845260209384019390920191600101613bae565b60005b838110613be75750506000910152565b8181015183820152602001613bd7565b90602091613c1081518092818552858086019101613bd4565b601f01601f1916010190565b9080602083519182815201916020808360051b8301019401926000915b838310613c4857505050505090565b9091929394602080613c66600193601f198682030187528951613bf7565b97019301930191939290613c39565b906020808351928381520192019060005b818110613c935750505090565b8251845260209384019390920191600101613c86565b9060058210156104d75752565b90600182811c92168015613ce6575b6020831014613cd057565b634e487b7160e01b600052602260045260246000fd5b91607f1691613cc5565b60009291815491613d0083613cb6565b8083529260018116908115613d565750600114613d1c57505050565b60009081526020812093945091925b838310613d3c575060209250010190565b600181602092949394548385870101520191019190613d2b565b915050602093945060ff929192191683830152151560051b010190565b600435906001600160a01b03821682036101bd57565b60009291815491613d9983613cb6565b9260018116908115613de45750600114613db257505050565b909192935060005260206000206000905b838210613dd05750500190565b600181602092548486015201910190613dc3565b60ff191683525050811515909102019150565b602081519101519060208110613e0b575090565b6000199060200360031b1b1690565b15613e2157565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b15613e5957565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015613ea25760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b15613ebf57565b606460405162461bcd60e51b815260206004820152602060248201527f546869732043616e646964617465206973206e6f7420726567697374657265646044820152fd5b15613f0a57565b60405162461bcd60e51b815260206004820152602d60248201527f43616e646964617465206d75737420626520756e64657220363020796561727360448201526c1037b6321030b732103137b93760991b6064820152608490fd5b805415613ea257600052602060002090600090565b805460011015613ea257600052600360206000200190600090565b8054821015613ea2576000526003602060002091020190600090565b818110613fbc575050565b60008155600101613fb1565b9190601f8111613fd757505050565b614003926000526020600020906020601f840160051c83019310614005575b601f0160051c0190613fb1565b565b9091508190613ff6565b91909182516001600160401b038111610b6257614036816140308454613cb6565b84613fc8565b6020601f821160011461407757819061406893949560009261406c575b50508160011b916000199060031b1c19161790565b9055565b015190503880614053565b601f1982169083600052806000209160005b8181106140c1575095836001959697106140a8575b505050811b019055565b015160001960f88460031b161c1916905538808061409e565b9192602060018192868b015181550194019201614089565b600260406140039360ff808251161660ff19855416178455602081015160018501550151910161400f565b8054600160401b811015610b625761412191600182018155613f95565b919091610b4c57614003916140d9565b6001600160401b038111610b625760051b60200190565b9061415282614131565b61415f6040519182613b1a565b8281528092614170601f1991614131565b0190602036910137565b6040516060919061418b8382613b1a565b6002815291601f19018260005b8281106141a457505050565b806060602080938501015201614198565b906141bf82614131565b6141cc6040519182613b1a565b82815280926141dd601f1991614131565b019060005b8281106141ee57505050565b8060606020809385010152016141e2565b805115613ea25760200190565b805160011015613ea25760400190565b8051821015613ea25760209160051b010190565b906040519182815491828252602082019060005260206000209260005b81811061426257505061400392500383613b1a565b845483526001948501948794506020909301920161424d565b9060026040805161428b81613aff565b6142b0819560ff815416835260018101546020840152611d2e84518096819301613cf0565b0152565b600019811461042b5760010190565b91906142ce83614a2f565b916040516142ef855191610291602082818a01956101a18184840189613bd4565b9485600052600c6020526002604060002001546020614356600160405193838501908152838552614321604086613b1a565b6040519384918183019661236e8861433d8c8c51928391613bd4565b850191602d60f81b858401525180936021840190613bd4565b5190209286600052600c6020526040600020805460ff811660058110156104d75760010361483c5760101c60ff16614803578251156147c8576008018054946002861061478b576143b860405161029160208288516101a1818484018d613bd4565b600052600c60205260066040600020015460011c6001018060011161042b5791956143e281614131565b966143f06040519889613b1a565b818852601f196143ff83614131565b0160005b81811061475757505060005b82811061471d575050600080978192829583925b8284106146c0575b5050505060001461465e575050505061453b9086600095949552600c60205261453260026144bc602060406000209661448361446b60088a019b8c613f95565b5061447c6040518097819301613cf0565b0385613b1a565b33600052600582526003604060002001549560405196838801528287526144ab604088613b1a565b604051938492839251928391613bd4565b8101600d81520301902095600160ff19885416178755600686015460048801556144e633886149fd565b6003860154600288015560048601546003880155600787015561450f6005860160088801614ce0565b88600587015560078501546001870155600285015460068701556009860161400f565b600a840161400f565b805462ff00ff191662010003179055815491600b919091019060005b838110614609575050505060206002926145f4926145b86145a261458e60405194600785519688818189019961037281838d613bd4565b6009604051878187516103c881838c613bd4565b81549060031b9060ff6003831b921b1916179055565b6003604051848184516145cc818389613bd4565b81016004815203019020016145e181546142b4565b9055604051938492839251928391613bd4565b81016004815203019020016140688154614a22565b8061465861461960019385613f95565b50600261464d60ff83541692868101546040519461463686613aff565b855260208501526107946040518094819301613cf0565b604082015285614104565b01614557565b929650935093506001919695501515146146b75760405162461bcd60e51b815260206004820152601e60248201527f4e6f2063616e6469646174657320706173736564207468726573686f6c6400006044820152606490fd5b61400394614ddb565b60206146d085839e97969e61421c565b510151828111156146ec5750505050505060013880808061442b565b89909c91929394959c11614706575b600101929190614423565b969450600161471581966142b4565b9790506146fb565b80614737614731600193859c98969c613f95565b5061427b565b614741828861421c565b5261474c818761421c565b50019791939761440f565b60209060409a96949a5161476a81613aff565b60008152600083820152606060408201528282890101520198929498614403565b60405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567682063616e6469646174657360581b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275456c656374696f6e206973206e6f742061637469766560501b6044820152606490fd5b1561488157565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054600160401b811015610b62576148ce91600182018155613e8a565b819291549060031b91821b91600019901b1916179055565b9190918054831015613ea257600052601f60206000208360051c01921690565b60209061491c6021949382815194859201613bd4565b0190602d60f81b825260018201520190565b1561493557565b60405162461bcd60e51b8152602060048201526013602482015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b1561497757565b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b8054600160401b811015610b62576149d991600182018155613e8a565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b801561042b576000190190565b906040908151614a3f8382613b1a565b600181526020810193602d60f81b855260019260005b8251811015614aa8576001600160f81b0319614a718285614bcd565b5116845115613ea25787516001600160f81b03191614614a94575b600101614a55565b93614aa06001916142b4565b949050614a8c565b50949192614ab5906141b5565b9260009260009660005b8451811015614b40576001600160f81b0319614adb8287614bcd565b5116845115613ea25783516001600160f81b03191614614afe575b600101614abf565b979488614b0b91866159b9565b614b15868861421c565b52614b20858761421c565b506001880180891161042b57614b38600191966142b4565b989050614af6565b5096929050614b599150614b6a939594958151916159b9565b614b63828661421c565b528361421c565b50815115614b805750614b7c906141ff565b5190565b5162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b908151811015613ea2570160200190565b60005b8151811015614cbc576030614bf68284614bcd565b5160f81c101580614ca4575b8015614c73575b8015614c42575b158015614c2b575b614c2457600101614be1565b5050600090565b506020614c388284614bcd565b5160f81c14614c18565b506061614c4f8284614bcd565b5160f81c10158015614c105750607a614c688284614bcd565b5160f81c1115614c10565b506041614c808284614bcd565b5160f81c10158015614c095750605a614c998284614bcd565b5160f81c1115614c09565b506039614cb18284614bcd565b5160f81c1115614c02565b5050600190565b602090614cd69260405193848093613d89565b9081520301902090565b919091828114614db257614cf48354613cb6565b6001600160401b038111610b6257614d10816140308454613cb6565b600093601f8211600114614d4d576140689293948291600092614d425750508160011b916000199060031b1c19161790565b015490503880614053565b845260208085208386529085209094601f198316815b818110614d9a57509583600195969710614d8157505050811b019055565b015460001960f88460031b161c1916905538808061409e565b9192600180602092868b015481550194019201614d63565b509050565b80546000825580614dc6575050565b61400391600052602060002090810190613fb1565b9093949294600052600c602052604060002091600281106000146150285750506008810193600080199186549160005b838110614fec57505050506000198114614fa757614e299085613f95565b509260ff84541692614e85600160028701960194855460405191614e4c83613aff565b82526020820152604051614e6481610794818b613cf0565b604082015283600052600b602052614e80604060002088614cc3565b6140d9565b614e97614e9187615553565b8761568b565b60005b8654811015614ebc578060006001614eb381948b613f95565b50015501614e9a565b5091939092945082600052600760205260406000209460005b8654811015614f265760019085600052600a602052604080600020614efa838b613e8a565b905460039190911b1c60a085901b85900316600090815260209190915220805460ff1916905501614ed5565b50614f9c9295507f26a0fec2a7fa4f34d00e7c5ee9d65fb464213452697b0a9f8e5143f9b289b4f99394856000526007602052614f666040600020614db7565b6000600682015560078101614f7b81546142b4565b905562ff000019815416905554604051928392604084526040840190613cf0565b9060208301520390a2565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f2063616e6469646174652061626f7665207468726573686f6c64000000006044820152606490fd5b6001614ff8828b613f95565b5001548381118061501f575b615012575b50600101614e0b565b9150935060018490615009565b50828111615004565b929490926002101561506957509061504f6008615054930161504981615553565b9061568b565b61587f565b60005260076020526140036040600020614db7565b60078201549193916002106150fe5791926008019160005b83548110156150ea5780826001615099819488613f95565b500154116150a8575b01615081565b6150e56150b58287613f95565b5085600052600b60205260026150df604060002082806150d5888d613f95565b5095019401614cc3565b01614ce0565b6150a2565b5050509061504f6140039261504981615553565b5091600290600592600060088301600161511782613f65565b500154600161512583613f7a565b500154101561525a575050615148600093925b61447c6040518097819301613cf0565b84600052600c6020526151f160406000209161516b61446b600885019687613f95565b33600052600560205261453261519c6020600360406000200154936040519482860152818552610ad2604086613b1a565b8101600d81520301902094600160ff19875416178655600685015460048701556151c633876149fd565b60038501546002870155600485015460038701556000600787015561450f6005860160088801614ce0565b805462ff00ff191662010003179055815491600b919091019060005b838110615244575050505060206002926145f4926145b86145a261458e60405194600785519688818189019961037281838d613bd4565b8061525461461960019385613f95565b0161520d565b60016152728161526984613f7a565b50015492613f65565b500154101561528b57506151486001925b939293615138565b60098301805460ff191660011790559161514890615283565b908151156153d057815115613ea257602082018051606160f81b6001600160f81b03199091161015806153ae575b615377575b5060015b825181101561537457604160f81b6001600160f81b03196152fc8386614bcd565b5116101580615352575b615313575b6001016152db565b602061531f8285614bcd565b5160f81c019060ff821161042b5760019160f81b6001600160f81b03191660001a61534a8286614bcd565b53905061530b565b50602d60f91b6001600160f81b031961536b8386614bcd565b51161115615306565b50565b825115613ea257805160f81c601f190160ff811161042b57835115613ea25760f81b6001600160f81b03191660001a9053386152d7565b50825115613ea2578051603d60f91b6001600160f81b031990911611156152d2565b90506040516153e0602082613b1a565b6000815290565b60005b8151811015614cbc5760306153ff8284614bcd565b5160f81c101580615488575b8015615457575b8015615426575b15614c24576001016153ea565b5060616154338284614bcd565b5160f81c101580156154195750607a61544c8284614bcd565b5160f81c1115615419565b5060416154648284614bcd565b5160f81c101580156154125750605a61547d8284614bcd565b5160f81c1115615412565b5060396154958284614bcd565b5160f81c111561540b565b9060005b82548110156154d257816154b88285613e8a565b90549060031b1c146154cc576001016154a4565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b8181039291600013801582851316918412161761042b57565b906155329161550f565b42811361554c576155486301e18558914261550f565b0590565b5060001990565b8054801561563d576000199160005b82811061560557506000805b8381106155d3575061557f90614148565b9260009160005b84811061559557505050505090565b8260016155a28385613f95565b500154146155b3575b600101615586565b926155cb81856155c56001948a61421c565b526142b4565b9390506155ab565b8460016155e08386613f95565b500154146155f1575b60010161556e565b906155fd6001916142b4565b9190506155e9565b8360016156128385613f95565b50015410615623575b600101615562565b92506001806156328584613f95565b50015493905061561b565b60405162461bcd60e51b81526020600482015260196024820152784e6f2063616e6469646174657320746f206576616c7561746560381b6044820152606490fd5b9190820391821161042b57565b81511561584057916000905b8251821015615717576001820180831161042b575b835181101561570b576001906156c2848661421c565b516156cd828761421c565b51116156da575b016156ac565b6156e4848661421c565b516156ef828761421c565b516156fa868861421c565b52615705828761421c565b526156d4565b50600190910190615697565b91905060005b815181101561583a57615730818361421c565b518454600019810190811161042b578082036157ea575b5050835480156157d45760001901906157608286613f95565b929092610b4c57600283600060019555600085820155016157818154613cb6565b9081615792575b505085550161571d565b81601f6000931186146157a95750555b3880615788565b818352602083206157c491601f0160051c8101908701613fb1565b80825281602081209155556157a2565b634e487b7160e01b600052603160045260246000fd5b6157f76157ff9187613f95565b509186613f95565b610b4c57808214615747576002808360ff806158339654161660ff1985541617845560018101546001850155019101614ce0565b3880615747565b50509050565b60405162461bcd60e51b81526020600482015260176024820152764e6f2063616e6469646174657320746f2072656d6f766560481b6044820152606490fd5b60405161589f825191610291602082818701956101a18184840189613bd4565b600052600c60205261236e6158eb6001604060002094602060028701546040518281019182528281526158d3604082613b1a565b60405196879461433d8587019a8b9251928391613bd4565b5190206008820180549060005b8281106159a057505050806000526007602052604060002080549060005b8281106159585750505060005260076020526159356040600020614db7565b600060068201556007810161594a81546142b4565b9055805462ff000019169055565b60019084600052600a6020526040806000206159748386613e8a565b905460039190911b1c60a085901b85900316600090815260209190915220805460ff1916905501615916565b80600060016159b0819486613f95565b500155016158f8565b92918082111580615a8b575b15615a4a576159d4828261567e565b916159de83613b3b565b926159ec6040519485613b1a565b8084526159fb601f1991613b3b565b01366020850137805b828110615a1357509193505050565b6001906001600160f81b0319615a298289614bcd565b5116615a43615a38858461567e565b9160001a9187614bcd565b5301615a04565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156159c556fea264697066735822122077c8e503f2477da61ef1bd50d8a8b3e06e921cc2d06f72931d5babfdd6b8e2e464736f6c634300081b0033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630c4f65bd14613ad857508063145ef6e914611deb578063158058f6146136fc578063162442e2146135945780632c2032c014612d685780633d70afff14612d2857806342b7fa1c14612d055780635398690b14612c295780635d8d1585146128ec57806363a846f8146127f857806365c6c439146121945780637149d8ba1461201f5780637217fcfd146120015780638009128614611f5857806381929bac14611e095780638783cc8a14611deb578063a3ec138d14611cdf578063a43064cc14611c66578063a9c63aa014611c48578063aadc3b7214611bf0578063b205436514611b21578063b684f78d14611411578063b6c4f52914610de4578063bf71053a14610875578063cd74fd7f146107d0578063e0428cf3146105f0578063f544bed8146101c25763f6246dcb1461015357600080fd5b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576101856020913690600401613b56565b6040516101b28382816101a18183019687815193849201613bd4565b81010301601f198101835282613b1a565b519020604051908152f35b600080fd5b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576101f2903690600401613b56565b61029c610296600033815260056020526005604082200160405161022c8161021e602082018095613d89565b03601f198101835282613b1a565b519020906040519160208301865193610250602082818b01976101a181878b613bd4565b5190201480156105a4575b156104ed575061026b6001613e1a565b61027784511515613e52565b610291602060405180936101a18851809285850190613bd4565b613df7565b91614a2f565b81600052600c6020526040600020805460ff811660058110156104d75761049257600160ff8260181c16151514610441575b5042600501908160051161042b576007916003820155600160ff19825416178155016102fa81546142b4565b90556103826040519260028351946020818187019761031a81838b613bd4565b810160048152030190200161032f81546142b4565b90556001604051602081865161034681838b613bd4565b810160048152030190200161035b8154614a22565b90556007604051602081865161037281838b613bd4565b81016004815203019020016154a0565b906007604051602081845161039881838a613bd4565b8101600481520301902001548210156103f1576103c860206103d894600993604051938492839251928391613bd4565b81016004815203019020016148e6565b81549060031b9060ff6001831b921b1916179055600080f35b60405162461bcd60e51b8152602060048201526012602482015271115b1958dd1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b60ff60088301549160081c160361045857836102ce565b60405162461bcd60e51b815260206004820152601260248201527110d85b991a59185d1948139bdd08199d5b1b60721b6044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f456c656374696f6e206973206e6f7420696e207072657061726174696f6e00006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b338152600560205261051561021e610291600560408520016040519283916020830190613d89565b6105306040516102916020828a516101a1818484018b613bd4565b14801590610559575b610547575b61026b90613e1a565b5061055184614a2f565b50600161053e565b50338152600560205261058261021e610291600660408520016040519283916020830190613d89565b61059d6040516102916020828a516101a1818484018b613bd4565b1415610539565b503381526005602052600660408220016040516105c98161021e602082018095613d89565b51902060405160208101906105e76020828a516101a181878b613bd4565b5190201461025b565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd5761062361063f913690600401613b56565b6102916020604051836101a18295518092858086019101613bd4565b80600052600c602052604060002060018101549060028101549260405193602085015260208452610671604085613b1a565b600782015490600883019081549360ff815460081c169361069186614148565b61069a876141b5565b9160066106a689614148565b9401546000958652600c6020526040862054909860ff601883901c8116989216969091905b8281106107575750506040519a8b9a8b5260208b0161016090526101608b016106f391613bf7565b9160408b015260608a015288810360808a015261070f91613b9d565b87810360a089015261072091613c1c565b86810360c088015261073191613c75565b9360e0860152610100850161074591613ca9565b15156101208401526101408301520390f35b8060ff61076660019385613f95565b505416610773828861421c565b52600261079b6107838386613f95565b506107946040518094819301613cf0565b0382613b1a565b6107a5828961421c565b526107b0818861421c565b50816107bc8285613f95565b5001546107c9828a61421c565b52016106cb565b346101bd5760403660031901126101bd576024356001600160401b0381116101bd576020610805610827923690600401613b56565b600435600052600b825260406000208260405194838680955193849201613bd4565b82019081520301902060ff81541661087160026108536001850154946107946040518094819301613cf0565b60405193849384526020840152606060408401526060830190613bf7565b0390f35b60803660031901126101bd576004356001600160401b0381116101bd576108a0903690600401613b56565b6024356001600160401b0381116101bd576108bf903690600401613b56565b90604435916108d6600160ff81541615151461487a565b3360005260066020526040600020604051916020830192606435845260208152610901604082613b1a565b5192516001600160801b03198116939060108210610dc4575b50506040519161093d825193610291602082818701976101a1818484018b613bd4565b906113886004604051602081875161095681838c613bd4565b81018481520301902001541015610d7f57600186511115610d4157601886511015610cf25733600052600660205260036040600020016040516109a18161021e602082018095613d89565b51902060405160208101906109bf60208288516101a181878d613bd4565b519020141580610ca3575b80610c8a575b15610c45576001600260405160208187516109ec81838c613bd4565b8101600481520301902001541015610c0857610a2760066040516020818751610a1681838c613bd4565b810160048152030190200154613cb6565b15610bc357600581600389930185610a3f8254613cb6565b610b7857610a4c9161400f565b6001810180546001600160801b031916608089901c1790555b610a6f33826149fd565b610a7c886002830161400f565b805460ff19166001178155015560009081526008602052604090208054600160401b811015610b6257610ab491600182018155613e8a565b939093610b4c57600495610ae5602087610ad2610b3499839961400f565b8160405193828580945193849201613bd4565b600990820190815203019020556001600160801b0319166000908152600f845260409020805460ff19166001179055600354610b20906142b4565b600355604051938492839251928391613bd4565b81018481520301902001610b4881546142b4565b9055005b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052604160045260246000fd5b50506004810185610b898254613cb6565b15610b96575b5050610a65565b610b9f9161400f565b6001810180546001600160801b03166001600160801b031989161790558985610b8f565b60405162461bcd60e51b815260206004820152601b60248201527f4f7267616e697a6174696f6e20646f6573206e6f7420657869737400000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274456c656374696f6e20696e2070726f67726573732160581b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f566f746572206973207265676973746572656420696e204f72670000000000006044820152606490fd5b5033600052601060205260ff60406000205416156109d0565b503360005260066020526004604060002001604051610cca8161021e602082018095613d89565b5190206040516020810190610ce860208288516101a181878d613bd4565b51902014156109ca565b60405162461bcd60e51b815260206004820152602160248201527f566f746572206e616d65206c696d6974206973203234206368617261637465726044820152607360f81b6064820152608490fd5b60405162461bcd60e51b8152602060048201526016602482015275506c656173652066696c6c20566f746572204e616d6560501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4d6178696d756d206d656d626572206c696d69742072656163686564000000006044820152606490fd5b6001600160801b031960109290920360031b82901b16169250858061091a565b346101bd5760a03660031901126101bd576004356001600160401b0381116101bd57610e14903690600401613b56565b6024356001600160401b0381116101bd57610e33903690600401613b56565b6044356001600160401b0381116101bd57610e52903690600401613b56565b916064356084359360038510156101bd5733600052600560205260026040600020015443106113e157610e8d600160ff81541615151461487a565b336000526005602052604060002093617d0060005410156113b157604051600482516020840192610ebf828286613bd4565b0152610ef76040518351610ed4818386613bd4565b600490820190815281900360200190205460081c6001600160a01b031615613e52565b610f00826153e7565b1561138057610f1185511515613e52565b60208551101561134f576001835111156101bd57815160038114908115611344575b8115611339575b50156112f4573360005260056020526005604060002001604051610f668161021e602082018095613d89565b5190206040516020810190610f8460208287516101a181878a613bd4565b5190201415806112a5575b1561126a576001600461100b96610fc96040516020818851610fb281838b613bd4565b81018681520301902091610623876006850161400f565b600582015560009960ff80198354169116178155610fe733826149fd565b8960028201550155611034600660206040518094828201998a918851928391613bd4565b8101602d60f81b838201526420b236b4b760d91b60218201520301601919810184520182613b1a565b5193516001600160b01b031981169490600a8210611249575b505061110e916020913388526005835261106d600560408a200154613cb6565b6111d5576110889033895260058452600560408a200161400f565b338752600582526040872080546bffffffffffffffffffff0000191660a087901c6bffffffffffffffffffff0000161790555b6001860180546001600160a01b03191633179055604051815183830192916110f29161029190869083906101a1818484018a613bd4565b6003880155846004880155604051938492839251928391613bd4565b810160098152030190205560ff600181198454161780845560081c1660ff81146111c157825461ff00191660019190910160081b61ff0016178255338352601060205260408320600160ff1982541617905560018060b01b0319168252600f60205260408220600160ff198254161790554360320190816032116111ad576002015561119a81546142b4565b81556111a76003546142b4565b60035580f35b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526011600452602484fd5b338852600583526111ec600660408a200154613cb6565b156111f8575b506110bb565b61120f9033895260058452600660408a200161400f565b3387526005825260408720805469ffffffffffffffffffff60601b1916605087901c69ffffffffffffffffffff60601b16179055876111f2565b6001600160b01b0319600a9290920360031b82901b1616935081602061104d565b60405162461bcd60e51b815260206004820152601360248201527210591b5a5b881a5cc81c9959da5cdd195c9959606a1b6044820152606490fd5b5033600052600560205260066040600020016040516112cc8161021e602082018095613d89565b51902060405160208101906112ea60208287516101a181878a613bd4565b5190201415610f8f565b60405162461bcd60e51b815260206004820152601e60248201527f4f72672049442073686f756c642033202d2035206368617261637465727300006044820152606490fd5b600591501488610f3a565b600481149150610f33565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366360b81b6044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d199b3160b91b6044820152606490fd5b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333560c01b6044820152606490fd5b60405162461bcd60e51b815260206004820152600860248201526732b93937b91d199960c11b6044820152606490fd5b346101bd5760803660031901126101bd576004356001600160401b0381116101bd57611441903690600401613b56565b60243560ff81168082036101bd576044356001600160401b0381116101bd5761146e903690600401613b56565b90606435938415158095036101bd5761148f600160ff81541615151461487a565b61154f61149b82614a2f565b33600052600560205260056040600020016040516114c18161021e602082018095613d89565b51902060405190602082018351926114e4602082818801966101a181878a613bd4565b51902014918215611ad1575b33600052600660205260036040600020016040516115168161021e602082018095613d89565b519020604051602081019061153460208286516101a181878b613bd4565b51902014918215611a7d575b50508115611a75575b50613e1a565b61156c60405161029160208285516101a181848401858a01613bd4565b600052600c60205260406000209260028401546040516115958161021e60208201948786614906565b519020956115a561062384614a2f565b906115af836152a4565b926001600092148015611a4a575b1561170f575050505051156116ca5760088201908154111561168e5760ff82541660058110156104d7576006936001926115fb8461162e9414614970565b86600052600a6020526040600020848060a01b03331660005260205261162960ff604060002054161561492e565b613f95565b500161163a81546142b4565b90550161164781546142b4565b905580600052600a602052604060002060018060a01b0333166000526020526040600020600160ff19825416179055600052600760205261168c3360406000206149bc565b005b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a590818d85b991a59185d1948125160621b6044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f456c656374696f6e2049442063616e277420626520656d7074790000000000006044820152606490fd5b929793509493509450805115611a0c57818452600a602090815260408086203387529091528420546117449060ff161561492e565b60ff83541660058110156119f857600161175e9114614970565b61176781614bde565b156119a257600883959495019560ff875416908695879060208501915b816000526008602052604060002054811015611983578160005260086020526117b1816040600020613e8a565b506040516117c78161021e602082018095613d89565b51902060405160208101906117e56020828b516101a181878c613bd4565b519020146117f557600101611784565b5050611860919293949596975061185a6118286020603c936118176001613eb8565b604051809381928b51928391613bd4565b81016009815203019020547f000000000000000000000000000000000000000000000000000000000000000090615528565b12613f03565b6020810160005b885481101561197357600261021e611896611882848d613f95565b506040519283916020830195869101613d89565b51902060405160208101906118b460208288516101a181878b613bd4565b519020146118c457600101611867565b905060019293949596506118d9915087613f95565b50019485546001810180911161042b576006965560015b15611947575b50505080600052600a602052604060002060018060a01b0333166000526020526040600020600160ff19825416179055600052600760205261193c3360406000206149bc565b01610b4881546142b4565b61196b926040519261195884613aff565b8352600160208401526040830152614104565b8380806118f6565b50505090919293946006956118f0565b505061185a6118286020603c93611817611860969798999a9b9c613eb8565b60405162461bcd60e51b815260206004820152602860248201527f506c6561736520656e74657220616c7068616265746963616c2043616e646964604482015267617465206e616d6560c01b6064820152608490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152601660248201527553696c61686b616e206d6173756b6b616e206e616d6160501b6044820152606490fd5b5060ff8754166005811015611a61576002146115bd565b634e487b7160e01b83526021600452602483fd5b905087611549565b9091503360005260066020526004604060002001604051611aa68161021e602082018095613d89565b51902091611ac6602060405180936101a183830196879251928391613bd4565b519020148880611540565b91503360005260056020526006604060002001604051611af98161021e602082018095613d89565b5190206040516020810190611b1760208287516101a181878a613bd4565b51902014916114f0565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576020610ad2611b56923690600401613b56565b81016004815203019020805460ff8116600660018401549360028101546003820154600483015491611b9e600585015494611b976040518098819301613cf0565b0386613b1a565b6040519760038710156104d757889761087197895260018060a01b039060081c16602089015260408801526060870152608086015260a085015260c084015261010060e0840152610100830190613bf7565b346101bd5760403660031901126101bd576024356001600160a01b03811681036101bd57600435600052600a60205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346101bd5760003660031901126101bd576020600354604051908152f35b346101bd5760003660031901126101bd57600154600881901c6001600160a01b03163303611cae5760ff8116611ca557506001805460ff191681179055005b60ff1916600155005b60405162461bcd60e51b815260206004820152600960248201526832b93937b91d1998b160b91b6044820152606490fd5b346101bd5760203660031901126101bd576001600160a01b03611d00613d73565b16600052600660205260406000208054600182015491611de160405191611d3583611d2e8160028501613cf0565b0384613b1a565b611dd3604051611d4c816107948160038701613cf0565b611dc5600560405194611d6d86611d668160048501613cf0565b0387613b1a565b01546040805160ff8a161515815260089990991c6001600160a01b031660208a015260808a811b6001600160801b0319908116928b019290925299166060890152610100988801899052969788979690880190613bf7565b9086820360a0880152613bf7565b9084820360c0860152613bf7565b9060e08301520390f35b346101bd5760003660031901126101bd576020600254604051908152f35b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57611e526020611e406040933690600401613b56565b81845193828580945193849201613bd4565b8101600d815203019020610871815491611f496009611f3a6008600185015460028601546003870154600488015460058901549160068a01549360078b015495611ead8f611ea68e9151809b819301613cf0565b0389613b1a565b611ec88f611ec18e9151809d819301613cf0565b038b613b1a565b611ee58f611ede600a91519e8f92839101613cf0565b038d613b1a565b8e519e8f9e8f9060ff81161515825260018060a01b039060081c166020820152015260608d015260808c015260a08b015260c08a015260e0890152610100880152610180610120880152610180870190613bf7565b90858203610140870152613bf7565b90838203610160850152613bf7565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57611f88903690600401613b56565b611fa560405161029160208285516101a181848401858a01613bd4565b600052600c60205261021e611fcd600260406000200154604051928391602083019586614906565b519020600052600a602052604060002060018060a01b033316600052602052602060ff604060002054166040519015158152f35b346101bd5760003660031901126101bd576020600054604051908152f35b346101bd5760203660031901126101bd576004356001600160401b0381116101bd57610623612052913690600401613b56565b600052600c602052600860406000200180549081156121415761207482614131565b916120826040519384613b1a565b80835260208301809260005260206000206000915b83831061212357848660405191829160208301906020845251809152604083019060408160051b85010192916000905b8282106120d657505050500390f35b919360019193955060206121138192603f198a8203018652606060408a5160ff815116845285810151868501520151918160408201520190613bf7565b96019201920185949391926120c7565b600360206001926121338561427b565b815201920192019190612097565b60405162461bcd60e51b815260206004820152602560248201527f4e6f2063616e6469646174657320666f756e6420696e207468697320656c656360448201526474696f6e2160d81b6064820152608490fd5b346101bd5760a03660031901126101bd576004356001600160401b0381116101bd576121c4903690600401613b56565b6024356001600160401b0381116101bd576121e3903690600401613b56565b6044356001600160401b0381116101bd57612202903690600401613b56565b60643560ff8116908181036101bd57608435908115158092036101bd5760015460ff1615156001146122339061487a565b6000943386526005602052604086206005016040518060208101928361225891613d89565b03601f198101825261226a9082613b1a565b519020604051885160208a810199939290810191819061228b81858e613bd4565b81010380825261229e9060200182613b1a565b5190201480156127aa575b156126eb57506122b96001613e1a565b60405187516122d5916006916020908290610a1681838e613bd4565b156101bd576001815111156126ba5760058151101561267a57845160018111156101bd5760191115612639576040518751600a91600291602090829061231c81838e613bd4565b81016004815203019020015410156125fb57612350610291600189602061237f958b60405196879451809285870190613bd4565b8301602d60f81b8382015261236e8251809385602185019101613bd4565b01010301601f198101835282613b1a565b9081600052600e60205260ff604060002054166125c15781600052600c6020526040600020926123b2886005860161400f565b826001850155604051946123da875196610291602082818c019a6101a1818d85850190613bd4565b600286015560ff19855416855583600052600e6020526040600020600160ff1982541617905587896001841460001461259257505060011015612555576124db9561249f6101a194600761248f60208c8e8b839961244f6102919c6124d59f9061ff0082549160081b169061ff001916179055565b63ff00000082549160181b169063ff000000191617905585600052600e83526040600020600160ff19825416179055604051938492839251928391613bd4565b81016004815203019020016148b1565b604051895160089190849082906124b781838f613bd4565b81016004815203019020019560405194859251809285850190613bd4565b906148b1565b600960405160208185516124f0818388613bd4565b810160048152030190200190815490600160401b821015610b62576001936125228361254095876020960181556148e6565b60ff82549160031b1b19169055604051938492839251928391613bd4565b8101600481520301902001610b4881546142b4565b60405162461bcd60e51b81526020600482015260156024820152744d696e696d756d20322063616e646964617465732160581b6044820152606490fd5b61029194506124db98925094600761248f602061249f946101a1996124d59b839961ff0019825416825561244f565b60405162461bcd60e51b8152602060048201526012602482015271456c656374696f6e2049442065786973747360701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b48195d995b9d1cc81c995858da195960521b6044820152606490fd5b60405162461bcd60e51b8152602060048201526019602482015278456c656374696f6e206e616d652073686f756c64203c20323560381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527749442073686f756c64203c2035206368617261637465727360401b6044820152606490fd5b60405162461bcd60e51b81526020600482015260096024820152686572726f722033366160b81b6044820152606490fd5b338152600560205261271361021e610291600560408520016040519283916020830190613d89565b6127326101a161029160208c8c60405194859251809285850190613bd4565b1480159061275b575b612749575b6122b990613e1a565b5061275387614a2f565b506001612740565b50338152600560205261278461021e610291600660408520016040519283916020830190613d89565b6127a36101a161029160208c8c60405194859251809285850190613bd4565b141561273b565b503381526005602052600660408220016040516127cf8161021e602082018095613d89565b519020876040516127ef6020828d6101a183830196879251928391613bd4565b519020146122a9565b346101bd5760203660031901126101bd576001600160a01b03612819613d73565b1660005260056020526040600020805461087160066128dd60018060a01b0360018601541694600281015460038201546004830154916128776040519461286786611d668160058501613cf0565b611d666040518099819301613cf0565b604051988860ff8b9a1615158a5260ff8160081c1660208b015260018060b01b03198160a01b1660408b015260018060b01b03199060501b1660608a0152608089015260a088015260c087015260e0860152610140610100860152610140850190613bf7565b90838203610120850152613bf7565b346101bd5760003660031901126101bd5733600052600560205260ff6040600020541633600052600660205260ff604060002054169061292a61417a565b9061293361417a565b60209282856040516129458782613b1a565b6000815291612b34575b6129b7575b831595866129ad575b509061299161299f92610871959660405198899815158952159088015233604088015260c0606088015260c0870190613bf7565b908582036080870152613c1c565b9083820360a0850152613c1c565b935061299161295d565b33600052600685526040600020908415600014612a9d5750612a986002916040516129e9816107948160038601613cf0565b6129f2856141ff565b526129fc846141ff565b50604051612a11816107948160048601613cf0565b612a1a8561420c565b52612a248461420c565b506001810154604051608082901b6001600160801b0319168982015260108152612a4f603082613b1a565b612a58876141ff565b52612a62866141ff565b506040516001600160801b03199091168882015260108152612a85603082613b1a565b612a8e8661420c565b526107838561420c565b612954565b90612aa78361420c565b515115612b07575b612ab88461420c565b515115612ac6575b50612954565b6001015460801b6040519060018060801b0319168682015260108152612aed603082613b1a565b612af68461420c565b52612b008361420c565b5086612ac0565b604051612b1b816107948160038601613cf0565b612b248461420c565b52612b2e8361420c565b50612aaf565b505033600052600584528460036040600020604051612b5a816107948160058601613cf0565b612b63856141ff565b52612b6d846141ff565b50604051612b82816107948160068601613cf0565b612b8b8561420c565b52612b958461420c565b50805460405160a082901b6001600160b01b03191689820152600a8152612bbd602a82613b1a565b612bc6876141ff565b52612bd0866141ff565b5060405160509190911b6001600160b01b03191688820152600a8152612bf7602a82613b1a565b612c008661420c565b52612c0a8561420c565b5001546040519086820152858152612c23604082613b1a565b9061294f565b346101bd5760203660031901126101bd57600435600052600c60205260ff60406000208054906001810154600282015491612cec6003820154600483015460405191612c7c83611d2e8160058901613cf0565b600685015496896009600788015497015416966040519a8a612ca18d83819e16613ca9565b818160081c1660208d0152818160101c16151560408d015260181c16151560608b015260808a015260a089015260c088015260e0870152610180610100870152610180860190613bf7565b9261012085015261014084015215156101608301520390f35b346101bd5760003660031901126101bd57602060ff600154166040519015158152f35b346101bd5760603660031901126101bd576004356001600160401b0381116101bd57612d5b61168c913690600401613b56565b60443590602435906142c3565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576020610ad2612d9d923690600401613b56565b8101600481520301902060098101612dc36008612dbc60078501614230565b9301614230565b604051908180926020855491828152019081956000526020600020906000915b81601f84011061330b5792612f1092612f3195926020979554918181106132f1575b8181106132d4575b8181106132b7575b81811061329a575b81811061327e575b818110613261575b818110613244575b818110613227575b81811061320a575b8181106131ed575b8181106131d0575b8181106131b3575b818110613196575b818110613179575b81811061315c575b81811061313f575b818110613122575b818110613105575b8181106130e8575b8181106130cb575b8181106130ae575b818110613091575b818110613074575b818110613057575b81811061303a575b81811061301d575b818110613000575b818110612fe3575b818110612fc6575b818110612fa9575b818110612f8c575b10612f76575b5095612f249897969594939291950385613b1a565b604051968796606088526060880190613c75565b9086820384880152613c75565b918483036040860152519182815201919060005b818110612f53575050500390f35b9193509160208082612f686001948851613ca9565b019401910191849392612f45565b90612f8581889360f81c613ca9565b0189612efb565b928881612fa160019360ff8760f01c16613ca9565b019301612ef5565b928881612fbe60019360ff8760e81c16613ca9565b019301612eed565b928881612fdb60019360ff8760e01c16613ca9565b019301612ee5565b928881612ff860019360ff8760d81c16613ca9565b019301612edd565b92888161301560019360ff8760d01c16613ca9565b019301612ed5565b92888161303260019360ff8760c81c16613ca9565b019301612ecd565b92888161304f60019360ff8760c01c16613ca9565b019301612ec5565b92888161306c60019360ff8760b81c16613ca9565b019301612ebd565b92888161308960019360ff8760b01c16613ca9565b019301612eb5565b9288816130a660019360ff8760a81c16613ca9565b019301612ead565b9288816130c360019360ff8760a01c16613ca9565b019301612ea5565b9288816130e060019360ff8760981c16613ca9565b019301612e9d565b9288816130fd60019360ff8760901c16613ca9565b019301612e95565b92888161311a60019360ff8760881c16613ca9565b019301612e8d565b92888161313760019360ff8760801c16613ca9565b019301612e85565b92888161315460019360ff8760781c16613ca9565b019301612e7d565b92888161317160019360ff8760701c16613ca9565b019301612e75565b92888161318e60019360ff8760681c16613ca9565b019301612e6d565b9288816131ab60019360ff8760601c16613ca9565b019301612e65565b9288816131c860019360ff8760581c16613ca9565b019301612e5d565b9288816131e560019360ff8760501c16613ca9565b019301612e55565b92888161320260019360ff8760481c16613ca9565b019301612e4d565b92888161321f60019360ff8760401c16613ca9565b019301612e45565b92888161323c60019360ff8760381c16613ca9565b019301612e3d565b92888161325960019360ff8760301c16613ca9565b019301612e35565b92888161327660019360ff8760281c16613ca9565b019301612e2d565b92888161329260019360ff87851c16613ca9565b019301612e25565b9288816132af60019360ff8760181c16613ca9565b019301612e1d565b9288816132cc60019360ff8760101c16613ca9565b019301612e15565b9288816132e960019360ff8760081c16613ca9565b019301612e0d565b92888161330360019360ff8716613ca9565b019301612e05565b93509091600161040060209261358687546133298360ff8316613ca9565b61333b86840160ff8360081c16613ca9565b61334e6040840160ff8360101c16613ca9565b6133616060840160ff8360181c16613ca9565b6133736080840160ff83891c16613ca9565b61338660a0840160ff8360281c16613ca9565b61339960c0840160ff8360301c16613ca9565b6133ac60e0840160ff8360381c16613ca9565b6133c0610100840160ff8360401c16613ca9565b6133d4610120840160ff8360481c16613ca9565b6133e8610140840160ff8360501c16613ca9565b6133fc610160840160ff8360581c16613ca9565b613410610180840160ff8360601c16613ca9565b6134246101a0840160ff8360681c16613ca9565b6134386101c0840160ff8360701c16613ca9565b61344c6101e0840160ff8360781c16613ca9565b613460610200840160ff8360801c16613ca9565b613474610220840160ff8360881c16613ca9565b613488610240840160ff8360901c16613ca9565b61349c610260840160ff8360981c16613ca9565b6134b0610280840160ff8360a01c16613ca9565b6134c46102a0840160ff8360a81c16613ca9565b6134d86102c0840160ff8360b01c16613ca9565b6134ec6102e0840160ff8360b81c16613ca9565b613500610300840160ff8360c01c16613ca9565b613514610320840160ff8360c81c16613ca9565b613528610340840160ff8360d01c16613ca9565b61353c610360840160ff8360d81c16613ca9565b613550610380840160ff8360e01c16613ca9565b6135646103a0840160ff8360e81c16613ca9565b6135786103c0840160ff8360f01c16613ca9565b6103e083019060f81c613ca9565b019401920190859392612de3565b346101bd5760203660031901126101bd576004356001600160401b0381116101bd576135c4903690600401613b56565b60405190600b815192602081818501956135df818389613bd4565b8101600d8152030190200154906135f582614148565b916135ff816141b5565b9061360981614148565b9260005b82811061365057613634866108718761364288604051958695606087526060870190613b9d565b908582036020870152613c1c565b908382036040850152613c75565b8060026136b461078383600b61368960208e8e6136a28660ff6136998f9e60019f61368989898d93604051938492839251928391613bd4565b8101600d81520301902001613f95565b5054169261421c565b52604051809381928d51928391613bd4565b6136be828761421c565b526136c9818661421c565b50816136e882600b61368960208d604051809381928c51928391613bd4565b5001546136f5828861421c565b520161360d565b346101bd5760403660031901126101bd576004356001600160401b0381116101bd5761372c903690600401613b56565b6024356001600160401b0381116101bd5761374b903690600401613b56565b6137b360003381526005602052600560408220016040516137748161021e602082018095613d89565b519020906040519160208301865193613798602082818b01976101a181878b613bd4565b519020148015613a8c575b156139d557506102776001613e1a565b9081600052600c6020526040600020916137cf61062385614a2f565b9351156101bd57600052600c602052600882019060ff8254935460081c1683101561399657805180156101bd576018106139555761380c81614bde565b156138fb576000936020820190855b8160005260086020526040600020548110156138df57816000526008602052613848816040600020613e8a565b5060405161385e8161021e602082018095613d89565b519020604051602081019061387c60208289516101a181878c613bd4565b5190201461388c5760010161381b565b505061168c9450603c61185a61182860206138bc946138ab6001613eb8565b604051809381928951928391613bd4565b60ff604051936138cb85613aff565b168352600060208401526040830152614104565b5050603c61185a61182860206138bc946138ab61168c9a613eb8565b60405162461bcd60e51b815260206004820152602c60248201527f43616e646964617465206e616d652063616e206f6e6c7920636f6e7461696e2060448201526b185b1c1a1858995d1a58d85b60a21b6064820152608490fd5b60405162461bcd60e51b81526020600482015260196024820152786e616d65206c696d697473203234206368617261637465727360381b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527610d85b991a59185d19481b1a5b5a5d081c995858da1959604a1b6044820152606490fd5b33815260056020526139fd61021e610291600560408520016040519283916020830190613d89565b613a186040516102916020828a516101a1818484018b613bd4565b14801590613a41575b613a2f575b61027790613e1a565b50613a3984614a2f565b506001613a26565b503381526005602052613a6a61021e610291600660408520016040519283916020830190613d89565b613a856040516102916020828a516101a1818484018b613bd4565b1415613a21565b50338152600560205260066040822001604051613ab18161021e602082018095613d89565b5190206040516020810190613acf6020828a516101a181878b613bd4565b519020146137a3565b346101bd5760003660031901126101bd5760015460081c6001600160a01b03168152602090f35b606081019081106001600160401b03821117610b6257604052565b90601f801991011681019081106001600160401b03821117610b6257604052565b6001600160401b038111610b6257601f01601f191660200190565b81601f820112156101bd57803590613b6d82613b3b565b92613b7b6040519485613b1a565b828452602083830101116101bd57816000926020809301838601378301015290565b906020808351928381520192019060005b818110613bbb5750505090565b825160ff16845260209384019390920191600101613bae565b60005b838110613be75750506000910152565b8181015183820152602001613bd7565b90602091613c1081518092818552858086019101613bd4565b601f01601f1916010190565b9080602083519182815201916020808360051b8301019401926000915b838310613c4857505050505090565b9091929394602080613c66600193601f198682030187528951613bf7565b97019301930191939290613c39565b906020808351928381520192019060005b818110613c935750505090565b8251845260209384019390920191600101613c86565b9060058210156104d75752565b90600182811c92168015613ce6575b6020831014613cd057565b634e487b7160e01b600052602260045260246000fd5b91607f1691613cc5565b60009291815491613d0083613cb6565b8083529260018116908115613d565750600114613d1c57505050565b60009081526020812093945091925b838310613d3c575060209250010190565b600181602092949394548385870101520191019190613d2b565b915050602093945060ff929192191683830152151560051b010190565b600435906001600160a01b03821682036101bd57565b60009291815491613d9983613cb6565b9260018116908115613de45750600114613db257505050565b909192935060005260206000206000905b838210613dd05750500190565b600181602092548486015201910190613dc3565b60ff191683525050811515909102019150565b602081519101519060208110613e0b575090565b6000199060200360031b1b1690565b15613e2157565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33316160b81b6044820152606490fd5b15613e5957565b60405162461bcd60e51b81526020600482015260096024820152686572726f723a33366160b81b6044820152606490fd5b8054821015613ea25760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b15613ebf57565b606460405162461bcd60e51b815260206004820152602060248201527f546869732043616e646964617465206973206e6f7420726567697374657265646044820152fd5b15613f0a57565b60405162461bcd60e51b815260206004820152602d60248201527f43616e646964617465206d75737420626520756e64657220363020796561727360448201526c1037b6321030b732103137b93760991b6064820152608490fd5b805415613ea257600052602060002090600090565b805460011015613ea257600052600360206000200190600090565b8054821015613ea2576000526003602060002091020190600090565b818110613fbc575050565b60008155600101613fb1565b9190601f8111613fd757505050565b614003926000526020600020906020601f840160051c83019310614005575b601f0160051c0190613fb1565b565b9091508190613ff6565b91909182516001600160401b038111610b6257614036816140308454613cb6565b84613fc8565b6020601f821160011461407757819061406893949560009261406c575b50508160011b916000199060031b1c19161790565b9055565b015190503880614053565b601f1982169083600052806000209160005b8181106140c1575095836001959697106140a8575b505050811b019055565b015160001960f88460031b161c1916905538808061409e565b9192602060018192868b015181550194019201614089565b600260406140039360ff808251161660ff19855416178455602081015160018501550151910161400f565b8054600160401b811015610b625761412191600182018155613f95565b919091610b4c57614003916140d9565b6001600160401b038111610b625760051b60200190565b9061415282614131565b61415f6040519182613b1a565b8281528092614170601f1991614131565b0190602036910137565b6040516060919061418b8382613b1a565b6002815291601f19018260005b8281106141a457505050565b806060602080938501015201614198565b906141bf82614131565b6141cc6040519182613b1a565b82815280926141dd601f1991614131565b019060005b8281106141ee57505050565b8060606020809385010152016141e2565b805115613ea25760200190565b805160011015613ea25760400190565b8051821015613ea25760209160051b010190565b906040519182815491828252602082019060005260206000209260005b81811061426257505061400392500383613b1a565b845483526001948501948794506020909301920161424d565b9060026040805161428b81613aff565b6142b0819560ff815416835260018101546020840152611d2e84518096819301613cf0565b0152565b600019811461042b5760010190565b91906142ce83614a2f565b916040516142ef855191610291602082818a01956101a18184840189613bd4565b9485600052600c6020526002604060002001546020614356600160405193838501908152838552614321604086613b1a565b6040519384918183019661236e8861433d8c8c51928391613bd4565b850191602d60f81b858401525180936021840190613bd4565b5190209286600052600c6020526040600020805460ff811660058110156104d75760010361483c5760101c60ff16614803578251156147c8576008018054946002861061478b576143b860405161029160208288516101a1818484018d613bd4565b600052600c60205260066040600020015460011c6001018060011161042b5791956143e281614131565b966143f06040519889613b1a565b818852601f196143ff83614131565b0160005b81811061475757505060005b82811061471d575050600080978192829583925b8284106146c0575b5050505060001461465e575050505061453b9086600095949552600c60205261453260026144bc602060406000209661448361446b60088a019b8c613f95565b5061447c6040518097819301613cf0565b0385613b1a565b33600052600582526003604060002001549560405196838801528287526144ab604088613b1a565b604051938492839251928391613bd4565b8101600d81520301902095600160ff19885416178755600686015460048801556144e633886149fd565b6003860154600288015560048601546003880155600787015561450f6005860160088801614ce0565b88600587015560078501546001870155600285015460068701556009860161400f565b600a840161400f565b805462ff00ff191662010003179055815491600b919091019060005b838110614609575050505060206002926145f4926145b86145a261458e60405194600785519688818189019961037281838d613bd4565b6009604051878187516103c881838c613bd4565b81549060031b9060ff6003831b921b1916179055565b6003604051848184516145cc818389613bd4565b81016004815203019020016145e181546142b4565b9055604051938492839251928391613bd4565b81016004815203019020016140688154614a22565b8061465861461960019385613f95565b50600261464d60ff83541692868101546040519461463686613aff565b855260208501526107946040518094819301613cf0565b604082015285614104565b01614557565b929650935093506001919695501515146146b75760405162461bcd60e51b815260206004820152601e60248201527f4e6f2063616e6469646174657320706173736564207468726573686f6c6400006044820152606490fd5b61400394614ddb565b60206146d085839e97969e61421c565b510151828111156146ec5750505050505060013880808061442b565b89909c91929394959c11614706575b600101929190614423565b969450600161471581966142b4565b9790506146fb565b80614737614731600193859c98969c613f95565b5061427b565b614741828861421c565b5261474c818761421c565b50019791939761440f565b60209060409a96949a5161476a81613aff565b60008152600083820152606060408201528282890101520198929498614403565b60405162461bcd60e51b81526020600482015260156024820152744e6f7420656e6f7567682063616e6469646174657360581b6044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908195b1958dd1a5bdb881251606a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270115b1958dd1a5bdb88199a5b9a5cda1959607a1b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275456c656374696f6e206973206e6f742061637469766560501b6044820152606490fd5b1561488157565b60405162461bcd60e51b81526020600482015260086024820152676572726f723a333360c01b6044820152606490fd5b8054600160401b811015610b62576148ce91600182018155613e8a565b819291549060031b91821b91600019901b1916179055565b9190918054831015613ea257600052601f60206000208360051c01921690565b60209061491c6021949382815194859201613bd4565b0190602d60f81b825260018201520190565b1561493557565b60405162461bcd60e51b8152602060048201526013602482015272416e6461207375646168206d656d696c69682160681b6044820152606490fd5b1561497757565b60405162461bcd60e51b815260206004820152601b60248201527f456c656374696f6e206973206e6f7420696e2070726f677265737300000000006044820152606490fd5b8054600160401b811015610b62576149d991600182018155613e8a565b81546001600160a01b0393841660039290921b91821b9390911b1916919091179055565b8054610100600160a81b03191660089290921b610100600160a81b0316919091179055565b801561042b576000190190565b906040908151614a3f8382613b1a565b600181526020810193602d60f81b855260019260005b8251811015614aa8576001600160f81b0319614a718285614bcd565b5116845115613ea25787516001600160f81b03191614614a94575b600101614a55565b93614aa06001916142b4565b949050614a8c565b50949192614ab5906141b5565b9260009260009660005b8451811015614b40576001600160f81b0319614adb8287614bcd565b5116845115613ea25783516001600160f81b03191614614afe575b600101614abf565b979488614b0b91866159b9565b614b15868861421c565b52614b20858761421c565b506001880180891161042b57614b38600191966142b4565b989050614af6565b5096929050614b599150614b6a939594958151916159b9565b614b63828661421c565b528361421c565b50815115614b805750614b7c906141ff565b5190565b5162461bcd60e51b815260206004820152602160248201527f496e76616c696420637573746f6d20656c656374696f6e20494420666f726d616044820152601d60fa1b6064820152608490fd5b908151811015613ea2570160200190565b60005b8151811015614cbc576030614bf68284614bcd565b5160f81c101580614ca4575b8015614c73575b8015614c42575b158015614c2b575b614c2457600101614be1565b5050600090565b506020614c388284614bcd565b5160f81c14614c18565b506061614c4f8284614bcd565b5160f81c10158015614c105750607a614c688284614bcd565b5160f81c1115614c10565b506041614c808284614bcd565b5160f81c10158015614c095750605a614c998284614bcd565b5160f81c1115614c09565b506039614cb18284614bcd565b5160f81c1115614c02565b5050600190565b602090614cd69260405193848093613d89565b9081520301902090565b919091828114614db257614cf48354613cb6565b6001600160401b038111610b6257614d10816140308454613cb6565b600093601f8211600114614d4d576140689293948291600092614d425750508160011b916000199060031b1c19161790565b015490503880614053565b845260208085208386529085209094601f198316815b818110614d9a57509583600195969710614d8157505050811b019055565b015460001960f88460031b161c1916905538808061409e565b9192600180602092868b015481550194019201614d63565b509050565b80546000825580614dc6575050565b61400391600052602060002090810190613fb1565b9093949294600052600c602052604060002091600281106000146150285750506008810193600080199186549160005b838110614fec57505050506000198114614fa757614e299085613f95565b509260ff84541692614e85600160028701960194855460405191614e4c83613aff565b82526020820152604051614e6481610794818b613cf0565b604082015283600052600b602052614e80604060002088614cc3565b6140d9565b614e97614e9187615553565b8761568b565b60005b8654811015614ebc578060006001614eb381948b613f95565b50015501614e9a565b5091939092945082600052600760205260406000209460005b8654811015614f265760019085600052600a602052604080600020614efa838b613e8a565b905460039190911b1c60a085901b85900316600090815260209190915220805460ff1916905501614ed5565b50614f9c9295507f26a0fec2a7fa4f34d00e7c5ee9d65fb464213452697b0a9f8e5143f9b289b4f99394856000526007602052614f666040600020614db7565b6000600682015560078101614f7b81546142b4565b905562ff000019815416905554604051928392604084526040840190613cf0565b9060208301520390a2565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f2063616e6469646174652061626f7665207468726573686f6c64000000006044820152606490fd5b6001614ff8828b613f95565b5001548381118061501f575b615012575b50600101614e0b565b9150935060018490615009565b50828111615004565b929490926002101561506957509061504f6008615054930161504981615553565b9061568b565b61587f565b60005260076020526140036040600020614db7565b60078201549193916002106150fe5791926008019160005b83548110156150ea5780826001615099819488613f95565b500154116150a8575b01615081565b6150e56150b58287613f95565b5085600052600b60205260026150df604060002082806150d5888d613f95565b5095019401614cc3565b01614ce0565b6150a2565b5050509061504f6140039261504981615553565b5091600290600592600060088301600161511782613f65565b500154600161512583613f7a565b500154101561525a575050615148600093925b61447c6040518097819301613cf0565b84600052600c6020526151f160406000209161516b61446b600885019687613f95565b33600052600560205261453261519c6020600360406000200154936040519482860152818552610ad2604086613b1a565b8101600d81520301902094600160ff19875416178655600685015460048701556151c633876149fd565b60038501546002870155600485015460038701556000600787015561450f6005860160088801614ce0565b805462ff00ff191662010003179055815491600b919091019060005b838110615244575050505060206002926145f4926145b86145a261458e60405194600785519688818189019961037281838d613bd4565b8061525461461960019385613f95565b0161520d565b60016152728161526984613f7a565b50015492613f65565b500154101561528b57506151486001925b939293615138565b60098301805460ff191660011790559161514890615283565b908151156153d057815115613ea257602082018051606160f81b6001600160f81b03199091161015806153ae575b615377575b5060015b825181101561537457604160f81b6001600160f81b03196152fc8386614bcd565b5116101580615352575b615313575b6001016152db565b602061531f8285614bcd565b5160f81c019060ff821161042b5760019160f81b6001600160f81b03191660001a61534a8286614bcd565b53905061530b565b50602d60f91b6001600160f81b031961536b8386614bcd565b51161115615306565b50565b825115613ea257805160f81c601f190160ff811161042b57835115613ea25760f81b6001600160f81b03191660001a9053386152d7565b50825115613ea2578051603d60f91b6001600160f81b031990911611156152d2565b90506040516153e0602082613b1a565b6000815290565b60005b8151811015614cbc5760306153ff8284614bcd565b5160f81c101580615488575b8015615457575b8015615426575b15614c24576001016153ea565b5060616154338284614bcd565b5160f81c101580156154195750607a61544c8284614bcd565b5160f81c1115615419565b5060416154648284614bcd565b5160f81c101580156154125750605a61547d8284614bcd565b5160f81c1115615412565b5060396154958284614bcd565b5160f81c111561540b565b9060005b82548110156154d257816154b88285613e8a565b90549060031b1c146154cc576001016154a4565b91505090565b60405162461bcd60e51b8152602060048201526015602482015274115b1958dd1a5bdb881251081b9bdd08199bdd5b99605a1b6044820152606490fd5b8181039291600013801582851316918412161761042b57565b906155329161550f565b42811361554c576155486301e18558914261550f565b0590565b5060001990565b8054801561563d576000199160005b82811061560557506000805b8381106155d3575061557f90614148565b9260009160005b84811061559557505050505090565b8260016155a28385613f95565b500154146155b3575b600101615586565b926155cb81856155c56001948a61421c565b526142b4565b9390506155ab565b8460016155e08386613f95565b500154146155f1575b60010161556e565b906155fd6001916142b4565b9190506155e9565b8360016156128385613f95565b50015410615623575b600101615562565b92506001806156328584613f95565b50015493905061561b565b60405162461bcd60e51b81526020600482015260196024820152784e6f2063616e6469646174657320746f206576616c7561746560381b6044820152606490fd5b9190820391821161042b57565b81511561584057916000905b8251821015615717576001820180831161042b575b835181101561570b576001906156c2848661421c565b516156cd828761421c565b51116156da575b016156ac565b6156e4848661421c565b516156ef828761421c565b516156fa868861421c565b52615705828761421c565b526156d4565b50600190910190615697565b91905060005b815181101561583a57615730818361421c565b518454600019810190811161042b578082036157ea575b5050835480156157d45760001901906157608286613f95565b929092610b4c57600283600060019555600085820155016157818154613cb6565b9081615792575b505085550161571d565b81601f6000931186146157a95750555b3880615788565b818352602083206157c491601f0160051c8101908701613fb1565b80825281602081209155556157a2565b634e487b7160e01b600052603160045260246000fd5b6157f76157ff9187613f95565b509186613f95565b610b4c57808214615747576002808360ff806158339654161660ff1985541617845560018101546001850155019101614ce0565b3880615747565b50509050565b60405162461bcd60e51b81526020600482015260176024820152764e6f2063616e6469646174657320746f2072656d6f766560481b6044820152606490fd5b60405161589f825191610291602082818701956101a18184840189613bd4565b600052600c60205261236e6158eb6001604060002094602060028701546040518281019182528281526158d3604082613b1a565b60405196879461433d8587019a8b9251928391613bd4565b5190206008820180549060005b8281106159a057505050806000526007602052604060002080549060005b8281106159585750505060005260076020526159356040600020614db7565b600060068201556007810161594a81546142b4565b9055805462ff000019169055565b60019084600052600a6020526040806000206159748386613e8a565b905460039190911b1c60a085901b85900316600090815260209190915220805460ff1916905501615916565b80600060016159b0819486613f95565b500155016158f8565b92918082111580615a8b575b15615a4a576159d4828261567e565b916159de83613b3b565b926159ec6040519485613b1a565b8084526159fb601f1991613b3b565b01366020850137805b828110615a1357509193505050565b6001906001600160f81b0319615a298289614bcd565b5116615a43615a38858461567e565b9160001a9187614bcd565b5301615a04565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c696420737562737472696e6720696e646963657360381b6044820152606490fd5b5083518111156159c556fea264697066735822122077c8e503f2477da61ef1bd50d8a8b3e06e921cc2d06f72931d5babfdd6b8e2e464736f6c634300081b0033",
  "libraries": {
    "DateTime": "0x7B0cbc3C732E0597c2BADb4e6563F2C27352c097"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8509,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "organizationsCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8511,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXActivated",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8513,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXOwnerAddress",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8521,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXOwnerName",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 8523,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "VotreXUserCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8530,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "organizationData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Organization)8627_storage)"
      },
      {
        "astId": 8535,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "admin",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ElectionAdmins)8648_storage)"
      },
      {
        "astId": 8540,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "voters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Voter)8694_storage)"
      },
      {
        "astId": 8545,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "voterAddrList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8550,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "voterNameList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 8554,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "voterBirthDateByName",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      {
        "astId": 8560,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "hasVoted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8567,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "temporalCandidates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(CandidateDetail)8731_storage))"
      },
      {
        "astId": 8572,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(ElectionDetail)8724_storage)"
      },
      {
        "astId": 8577,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionResults",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)8677_storage)"
      },
      {
        "astId": 8581,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "electionExistanceChecks",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8585,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "votersIDExists",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes16,t_bool)"
      },
      {
        "astId": 8589,
        "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
        "label": "registeredAdmin",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(ElectionStatus)8595)dyn_storage": {
        "base": "t_enum(ElectionStatus)8595",
        "encoding": "dynamic_array",
        "label": "enum TestCompleXA2C.ElectionStatus[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(CandidateDetail)8731_storage)dyn_storage": {
        "base": "t_struct(CandidateDetail)8731_storage",
        "encoding": "dynamic_array",
        "label": "struct TestCompleXA2C.CandidateDetail[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes10": {
        "encoding": "inplace",
        "label": "bytes10",
        "numberOfBytes": "10"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ElectionStatus)8595": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2C.ElectionStatus",
        "numberOfBytes": "1"
      },
      "t_enum(OrganizationType)8599": {
        "encoding": "inplace",
        "label": "enum TestCompleXA2C.OrganizationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ElectionAdmins)8648_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2C.ElectionAdmins)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionAdmins)8648_storage"
      },
      "t_mapping(t_address,t_struct(Voter)8694_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestCompleXA2C.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)8694_storage"
      },
      "t_mapping(t_bytes16,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(CandidateDetail)8731_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => struct TestCompleXA2C.CandidateDetail))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(CandidateDetail)8731_storage)"
      },
      "t_mapping(t_bytes32,t_struct(ElectionDetail)8724_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TestCompleXA2C.ElectionDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionDetail)8724_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_string_memory_ptr,t_struct(CandidateDetail)8731_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2C.CandidateDetail)",
        "numberOfBytes": "32",
        "value": "t_struct(CandidateDetail)8731_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ElectionResult)8677_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2C.ElectionResult)",
        "numberOfBytes": "32",
        "value": "t_struct(ElectionResult)8677_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Organization)8627_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct TestCompleXA2C.Organization)",
        "numberOfBytes": "32",
        "value": "t_struct(Organization)8627_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CandidateDetail)8731_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.CandidateDetail",
        "members": [
          {
            "astId": 8726,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8728,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateVoteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8730,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ElectionAdmins)8648_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionAdmins",
        "members": [
          {
            "astId": 8629,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8631,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminOrgCount",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8633,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "AdminVoterIDOrg1",
            "offset": 2,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 8635,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "AdminVoterIDOrg2",
            "offset": 12,
            "slot": "0",
            "type": "t_bytes10"
          },
          {
            "astId": 8637,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionAdminAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8639,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "nextOrgCreationBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8641,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminName",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 8643,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "userBirthDate",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 8645,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 8647,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(ElectionDetail)8724_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionDetail",
        "members": [
          {
            "astId": 8697,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ElectionStatus)8595"
          },
          {
            "astId": 8699,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidateList",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8701,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isFinished",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8703,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isHaveCandidateMode",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8705,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8707,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionName",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 8709,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8711,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "endTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8713,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgID",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 8715,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalParticipants",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8717,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "waveNumber",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8721,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidates",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(CandidateDetail)8731_storage)dyn_storage"
          },
          {
            "astId": 8723,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isTiedVoting",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(ElectionResult)8677_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.ElectionResult",
        "members": [
          {
            "astId": 8650,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isPruned",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8652,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "adminAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8654,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "waveNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8656,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8658,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "endTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8660,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalVoter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8662,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionID",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 8664,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionName",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 8666,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "digitalSignature",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          },
          {
            "astId": 8668,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "registeredOrganization",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 8670,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionWinner",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 8672,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "signedBy",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 8676,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "candidates",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(CandidateDetail)8731_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Organization)8627_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.Organization",
        "members": [
          {
            "astId": 8602,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrganizationType)8599"
          },
          {
            "astId": 8604,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionAdminAddresses",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8606,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "onPreparationElectionCounter",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8608,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "activeElectionCounter",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8610,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "archivedElectionCounter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8612,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "totalMembers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8614,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgName",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 8616,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "orgID",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 8619,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionIDs",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8622,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "ElectionName",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8626,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "electionStatus",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_enum(ElectionStatus)8595)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Voter)8694_storage": {
        "encoding": "inplace",
        "label": "struct TestCompleXA2C.Voter",
        "members": [
          {
            "astId": 8679,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8681,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8683,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterIDOrg1",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 8685,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterIDOrg2",
            "offset": 16,
            "slot": "1",
            "type": "t_bytes16"
          },
          {
            "astId": 8687,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "VoterName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 8689,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID1",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 8691,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "RegisteredOrgID2",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 8693,
            "contract": "contracts/VotreXSystemRC2C.sol:TestCompleXA2C",
            "label": "userBirthDate",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}